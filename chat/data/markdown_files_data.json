[{"file_content": "# TypeSpec Introduction\n\nTypeSpec is a language for describing cloud service APIs and generating other API description languages, client and service code, documentation, and other assets. TypeSpec provides highly extensible core language primitives that can describe API shapes common among REST, GraphQL, gRPC, and other protocols.\n\nYou can find more information at https://microsoft.github.io/typespec.\n\nThis site is focused on using TypeSpec in the context of Azure. We have published a set of libraries with standard patterns and templates to make defining Azure management and data-plane services easy and compliant with Azure API guidelines. Using these building blocks\nand guard rails, your service API will be easier to build, will have an easier time passing API reviews, will be consistent with other Azure\nservices, and will produce good API documentation, good SDKs, and good CLIs.\nTypeSpec can emit the following artifacts for your service:\n\n- OpenAPI3 specs\n- OpenAPI2 specs, suitable for check-in in to the azure-rest-api-specs repo\n- Azure ProviderHub User RP controller projects. This project also contains related registration manifests and scripts for easy local testing and debugging.\n\n# TypeSpec Azure Libraries\n\n## Packages\n\n| Name                                                                                | Type    | Changelog                                        | Latest                                                                                                                                                       | Next                                                                                |\n| ----------------------------------------------------------------------------------- | ------- | ------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------ | ----------------------------------------------------------------------------------- |\n| [@azure-tools/typespec-azure-core][typespec-azure-core_src]                         | Library | [Changelog][typespec-azure-core_chg]             | [![](https://img.shields.io/npm/v/@azure-tools/typespec-azure-core)](https://www.npmjs.com/package/@azure-tools/typespec-azure-core)                         | ![](https://img.shields.io/npm/@azure-tools/typespec-azure-core/next)               |\n| [@azure-tools/typespec-resource-manager][typespec-azure-resource-manager_src]       | Library | [Changelog][typespec-azure-resource-manager_chg] | [![](https://img.shields.io/npm/v/@azure-tools/typespec-azure-resource-manager)](https://www.npmjs.com/package/@azure-tools/typespec-azure-resource-manager) | ![](https://img.shields.io/npm/@azure-tools/typespec-azure-resource-manager/next)   |\n| [@azure-tools/typespec-providerhub][typespec-providerhub_src]                       | Library | [Changelog][typespec-providerhub_chg]            | [![](https://img.shields.io/npm/v/@azure-tools/typespec-providerhub)](https://www.npmjs.com/package/@azure-tools/typespec-providerhub)                       | ![](https://img.shields.io/npm/@azure-tools/typespec-providerhub/next)              |\n| [@azure-tools/typespec-autorest][typespec-autorest_src]                             | Emitter | [Changelog][typespec-autorest_chg]               | [![](https://img.shields.io/npm/v/@azure-tools/typespec-autorest)](https://www.npmjs.com/package/@azure-tools/typespec-autorest)                             | ![](https://img.shields.io/npm/v/@azure-tools/typespec-autorest/next)               |\n| [@azure-tools/typespec-providerhub-controller][typespec-providerhub-controller_src] | Emitter | [Changelog][typespec-providerhub-controller_chg] | [![](https://img.shields.io/npm/v/@azure-tools/typespec-providerhub-controller)](https://www.npmjs.com/package/@azure-tools/typespec-providerhub-controller) | ![](https://img.shields.io/npm/v/@azure-tools/typespec-providerhub-controller/next) |\n\n[typespec-autorest_src]: https://github.com/Azure/typespec-azure/tree/main/packages/typespec-autorest\n[typespec-autorest_chg]: https://github.com/Azure/typespec-azure/tree/main/packages/typespec-autorest/CHANGELOG.md\n[typespec-azure-core_src]: https://github.com/Azure/typespec-azure/tree/main/packages/typespec-azure-core\n[typespec-azure-core_chg]: https://github.com/Azure/typespec-azure/tree/main/packages/typespec-azure-core/CHANGELOG.md\n[typespec-azure-resource-manager_src]: https://github.com/Azure/typespec-azure/tree/main/packages/typespec-azure-resource-manager\n[typespec-azure-resource-manager_chg]: https://github.com/Azure/typespec-azure/tree/main/packages/typespec-azure-resource-manager/CHANGELOG.md\n[typespec-providerhub_src]: https://github.com/Azure/typespec-azure/tree/main/packages/typespec-providerhub\n[typespec-providerhub_chg]: https://github.com/Azure/typespec-azure/tree/main/packages/typespec-providerhub/CHANGELOG.md\n[typespec-providerhub-controller_src]: https://github.com/Azure/typespec-azure/tree/main/packages/typespec-providerhub-controller\n[typespec-providerhub-controller_chg]: https://github.com/Azure/typespec-azure/tree/main/packages/typespec-providerhub-controller/CHANGELOG.md\n\n`@next` version of the package are the latest versions available on the `main` branch.\n\n### Package Layering\n\nThe main packages in this repository can be considered a series of layers which progressively add functionality\nfor specific scenarios:\n\n- [**@azure-tools/typespec-azure-core:**](https://github.com/Azure/typespec-azure/tree/main/packages/typespec-azure-core) Provides core models and interfaces for Azure service modelling\n- [**@azure-tools/typespec-azure-resource-manager:**](https://github.com/Azure/typespec-azure/tree/main/packages/typespec-azure-resource-manager) Provides additional models and interfaces for modelling Azure Resource Manager services\n- [**@azure-tools/typespec-providerhub:**](https://github.com/Azure/typespec-azure/tree/main/packages/typespec-providerhub) Adds behavior to `typespec-azure-resource-manager` specific to defining ProviderHub services\n- [**@azure-tools/typespec-providerhub-controller:**](https://github.com/Azure/typespec-azure/tree/main/packages/typespec-providerhub-controller) Generates server-side controller code for services defined with `typespec-azure-resource-manager` and `typespec-providerhub`\n\n## How to Get Help\n\n- Ask questions in the [TypeSpec Discussions Channel](https://teams.microsoft.com/l/channel/19%3a906c1efbbec54dc8949ac736633e6bdf%40thread.skype/TypeSpec%2520Discussion%2520%25F0%259F%2590%25AE?groupId=3e17dcb0-4257-4a30-b843-77f47f1d4121&tenantId=72f988bf-86f1-41af-91ab-2d7cd011db47)\n- File issues in the [typespec-azure github repo](https://github.com/azure/typespec-azure/issues)\n  - For bugs, please include:\n    - A high-level description of the bug\n    - Expected and Actual Results\n    - Repro steps, including any TypeSpec code that you used\n    - Any error messages you saw, including stack traces. For issues with VS or VS Code tooling see [Troubleshooting VSCode Tooling and Filing Issues](#troubleshooting-vscode-tooling-and-filing-issues)\n\n## More Information About TypeSpec\n\nSome additional sources:\n\n- Recordings\n  - [TypeSpec lunch-and-learn for ARM in Stream Channel](https://msit.microsoftstream.com/channel/97c90840-98dc-b478-19e5-f1ecdab7312b)\n  - [TypeSpec lunch-and-learn for Azure SDK](https://microsoft-my.sharepoint.com/:v:/r/personal/scotk_microsoft_com/Documents/Recordings/Lunch%20Learning%20Series%20_%20Mark%20Cowlishaw%20-%20TypeSpec%20Walkthrough-20211117_120334-Meeting%20Recording.mp4?csf=1&web=1&e=27IgaX)\n", "file_path": "../../docs\\intro.md", "link_to_file": "file://../../docs\\intro.md"}, {"file_content": "## What is TypeSpec?\n\nTypeSpec (Compact API Definition Language) is a typescript-like language for defining APIs. TypeSpec is designed for code reuse,\nand for Azure services, there are Azure service extensions for TypeSpec that provide high level building blocks you should use to build\nyour service. These libraries also contain rules that encourage following established patterns for Azure APIs. Using these building blocks\nand guard rails, your service API will be easier to build, will have an easier time passing API reviews, will be consistent with other Azure\nservices, and will produce good API documentation, good SDKs, and good CLIs.\nTypeSpec can emit the following artifacts for your service:\n\n- OpenAPI3 specs\n- OpenAPI2 specs, suitable for check-in in to the azure-rest-api-specs repo\n- Azure ProviderHub User RP controller projects. This project also contains related registration manifests and scripts for easy local testing and debugging.\n\nFor more information on the TypeSpec language and core libraries, see [Getting started with TypeSpec](https://microsoft.github.io/typespec)\n\n## Setting up TypeSpec and compile first project\n\n### Install TypeSpec\n\nThere are two simple options for getting TypeSpec up and running in your environment:\n\n- [Install directly from npm](https://github.com/microsoft/typespec#using-node--npm)\n\n- Use the [TypeSpec docker images](https://github.com/microsoft/typespec/blob/main/docs/docker.md)\n\n### Create a new TypeSpec Azure project\n\n- Run `tsp init` command with Azure template URL `https://aka.ms/typespec/azure-init` to create a new TypeSpec Azure project for ARM or Data-plane service APIs. This will initialize an empty TypeSpec project with correct npm package references and emitter settings for Azure services.\n\n- Run `tsp compile` in the project folder will compile the TypeSpec project and emit output in `tsp-output` folder.\n\nOnce TypeSpec project has been create, the [TypeSpec language tutorial](https://microsoft.github.io/typespec) provides a good overview of the basics of the language.\n\n## Getting Started for Azure Management Plane Services\n\nUse the resources in this section for creating Azure ARM rest API specs. For ProviderHub User RP specs and service implementation, please follow the steps in the next section.\n\n- Documentation\n  - [TypeSpec Azure ARM library](https://github.com/Azure/typespec-azure/tree/main/packages/typespec-azure-resource-manager/README.md)\n\n## Getting Started for Azure Management Plane ProviderHub UserRP service codegen\n\nIf you intend to using TypeSpec to not only generate Azure ARM rest API specs but also leverage TypeSpec ProviderHub template package to help creating service implementation of ProviderHub user RP project, please see\n[step by step guide](https://github.com/Azure/typespec-azure/blob/main/packages/typespec-providerhub-templates/README.md).\n\n- Documentation\n  - [ProviderHub Project Templates](https://github.com/Azure/typespec-azure/blob/main/packages/typespec-providerhub-templates/README.md)\n  - [Checking in TypeSpec Generated Swagger](https://github.com/Azure/typespec-azure/blob/main/docs/checking-in-api-specs-guide.md)\n- Video Walkthroughs\n  - [Getting Started with TypeSpec for ProviderHub](https://microsoft.sharepoint.com/:v:/t/AzureDeveloperExperience/EYTV39X351FAlHb8tIPHdCgB1zgVDUGfcCE2mOoQAlVAcw?e=0D1IIW)\n  - [Service Code Generation](https://microsoft.sharepoint.com/:v:/t/AzureDeveloperExperience/EUqfqSySRipChjKAciFLHfMBXHnjti49ZTrLKvHW0UWL-Q?e=EDtBNk)\n\n## Getting Started for Azure Data Plane Services\n\n- Documentation\n  - [Getting started with TypeSpec for REST APIs](https://github.com/microsoft/typespec/blob/main/README.md#getting-started)\n  - [TypeSpec language tutorial](https://microsoft.github.io/typespec)\n  - [TypeSpec Swagger Cheat Sheet](https://github.com/microsoft/typespec/blob/main/docs/typespec-for-openapi-dev.md)\n- Samples\n  - [Petstore Sample using Low-level Http APIs](https://github.com/microsoft/typespec/tree/main/packages/samples/petstore)\n  - [Petstore Sample using High-level Resource APis](https://github.com/microsoft/typespec/tree/main/packages/samples/rest/petstore)\n  - You can also browse the [Samples package](https://github.com/microsoft/typespec/tree/main/packages/samples)\n- Video Walkthroughs\n  - [Getting Started with TypeSpec](https://microsoft.sharepoint.com/:v:/t/AzureDeveloperExperience/Ee5JOjqLOFFDstWe6yB0r20BXozakjHy7w2adGxQi5ztJg?e=QgqqhQ)\n\n## How to Get Help\n\n- Ask questions in the [TypeSpec Discussions Channel](https://teams.microsoft.com/l/channel/19%3a906c1efbbec54dc8949ac736633e6bdf%40thread.skype/TypeSpec%2520Discussion%2520%25F0%259F%2590%25AE?groupId=3e17dcb0-4257-4a30-b843-77f47f1d4121&tenantId=72f988bf-86f1-41af-91ab-2d7cd011db47)\n- File issues in the [typespec-azure github repo](https://github.com/azure/typespec-azure/issues)\n  - For bugs, please include:\n    - A high-level description of the bug\n    - Expected and Actual Results\n    - Repro steps, including any TypeSpec code that you used\n    - Any error messages you saw, including stack traces. For issues with VS or VS Code tooling see [Troubleshooting VSCode Tooling and Filing Issues](#troubleshooting-vscode-tooling-and-filing-issues)\n\n### Troubleshooting VSCode Tooling and Filing Issues\n\nIf you run into a problem with the TypeSpec-specific tooling in VS Code, please try to capture the issue, and include any log information. If IntelliSense, syntax highlighting or other language features don't appear to be working:\n\n- Ensure that 'TypeSpec' is the selected language format for your document (this should happen automatically if your file uses the .tsp suffix)\n  ![image](https://user-images.githubusercontent.com/1054056/144310539-4e9bfbb9-1366-4b6f-a490-875e9bd68669.png)\n- Choose Output from the View menu to see the output of the language server (View -> Output)\n  ![image](https://user-images.githubusercontent.com/1054056/144310719-4bca242f-f11c-484c-91c7-6914fcf7fe3a.png)\n- Capture any output, including stack traces, and include in your [github issue](https://github.com/azure/typespec-azure/issues).\n  ![image](https://user-images.githubusercontent.com/1054056/144310907-ec945f54-0fd8-40a4-936c-60669f4a052f.png)\n- Restart VS Code to restart the language server\n\n## More Information About TypeSpec\n\nSome additional sources:\n\n- Recordings\n  - [TypeSpec lunch-and-learn for ARM in Stream Channel](https://msit.microsoftstream.com/channel/97c90840-98dc-b478-19e5-f1ecdab7312b)\n  - [TypeSpec lunch-and-learn for Azure SDK](https://microsoft-my.sharepoint.com/:v:/r/personal/scotk_microsoft_com/Documents/Recordings/Lunch%20Learning%20Series%20_%20Mark%20Cowlishaw%20-%20TypeSpec%20Walkthrough-20211117_120334-Meeting%20Recording.mp4?csf=1&web=1&e=27IgaX)\n", "file_path": "../../docs\\typespec-getting-started.md", "link_to_file": "file://../../docs\\typespec-getting-started.md"}, {"file_content": "---\ntitle: Overview\nsidebar_position: 0\n---\n\n# TypeSpec AutoRest Library\n\nThis is a TypeSpec library that will emit an enriched OpenAPI 2.0 specification that can be consumed by AutoRest.\nThe generated OpenAPI spec will have custom `x-ms-` extensions properties and conform to standards required by AutoRest to generate a more accurate SDK.\n\n## Getting started\n\n1. Include `@azure-tools/typespec-autorest` dependencies in package.json\n\n```json\n{\n  ...\n  \"dependencies\": {\n    ...\n    \"@azure-tools/typespec-autorest\": \"latest\"\n  }\n}\n```\n\n2. Run `npm install` to install the dependency\n3. Import `@azure-tools/typespec-autorest` in your `main.tsp` file\n\n```typespec\nimport \"@azure-tools/typespec-autorest\";\n```\n\n4. Run `tsp compile`. This will result in a `swagger.json` file crated in `./tsp-output/swagger.json`\n\n## Use in autorest\n\nGenerate the OpenAPI spec as shown above then run autorest cli directly on it.\n\n```bash\nautorest --input-file=<path/to/generated/file.json>\n# Example\nautorest --input-file=./tsp-output/@azure-tools/typespec-autorest/openapi.json --python\n```\n\n## Configuration\n\n### Emitter options:\n\nEmitter options can be configured via the `tspconfig.yaml` configuration:\n\n```yaml\nemitters:\n  '@azure-tools/typespec-autorest':\n    <optionName>: <value>\n\n\n# For example\nemitters:\n  '@azure-tools/typespec-autorest':\n    output-file: my-custom-swagger.json\n```\n\nor via the command line with\n\n```bash\n--option \"@azure-tools/typespec-autorest.<optionName>=<value>\"\n\n# For example\n--option \"@azure-tools/typespec-autorest.output-file=my-custom-swagger.json\"\n```\n\n#### `azure-resource-provider-folder`\n\n`resource-manager` directory under your service folder are located so the emitter can emit correct sub-folder structure and swagger files for each of the API versions. You must specify it for ARM specs with folder path relative to the TypeSpec files.\n\n#### `emitter-output-dir`\n\nSet the emitter output-dir. [See here](https://microsoft.github.io/typespec/introduction/configuration#emitter-output-dir)\n\n#### `output-file`\n\nConfigure the name of the swagger output file relative to the `output-dir`.\n\nOutput file will interpolate the following values:\n\n- service-name: Name of the service if multiple\n- version: Version of the service if multiple\n- azure-resource-provider-folder: Value of the azure-resource-provider-folder option\n- version-status: Only enabled if azure-resource-provider-folder is set. `preview` if version contains preview, stable otherwise.\n\nDefault: `{azure-resource-provider-folder}/{service-name}/{version-status}/{version}/openapi.json`\n\nExample: Single service no versioning\n\n- `openapi.yaml`\n\nExample: Multiple services no versioning\n\n- `openapi.Org1.Service1.yaml`\n- `openapi.Org1.Service2.yaml`\n\nExample: Single service with versioning\n\n- `openapi.v1.yaml`\n- `openapi.v2.yaml`\n\nExample: Multiple service with versioning\n\n- `openapi.Org1.Service1.v1.yaml`\n- `openapi.Org1.Service1.v2.yaml`\n- `openapi.Org1.Service2.v1.0.yaml`\n- `openapi.Org1.Service2.v1.1.yaml`\n\nExample: azureResourceProviderFolder is provided\n\n- `arm-folder/AzureService/preview/2020-01-01.yaml`\n- `arm-folder/AzureService/preview/2020-01-01.yaml`\n\n#### `examples-directory`\n\nDirectory where the x-ms-examples are located so the emitter can automatically link.\n\n#### `version`\n\nSelect which version should be emitted if the spec support versioning. By default all the version with be emitted in this format `<outputFileName>.<version>.json`\n\n### `new-line`\n\nSet the newline character for emitting files. Can be either:\n\n- `lf`(Default)\n- `crlf`\n\n### `omit-unreachable-types`\n\nOnly include types referenced via an operation.\n\n## Decorators\n\n- [@collectionFormat](#collectionformat)\n- [@example](#example)\n- [@useRef](#useref)\n\n### @collectionFormat\n\nSyntax:\n\n```\n@collectionFormat(formatString)\n```\n\n`@collectionFormat` specifies array property type serialization format. Valid format strings are \"csv\", \"multi\", \"ssv\", \"tsv\", \"pipes\" though \"csv\" or \"multi\" are recommended.\n\n`@collectionFormat` can only be specified on model properties that are arrays.\n\n### @example\n\nSyntax:\n\n```\n@example(pathOrUri, title)\n```\n\n`@example` attaches example files to an operation. Multiple examples can be specified.\n\n`@example` can only be specified on operations.\n\n### @useRef\n\nSyntax:\n\n```\n@useRef(urlString)\n```\n\n`@useRef` is used to replace the TypeSpec model type in emitter output with a pre-existing named OpenAPI schema such as ARM common types.\n\n## How to\n\n### Include `x-ms-skip-url-encoding` in `x-ms-parmaeterized-host` parameter\n\nEvery parameter of type `uri` in `@server` will be marked with `x-ms-skip-url-encoding`.\n\n```typespec\n@server(\"{endpoint}/v2\", \"Account endpoint\", {endpoint: url})\n```\n\nResult in\n\n```json5\n{\n  in: \"path\",\n  name: \"endpoint\",\n  required: true,\n  type: \"string\",\n  format: \"uri\",\n  \"x-ms-skip-url-encoding\": true,\n}\n```\n", "file_path": "../../docs\\emitters\\typespec-autorest\\index.md", "link_to_file": "file://../../docs\\emitters\\typespec-autorest\\index.md"}, {"file_content": "---\ntitle: \"Decorators\"\ntoc_min_heading_level: 2\ntoc_max_heading_level: 3\n---\n\n# Decorators\n\n## Autorest\n\n### `@example` {#@Autorest.example}\n\n`@example` - attaches example files to an operation. Multiple examples can be specified.\n\n`@example` can be specified on Operations.\n\n```typespec\n@Autorest.example(pathOrUri: valueof string, title: valueof string)\n```\n\n#### Target\n\n`Operation`\n\n#### Parameters\n\n| Name      | Type                    | Description                                |\n| --------- | ----------------------- | ------------------------------------------ |\n| pathOrUri | `valueof scalar string` | - path or Uri to the example file.         |\n| title     | `valueof scalar string` | - name or description of the example file. |\n\n### `@useRef` {#@Autorest.useRef}\n\n`@useRef` - is used to replace the TypeSpec model type in emitter output with a pre-existing named OpenAPI schema such as ARM common types.\n\n`@useRef` can be specified on Models and ModelProperty.\n\n```typespec\n@Autorest.useRef(jsonRef: valueof string)\n```\n\n#### Target\n\n`union Model | ModelProperty`\n\n#### Parameters\n\n| Name    | Type                    | Description                         |\n| ------- | ----------------------- | ----------------------------------- |\n| jsonRef | `valueof scalar string` | - path or Uri to an OpenAPI schema. |\n", "file_path": "../../docs\\emitters\\typespec-autorest\\reference\\decorators.md", "link_to_file": "file://../../docs\\emitters\\typespec-autorest\\reference\\decorators.md"}, {"file_content": "---\ntitle: \"Emitter usage\"\ntoc_min_heading_level: 2\ntoc_max_heading_level: 3\n---\n\n# Emitter\n\n## Usage\n\n1. Via the command line\n\n```bash\ntsp compile . --emit=@azure-tools/typespec-autorest\n```\n\n2. Via the config\n\n```yaml\nemit:\n  - \"@azure-tools/typespec-autorest\"\n```\n\n## Emitter options\n\n### `output-dir`\n\n**Type:** `string`\n\nDeprecated DO NOT USE. Use built-in emitter-output-dir instead\n\n### `output-file`\n\n**Type:** `string`\n\nName of the output file.\nOutput file will interpolate the following values:\n\n- service-name: Name of the service if multiple\n- version: Version of the service if multiple\n- azure-resource-provider-folder: Value of the azure-resource-provider-folder option\n- version-status: Only enabled if azure-resource-provider-folder is set. `preview` if version contains preview, stable otherwise.\n\nDefault: `{azure-resource-provider-folder}/{service-name}/{version-status}/{version}/openapi.json`\n\nExample: Single service no versioning\n\n- `openapi.yaml`\n\nExample: Multiple services no versioning\n\n- `openapi.Org1.Service1.yaml`\n- `openapi.Org1.Service2.yaml`\n\nExample: Single service with versioning\n\n- `openapi.v1.yaml`\n- `openapi.v2.yaml`\n\nExample: Multiple service with versioning\n\n- `openapi.Org1.Service1.v1.yaml`\n- `openapi.Org1.Service1.v2.yaml`\n- `openapi.Org1.Service2.v1.0.yaml`\n- `openapi.Org1.Service2.v1.1.yaml`\n\nExample: azureResourceProviderFolder is provided\n\n- `arm-folder/AzureService/preview/2020-01-01.yaml`\n- `arm-folder/AzureService/preview/2020-01-01.yaml`\n\n### `examples-directory`\n\n**Type:** `string`\n\nDirectory where the examples are located. Default: `{cwd}/examples`.\n\n### `version`\n\n**Type:** `string`\n\n### `azure-resource-provider-folder`\n\n**Type:** `string`\n\n### `arm-types-dir`\n\n**Type:** `string`\n\nPath to the common-types.json file folder. Default: '${project-root}/../../common-types/resource-management'\n\n### `new-line`\n\n**Type:** `\"crlf\" | \"lf\"`\n\nSet the newline character for emitting files.\n\n### `omit-unreachable-types`\n\n**Type:** `boolean`\n\nOmit unreachable types. By default all types declared under the service namespace will be included. With this flag on only types references in an operation will be emitted.\n\n### `include-x-typespec-name`\n\n**Type:** `\"inline-only\" | \"never\"`\n\nIf the generated openapi types should have the `x-typespec-name` extension set with the name of the TypeSpec type that created it.\nThis extension is meant for debugging and should not be depended on.\n\n### `use-read-only-status-schema`\n\n**Type:** `boolean`\n\nCreate read-only property schema for lro status\n", "file_path": "../../docs\\emitters\\typespec-autorest\\reference\\emitter.md", "link_to_file": "file://../../docs\\emitters\\typespec-autorest\\reference\\emitter.md"}, {"file_content": "---\ntitle: Overview\nsidebar_position: 0\ntoc_min_heading_level: 2\ntoc_max_heading_level: 3\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n# Overview\n\nTypeSpec library for emitting openapi from the TypeSpec REST protocol binding\n\n## Install\n\n<Tabs>\n<TabItem value=\"spec\" label=\"In a spec\" default>\n\n```bash\nnpm install @azure-tools/typespec-autorest\n```\n\n</TabItem>\n<TabItem value=\"library\" label=\"In a library\" default>\n\n```bash\nnpm install --save-peer @azure-tools/typespec-autorest\n```\n\n</TabItem>\n</Tabs>\n\n## Emitter usage\n\n[See documentation](./emitter.md)\n\n## Autorest\n\n### Decorators\n\n- [`@example`](./decorators.md#@Autorest.example)\n- [`@useRef`](./decorators.md#@Autorest.useRef)\n", "file_path": "../../docs\\emitters\\typespec-autorest\\reference\\index.mdx", "link_to_file": "file://../../docs\\emitters\\typespec-autorest\\reference\\index.mdx"}, {"file_content": "---\ntitle: Overview\nsidebar_position: 0\n---\n\n# TypeSpec CSharp Emitter\n", "file_path": "../../docs\\emitters\\typespec-csharp\\index.md", "link_to_file": "file://../../docs\\emitters\\typespec-csharp\\index.md"}, {"file_content": "---\ntitle: \"Emitter usage\"\ntoc_min_heading_level: 2\ntoc_max_heading_level: 3\n---\n\n# Emitter\n\n## Usage\n\n1. Via the command line\n\n```bash\ntsp compile . --emit=@azure-tools/typespec-service-csharp\n```\n\n2. Via the config\n\n```yaml\nemit:\n  - \"@azure-tools/typespec-service-csharp\"\n```\n\n## Emitter options\n\n### `skip-format`\n\n**Type:** `boolean`\n\nSkips formatting of generated C# Types. By default, C# files are formatted using 'dotnet format'.\n", "file_path": "../../docs\\emitters\\typespec-service-csharp\\reference\\emitter.md", "link_to_file": "file://../../docs\\emitters\\typespec-service-csharp\\reference\\emitter.md"}, {"file_content": "---\ntitle: Overview\nsidebar_position: 0\ntoc_min_heading_level: 2\ntoc_max_heading_level: 3\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n# Overview\n\nAzure TypeSpec service code generator for c-sharp\n\n## Install\n\n<Tabs>\n<TabItem value=\"spec\" label=\"In a spec\" default>\n\n```bash\nnpm install @azure-tools/typespec-service-csharp\n```\n\n</TabItem>\n<TabItem value=\"library\" label=\"In a library\" default>\n\n```bash\nnpm install --save-peer @azure-tools/typespec-service-csharp\n```\n\n</TabItem>\n</Tabs>\n\n## Emitter usage\n\n[See documentation](./emitter.md)\n", "file_path": "../../docs\\emitters\\typespec-service-csharp\\reference\\index.mdx", "link_to_file": "file://../../docs\\emitters\\typespec-service-csharp\\reference\\index.mdx"}, {"file_content": "# Creating a new project\n\nIf you installed TypeSpec on your local machine, here is how you can create a new TypeSpec project:\n\nFirst, open your command prompt (PowerShell, cmd.exe, bash, etc), create an empty folder for your new project, and cd into it. If creating a new service in the [Azure/azure-rest-api-specs](https://github.com/Azure/azure-rest-api-specs) repository, create the new service folder following our [directory structure guidelines](https://github.com/Azure/azure-rest-api-specs/blob/main/documentation/typespec-structure-guidelines.md).\n\nNow create a new Azure service specification using the tsp init command:\n\n```bash\ntsp init https://aka.ms/typespec/core-init\n\n```\n\nYou will be prompted with a few questions:\n\n- The service template: choose between \"Azure Data Plane Service\", \"Azure Resource Manager Service\"\n- The project name: Enter a name to be used as the project folder name or press enter to use the same name as the folder you created\n- Update the libraries: Press Enter to continue with the selected packages\n\nThe prompts will look something like this:\n\n```bash\nTypeSpec compiler v0.34.0\n\n\u221a Please select a template \u00bb Azure Data Plane Service\n\u221a Project name ... myService\n\u221a Update the libraries? \u00bb @typespec/rest, @typespec/versioning, @azure-tools/typespec-autorest, @azure-tools/typespec-azure-core\nTypeSpec init completed.\n```\n\nYou can run `tsp install` now to install dependencies.\nOnce your project files have been created, execute the following command to install the TypeSpec compiler and libraries:\n\n```bash\ntsp install\n```\n\nYou can now open the file `main.tsp` to follow along with the rest of the tutorial!\n\n| Azure Service Type                        | Tutorial                                                | Produces                                                              |\n| ----------------------------------------- | ------------------------------------------------------- | --------------------------------------------------------------------- |\n| Azure Data-Plane Service                  | [Azure-Core tutorial](azure-core/step02)                | OpenApi 2.0 (Swagger) spec                                            |\n| Azure Management Service                  | [ARM tutorial](azure-resource-manager/step00)           | OpenApi 2.0 (Swagger) spec                                            |\n| Azure Management Service with ProviderHub | [ProviderHub](providerhub/step01-create-userrp-project) | OpenApi 2.0 (Swagger) spec,Full debugable UserRP asp.net core project |\n", "file_path": "../../docs\\getstarted\\createproject.md", "link_to_file": "file://../../docs\\getstarted\\createproject.md"}, {"file_content": "# Installation\n\n## Try TypeSpec without installing anything\n\nYou can try TypeSpec on the web without installing anything.\n\n- [TypeSpec playground](https://aka.ms/trytypespec)\n- [TypeSpec playground for Azure services](https://azure.github.io/typespec-azure/playground)\n\n### Installing TypeSpec core toolset\n\nSee https://microsoft.github.io/typespec/introduction/installation\n\n## Installing TypeSpec Azure toolsets\n\nTo work on Azure with TypeSpec, you should pre-install `@azure-tools/typespec-azure-core` to define Azure resources, and `@azure-tools/typespec-autorest` to export in Swagger. In other words:\n\n```bash\nnpm install @typespec/rest @typespec/openapi3 @azure-tools/typespec-azure-core @azure-tools/typespec-autorest\n```\n\n> If you plan to use the output openapi with autorest or any of the azure sdk tooling _you should use typespec-autorest_, the openapi3 emitter is not going to have any of the ms extensions (pageable, lro, client name, etc.) and so it will be losing information.\n", "file_path": "../../docs\\getstarted\\installation.md", "link_to_file": "file://../../docs\\getstarted\\installation.md"}, {"file_content": "# 1. Writing Your First Service\n\nThe Azure Data Plane Service template will create a very basic TypeSpec file in `main.tsp`:\n\n```typespec\nimport \"@typespec/rest\";\nimport \"@typespec/versioning\";\nimport \"@azure-tools/typespec-autorest\";\nimport \"@azure-tools/typespec-azure-core\";\n```\n\nThese lines import the libraries you will need to build your first service.\n\n> **NOTE:** The `@azure-tools/typespec-autorest` import is not explicitly needed for this tutorial.\n\n**Add the following lines** to bring the models, operations, and decorators you will need into the specification:\n\n```typespec\nusing TypeSpec.Http;\nusing TypeSpec.Rest;\nusing TypeSpec.Versioning;\nusing Azure.Core;\n```\n", "file_path": "../../docs\\getstarted\\azure-core\\step01.md", "link_to_file": "file://../../docs\\getstarted\\azure-core\\step01.md"}, {"file_content": "# 2. Create the service namespace\n\nTo describe a service, you first need to define a \"blockless\" (file-level, no curly braces) namespace and use the `@service` decorator to mark it as the service namespace:\n\n```typespec\n@service({\n  title: \"Contoso Widget Manager\",\n})\nnamespace Contoso.WidgetManager;\n```\n\nThis marks the `Contoso.WidgetManager` namespace as a service namespace in this TypeSpec specification and sets its title to \"Contoso Widget Manager.\"\n", "file_path": "../../docs\\getstarted\\azure-core\\step02.md", "link_to_file": "file://../../docs\\getstarted\\azure-core\\step02.md"}, {"file_content": "# 3. Using the versioned Azure.Core types\n\nBefore you can use the models and operations defined in the `Azure.Core` namespace, you will need to specify the API version of the `Azure.Core` library that your service uses. You can do this by adding the `@useDependency` decorator to the `Contoso.WidgetManager` namespace as seen here:\n\n```typespec\n@service({\n  title: \"Contoso Widget Manager\",\n})\n@useDependency(Azure.Core.Versions.v1_0_Preview_2)\nnamespace Contoso.WidgetManager;\n```\n\nSee the sections [Versioning your service](./step10.md#versioning-your-service) and [Using Azure.Core versions](./step10.md#using-azurecore-versions) for more details about service versioning.\n\n> **NOTE:** The `Azure.Core` version used in this tutorial may be out of date! The `typespec-azure-core` [README.md](https://github.com/Azure/typespec-azure/blob/main/packages/typespec-azure-core/README.md) file contains the versions listing which describes the available versions.\n", "file_path": "../../docs\\getstarted\\azure-core\\step03.md", "link_to_file": "file://../../docs\\getstarted\\azure-core\\step03.md"}, {"file_content": "# 4. Defining your first resource\n\nNow we're ready to describe our first resource type. A \"resource\" is a model type that represents a fundamental type in the domain model of your service.\n\nFor our `WidgetService`, the most obvious model type that we will need is called `Widget`. We can create it by creating a `model` that is annotated with the `@resource` decorator. Add the following lines after the top-level `namespace` declaration:\n\n```typespec\n@doc(\"A widget.\")\n@resource(\"widgets\")\nmodel Widget {\n  @key(\"widgetName\")\n  @doc(\"The widget name.\")\n  @visibility(\"read\")\n  name: string;\n\n  @doc(\"The ID of the widget's manufacturer.\")\n  manufacturerId: string;\n}\n```\n\nThere are a few important things to point out here:\n\n- The `Widget` model has a `@resource` decorator with a parameter of `\"widgets\"`. This string is the \"collection name\" of the resource and affects where the resource appears in the service URI layout.\n- The `name` property has a `@key` decorator with a parameter of `\"widgetName\"`. This string customizes the name of the path parameter (and the parameter name itself) in operations that use this resource type. There _must_ be one property with a `@key` decorator on all resource types!\n- The `@visibility(\"read\")` decorator on the `name` property says that the `name` property should only appear in operation responses but not in operations that allow you to change properties of the `Widget` resource.\n- We use `@doc` decorators on the model type and all properties to describe. Documentation strings are enforced by linting rule when authoring specs with `Azure.Core`!\n\nGreat, now we have a resource type! Now, how do we define operations for this resource?\n", "file_path": "../../docs\\getstarted\\azure-core\\step04.md", "link_to_file": "file://../../docs\\getstarted\\azure-core\\step04.md"}, {"file_content": "# 5. Defining standard resource operations\n\nThe `Azure.Core` namespace provides a number of [standard lifecycle operations](https://azure.github.io/typespec-azure/docs/libraries/azure-core/reference/interfaces#Azure.Core.ResourceOperations) for resource types which encode many of the requirements of the [Azure REST API Guidelines](https://github.com/microsoft/api-guidelines/blob/vNext/azure/Guidelines.md).\n\n## Defining the Operation Interface\n\nThe first step to defining standard operations for a resource type is to create an instance of the `ResourceOperations` interface that is tailored to the service you are describing. Here is a canonical example:\n\n```typespec\nimport \"@azure-tools/typespec-azure-core\";\n\nusing Azure.Core;\nusing Azure.Core.Traits;\n\nalias ServiceTraits = SupportsRepeatableRequests &\n  SupportsConditionalRequests &\n  SupportsClientRequestId;\n\nalias Operations = Azure.Core.ResourceOperations<ServiceTraits>;\n```\n\nThere are two things happening here:\n\n1. We define an alias called `ServiceTraits` which is defined as the intersection of three trait model types. You can learn more about interface-level service traits [here](https://azure.github.io/typespec-azure/docs/getstarted/azure-core/step09#applying-traits-to-all-resource-operations).\n2. Then, define an alias called `Operations` which is defined as the instantiation of `Azure.Core.ResourceOperations` with the trait type you defined.\n\n> **NOTE:** We use the name `Operations` here as a convenience, but it is possible that you will define multiple aliases of `ResourceOperation` for a single service to apply different customizations for some operations. You might choose to name it something more explicit like `StandardOperations`.\n\nWe will now use this interface alias to define the standard resource operations we need.\n\n## Defining Resource Operations\n\nLet's define the standard set of CRUD (Create, Read, Update, Delete) operations that are typically needed for a resource type in an Azure service.\n\nWe will do that by defining an interface called `Widgets` which reaches into the `Operations` interface to use the standard resource operation shapes that it contains:\n\n```typespec\ninterface Widgets {\n  @doc(\"Fetch a Widget by name.\")\n  getWidget is Operations.ResourceRead<Widget>;\n\n  @doc(\"Creates or updates a Widget.\")\n  createOrUpdateWidget is Operations.ResourceCreateOrUpdate<Widget>;\n\n  @doc(\"Delete a Widget.\")\n  deleteWidget is Operations.ResourceDelete<Widget>;\n\n  @doc(\"List Widget resources.\")\n  listWidgets is Operations.ResourceList<Widget>;\n}\n```\n\n> **NOTE:** It is not necessary to define your resource operations inside of an `interface`. You can also define them in a sub-namespace of your service or inside the top-level namespace of the service. However, it is a best practice in TypeSpec to use `interface` to encapsulate the operations of a particular resource type.\n\nThe `Widget` interface defines the following standard lifecycle operations:\n\n- `ResourceRead<TResource>` - defines a \"read\" operation for a single resource instance\n- `ResourceCreateOrUpdate<TResource>` - defines an \"upsert\" operation which either creates or updates an instance of the resource type depending on whether it already exists\n- `ResourceDelete<TResource>` - defines a \"delete\" operation to delete a specific instance of the resource\n- `ResourceList<TResource>` - defines an operation that lists all instances of the resource type\n\n> **NOTE:** There are both instantaneous and long-running versions of \"create\", \"update\", and \"delete\" operations for resource types depending on what you need for a particular resource!\n\nBased on the configuration of the `Widget` type and the use of these standard operation templates, these operations will all exist under the route path:\n\n```\n/widgets/{widgetName}\n```\n\nThe list operation will simply generate the path `/widgets`.\n\n## Customizing the Error Response\n\nIf your service needs to use a custom error response type for all resource operations (this is uncommon), you may pass in a custom error response type to the `ResourceOperations` interface:\n\n```typespec\nimport \"@azure-tools/typespec-azure-core\";\n\nusing Azure.Core;\nusing Azure.Core.Traits;\n\nalias ServiceTraits = SupportsRepeatableRequests &\n  SupportsConditionalRequests &\n  SupportsClientRequestId;\n\n@error\n@doc(\"A custom error response type.\")\nmodel ErrorResponse {\n  @doc(\"The error code.\")\n  code: string;\n\n  @doc(\"The error message.\")\n  message: string;\n}\n\nalias Operations = Azure.Core.ResourceOperations<ServiceTraits, ErrorResponse>;\n```\n\nYou can also reuse the standard Azure Core error types with minor customizations:\n\n```typespec\nimport \"@azure-tools/typespec-azure-core\";\n\nusing Azure.Core;\nusing Azure.Core.Traits;\n\nalias ServiceTraits = SupportsRepeatableRequests &\n  SupportsConditionalRequests &\n  SupportsClientRequestId;\n\n@doc(\"A custom error type.\")\nmodel Error is Azure.Core.Foundations.Error {\n  @doc(\"The environment where the error occurred.\")\n  environment: string;\n}\n\nalias Operations = Azure.Core.ResourceOperations<\n  ServiceTraits,\n  Azure.Core.Foundations.ErrorResponseBase<Error>\n>;\n```\n", "file_path": "../../docs\\getstarted\\azure-core\\step05.md", "link_to_file": "file://../../docs\\getstarted\\azure-core\\step05.md"}, {"file_content": "# 6. Defining long-running resource operations\n\nIf your service uses any long-running operations (LROs; see [our guidelines](https://github.com/microsoft/api-guidelines/blob/vNext/azure/Guidelines.md#long-running-operations--jobs) for specifics), you will need to define a \"status monitor\" operation which can report the status of the operation.\n\nLet's say that we want to make our `createOrUpdateWidget` and `deleteWidget` operations long-running. Here's how we can update our `Widgets` interface to accomplish that:\n\n```typespec\nimport \"@azure-tools/typespec-azure-core\";\n\nusing Azure.Core;\nusing Azure.Core.Traits;\n\nalias ServiceTraits = SupportsRepeatableRequests &\n  SupportsConditionalRequests &\n  SupportsClientRequestId;\n\nalias Operations = Azure.Core.ResourceOperations<ServiceTraits>;\n\ninterface Widgets {\n  @doc(\"Gets status of a Widget operation.\")\n  getWidgetOperationStatus is Operations.GetResourceOperationStatus<Widget>;\n\n  @doc(\"Fetch a Widget by name.\")\n  getWidget is Operations.ResourceRead<Widget>;\n\n  @doc(\"Creates or updates a Widget asynchronously.\")\n  @pollingOperation(Widgets.getWidgetOperationStatus)\n  createOrUpdateWidget is Operations.LongRunningResourceCreateOrUpdate<Widget>;\n\n  @doc(\"Delete a Widget asynchronously.\")\n  @pollingOperation(Widgets.getWidgetOperationStatus)\n  deleteWidget is Operations.LongRunningResourceDelete<Widget>;\n\n  @doc(\"List Widget resources.\")\n  listWidgets is Operations.ResourceList<Widget>;\n}\n```\n\n1. We change `createOrUpdateWidget` to use `LongRunningResourceCreateOrUpdate<Widget>` and `deleteWidget` to use `LongRunningResourceDelete`.\n2. We define the `getWidgetOperationStatus` operation based on the `GetResourceOperationStatus` signature. This defines the operation status monitor as a child resource of the `Widget` type so that it shows up under that resource in the route hierarchy.\n3. We **must** add the `pollingOperation` decorator to both of the long-running operations and reference the `Widgets.getWidgetOperationStatus` operation. This connects the long-running operations to their associated status monitor operation to make it easier for service clients to be generated.\n\n> **NOTE:** The status monitor operation **must** be defined earlier in the interface than the long-running operations that reference it otherwise TypeSpec will not be able to resolve the reference!\n\nSee [considerations for service design](https://github.com/microsoft/api-guidelines/blob/vNext/azure/ConsiderationsForServiceDesign.md#long-running-operations) for more information about LROs.\n", "file_path": "../../docs\\getstarted\\azure-core\\step06.md", "link_to_file": "file://../../docs\\getstarted\\azure-core\\step06.md"}, {"file_content": "# 7. Defining child resources\n\nSometimes your resource types will need to have child resources that relate to their parent types. You can identify that a resource type is the child of another resource by using the `@parentResource` decorator.\n\nFor example, here's how you could create a new `WidgetPart` resource under the `Widget` defined above:\n\n```typespec\n@doc(\"A WidgetPart resource belonging to a Widget resource.\")\n@resource(\"parts\")\n@parentResource(Widget)\nmodel WidgetPart {\n  @key(\"partName\")\n  name: string;\n\n  @doc(\"The part number.\")\n  number: string;\n\n  @doc(\"The part name.\")\n  partName: string;\n}\n```\n\nWhen you use the standard resource operations with child resource types, their operation routes will include the route of the parent resource. For example, we might define the following operations for `WidgetPart`:\n\n```typespec\nimport \"@azure-tools/typespec-azure-core\";\n\nusing Azure.Core;\nusing Azure.Core.Traits;\n\nalias ServiceTraits = SupportsRepeatableRequests &\n  SupportsConditionalRequests &\n  SupportsClientRequestId;\n\nalias Operations = Azure.Core.ResourceOperations<ServiceTraits>;\n\n@doc(\"Creates a WidgetPart\")\ncreateWidgetPart is Operations.ResourceCreateWithServiceProvidedName<WidgetPart>;\n\n@doc(\"Get a WidgetPart\")\ngetWidgetPart is Operations.ResourceRead<WidgetPart>;\n```\n\nThese operations will be defined under the route path:\n\n```\n/widgets/{widgetName}/parts/{partName}\n```\n", "file_path": "../../docs\\getstarted\\azure-core\\step07.md", "link_to_file": "file://../../docs\\getstarted\\azure-core\\step07.md"}, {"file_content": "# 8. Defining custom resource actions\n\nOften your resource types will need additional operations that are not covered by the standard resource operation shapes. For this, there are a set of operation signatures for defining _resource actions_ at the instance and collection level.\n\nTo define a custom action you can use the `ResourceAction` and `ResourceCollectionAction` signatures from the `Azure.Core.ResourceOperations` interface. Let's define a couple of custom actions for the `Widget` and `WidgetPart` resources:\n\n```typespec\nimport \"@azure-tools/typespec-azure-core\";\n\nusing Azure.Core;\nusing Azure.Core.Traits;\n\nalias ServiceTraits = SupportsRepeatableRequests &\n  SupportsConditionalRequests &\n  SupportsClientRequestId;\n\nalias Operations = Azure.Core.ResourceOperations<ServiceTraits>;\n\n// In the Widgets interface...\n@doc(\"Schedule a widget for repairs.\")\nscheduleRepairs is Operations.ResourceAction<\n  Widget,\n  WidgetRepairRequest,\n  WidgetRepairRequest\n>;\n\n// In the WidgetParts interface...\n@doc(\"Reorder all parts for the widget.\")\nreorderParts is Operations.ResourceCollectionAction<\n  WidgetPart,\n  WidgetPartReorderRequest,\n  WidgetPartReorderRequest\n>;\n```\n\nThe `scheduleRepairs` operation defines a custom action for all instances of the `Widget` resource. **All collection action templates expect 3 parameters:** the resource type, the request action parameters, and the response type. In this case, `WidgetRepairRequest` is both the parameter and response type because we are using it as the body of both the request and the response of this operation.\n\n> **NOTE:** The request parameters and response type **do not** have to be the same type!\n\nWe also define an collection operation called `reorderParts`. Similarly to `scheduleRepairs`, it uses the `WidgetPartReorderRequest` as the request and response body.\n\nHere are what the routes of these two operations will look like:\n\n```\n/widgets/{widgetName}:scheduleRepairs\n/widgets/{widgetName}/parts:reorderParts\n```\n\nNotice that the operation name is used as the action name in the route!\n\nThere are also long-running operation versions of these two operations:\n\n- `LongRunningResourceAction`\n- `LongRunningResourceCollectionAction`\n\nThe same rules described in the [long-running operations](step06) section also apply to these long-running action signatures.\n", "file_path": "../../docs\\getstarted\\azure-core\\step08.md", "link_to_file": "file://../../docs\\getstarted\\azure-core\\step08.md"}, {"file_content": "# 9. Customizing operations with traits\n\nFor all standard lifecycle operations you can customize the operation parameters and response body by passing a special model type to the `Traits` parameter of the operation template, typically the second parameter of the operation template. You can also customize the whole set of resource operations by passing traits to the `ResourceOperations` interface.\n\nYou can combine multiple traits using the model intersection operator `&`. Here's an example of defining the `ServiceTraits` with `SupportsRepeatableRequests`, `SupportsConditionalRequests` and `SupportsClientRequestId`. These are then passed into the `Azure.Core.ResourceOperations` template:\n\n```typespec\nimport \"@azure-tools/typespec-azure-core\";\n\nusing Azure.Core;\nusing Azure.Core.Traits;\n\nalias ServiceTraits = SupportsRepeatableRequests &\n  SupportsConditionalRequests &\n  SupportsClientRequestId;\n\nalias Operations = Azure.Core.ResourceOperations<ServiceTraits>;\n```\n\nTraits can be applied simultaneously at both the interface and operation level, they will be composed together when your operation is defined.\n\nFor example, if you wanted to add standard list operation query parameters to the `listWidgets` operation, you could use the `ListQueryParametersTrait`:\n\n```typespec\n@doc(\"List Widget resources\")\nop listWidgets is Operations.ResourceList<\n  Widget,\n  ListQueryParametersTrait<StandardListQueryParameters & SelectQueryParameter>\n>;\n```\n\n## Useful trait types\n\nThe following trait types can be used for typical operation customization patterns:\n\n### `QueryParametersTrait<TParams, Contexts>`\n\nThis trait adds query parameters to operation signatures. It accepts a model type containing the query parameters that will be mixed in to the operation signature:\n\n```typespec\nop getWidget is Operations.ResourceRead<\n  Widget,\n  QueryParametersTrait<{\n    @query foo: string;\n  }>\n>;\n```\n\n> **NOTE**: All properties in `TParams` must be marked with `@query` or an error will be raised.\n\nThe `Contexts` parameter is configured to apply the query parameters to all operations by default.\n\nTo constrain the types of operations that these query parameters will apply to, pass one ore more of the following values:\n\n- **TraitContext.Read**: Applies to read operations\n- **TraitContext.Create**: Applies to create operations\n- **TraitContext.Update**: Applies to update operations\n- **TraitContext.Delete**: Applies to delete operations\n- **TraitContext.List**: Applies to list operations\n- **TraitContext.Action**: Applies to custom action operations\n\nHere is an example of applying query parameters to `Read` and `List` operations:\n\n```typespec\nalias MyQueryParams = QueryParametersTrait<\n  {\n    @query foo: string;\n  },\n  TraitContext.Read | TraitContext.List\n>;\n\n// This will have a `foo` parameter added\nop getWidget is Operations.ResourceRead<Widget, MyQueryParams>;\n\n// This will not get the `foo` parameter because it doesn't match the contexts\nop deleteWidget is Operations.ResourceDelete<\n  Widget,\n  QueryParametersTrait<{\n    @query foo: string;\n  }>\n>;\n```\n\n### `ListQueryParametersTrait<TParams>`\n\nThis is a helper trait that specialized `QueryParametersTrait` to the `TraitContext.List` context. For example:\n\n```typespec\nalias MyListQueryParams = ListQueryParametersTrait<{\n  @query foo: string;\n}>;\n\n// Will get the `foo` parameter\nop listWidgets is Operations.ResourceList<Widget, MyListQueryParams>;\n\n// Will not get the `foo` parameter\nop deleteWidget is Operations.ResourceDelete<Widget, MyListQueryParams>;\n```\n\n### `RequestHeadersTrait<TParams, Contexts>`\n\nThis trait adds request headers to operation signatures. It accepts a model type containing the request headers that will be mixed in to the operation signature:\n\n```typespec\nop getWidget is ResourceRead<\n  Widget,\n  RequestHeadersTrait<{\n    @header foo: string;\n  }>\n>;\n```\n\n> **NOTE**: All properties in `TParams` must be marked with `@header` or an error will be raised.\n\nYou can specify `Contexts` where this trait applies in the way as described for the `QueryParametersTrait`.\n\n### `ResponseHeadersTrait<TParams, Contexts>`\n\nThis trait adds response headers to operation signatures. It accepts a model type containing the response headers that will be mixed in to the operation signature:\n\n```typespec\nop getWidget is ResourceRead<\n  Widget,\n  ResponseHeadersTrait<{\n    @header foo: string;\n  }>\n>;\n```\n\n> **NOTE**: All properties in `TParams` must be marked with `@header` or an error will be raised.\n\nYou can specify `Contexts` where this trait applies in the way as described for the `QueryParametersTrait`.\n\n## Applying traits to all resource operations\n\nIf you would like to apply the same traits to all resource operations, you can do so by adding them to the traits object for your instance of the `ResourceOperations` interface. Here's an example of adding a request header called `foo` to all resource operations:\n\n```typespec\nimport \"@azure-tools/typespec-azure-core\";\n\nusing Azure.Core;\nusing Azure.Core.Traits;\n\nalias ServiceTraits = SupportsRepeatableRequests &\n  SupportsConditionalRequests &\n  SupportsClientRequestId &\n  RequestHeadersTrait<{\n    @header foo: string;\n  }>;\n\nalias Operations = ResourceOperations<ServiceTraits>;\n\nop deleteWidget is Operations.ResourceDelete<Widget>;\n```\n\nThis defines `deleteWidget` by using the `ResourceDelete` template defined inside of your customized `Operations` interface.\n\n**IMPORTANT NOTE:** The `ResourceOperations` interface requires that an explicit set of traits be included to describe whether certain Azure service features are supported.\n\nHere is the list of the required traits with the names of the trait models to enable and disable those features:\n\n- **RepeatableRequests**: `SupportsRepeatableRequests` and `NoRepeatableRequests`\n- **ConditionalRequests**: `SupportsConditionalRequests` and `NoConditionalRequests`\n- **ClientRequestId**: `SupportsClientRequestId` and `NoClientRequestId`\n\n## Customizing the API version parameter\n\nYou can use the `VersionParameterTrait` to customize the API version parameter for resource operations, either at the level of interface or individual operation. To do this, use the `TraitOverride` type to override the existing `api-version` query parameter:\n\n```typespec\n@doc(\"The ApiVersion path parameter.\")\nmodel ApiVersionPathParameter {\n  @segment(\"api\")\n  @path(\"api-version\")\n  @doc(\"The API version to use for this operation.\")\n  apiVersion: string;\n}\n\nop deleteWidget is ResourceDelete<\n  Widget,\n  TraitOverride<VersionParameterTrait<ApiVersionPathParameter>>\n>;\n```\n\nUsing the `TraitOverride` modifier with the `VersionParameterTrait<ApiVersionPathParameter>` causes any existing `VersionParameterTrait` instances in the operation signature to be overridden by the one you have supplied.\n\nThis will result in an operation that has the route path `/api/{apiVersion}/widgets/{widgetName}` while also removing the old `api-version` query parameter from the operation signature.\n\n## Versioning the use of traits\n\nIt is possible that a service will begin to support a particular feature or trait in a later version. There are two ways to express that a trait is being added in a later service version:\n\n### Using the `TVersionAdded` parameter of some trait types\n\n> **NOTE:** Versioning of Azure Core service specifications is covered in more detail on [this page](https://azure.github.io/typespec-azure/docs/getstarted/azure-core/step10).\n\nSome standard trait types accept an optional `TVersionAdded` parameter which enables you to specify the service version enum representing the version where support for this trait is added:\n\n- `SupportsClientRequestId`\n- `SupportsRepeatableRequests`\n- `SupportsConditionalRequests`\n\nHere is an example of adding support for repeatable requests in a later service version:\n\n```typespec\nimport \"@azure-tools/typespec-azure-core\";\n\nusing Azure.Core;\nusing Azure.Core.Traits;\nusing TypeSpec.Versioning;\n\n@service({\n  title: \"Contoso Widget Manager\",\n})\n@versioned(Contoso.WidgetManager.Versions)\nnamespace Contoso.WidgetManager;\n\nenum Versions {\n  @useDependency(Azure.Core.Versions.v1_0_Preview_2)\n  v2022_08_31: \"v20220831\",\n\n  @useDependency(Azure.Core.Versions.v1_0_Preview_2)\n  v2022_11_30: \"v20221130\",\n}\n\nalias ServiceTraits = SupportsRepeatableRequests<Versions.v2022_11_30> &\n  SupportsConditionalRequests &\n  SupportsClientRequestId;\n\nalias Operations = ResourceOperations<ServiceTraits>;\n```\n\n### Define a custom trait and add the `@traitAdded` decorator\n\nBuilding on the previous example, we can add a custom header trait at a later service version using the `@traitAdded` decorator:\n\n```typespec\n@doc(\"A custom trait added at a later service version.\")\n@traitAdded(Versions.v2022_11_30)\nmodel CustomRequestHeadersTrait\n  is RequestHeadersTrait<{\n    @TypeSpec.Http.header foo: string;\n  }>;\n\nalias ServiceTraits = SupportsRepeatableRequests<Versions.v2022_11_30> &\n  SupportsConditionalRequests &\n  SupportsClientRequestId &\n  CustomRequestHeadersTrait;\n\nalias Operations = ResourceOperations<ServiceTraits>;\n```\n", "file_path": "../../docs\\getstarted\\azure-core\\step09.md", "link_to_file": "file://../../docs\\getstarted\\azure-core\\step09.md"}, {"file_content": "# 10. Versioning\n\n## Versioning your service\n\nIt is inevitable that service specifications will change over time. It is a best practice to add versioning support to your specification from the first version. To do that, you will need to define an `enum` containing your service versions and then apply the `@versioned` decorator to your service namespace.\n\nHere is an example for the `WidgetManager` service:\n\n```typespec\n@service({\n  title: \"Contoso Widget Manager\",\n})\n@versioned(Contoso.WidgetManager.Versions)\nnamespace Contoso.WidgetManager;\n\nenum Versions {\n  @useDependency(Azure.Core.Versions.v1_0_Preview_1)\n  v2022_08_31: \"2022-08-31\",\n}\n```\n\nThere are a few things to point out here:\n\n- We define an `enum` called `Versions` inside of the service namespace. For each service version, we map a version symbol like `v2022_08_31` to a version string like `2022-08-31`. This service currently only has a single version, but we can add more to this enum as things change over time.\n- We add the `@versioned` decorator and reference the `Versions` enum we defined using the fully-qualified name `Contoso.WidgetManager.Versions`. This marks the service as being versioned and specifies the set of versions.\n- We change the `@useDependency` decorator we used previously to now link each service version to a specific version of `Azure.Core`. See the [Using Azure.Core Versions](#using-azurecore-versions) section for more information.\n\nImagine that it's 3 months later and you want to release a new version of your service with some slight changes. Add a new version to the `Versions` enum:\n\n```typespec\nenum Versions {\n  @useDependency(Azure.Core.Versions.v1_0_Preview_1)\n  v2022_08_31: \"2022-08-31\",\n\n  v2022_11_30: \"2022-11-30\",\n}\n```\n\nYou will also need to add the `@useDependency` decorator:\n\n```typespec\nenum Versions {\n  @useDependency(Azure.Core.Versions.v1_0_Preview_1)\n  v2022_08_31: \"2022-08-31\",\n\n  @useDependency(Azure.Core.Versions.v1_0_Preview_2)\n  v2022_11_30: \"2022-11-30\",\n}\n```\n\nFinally, you can express changes to your service using the `@added` and `@removed` decorators. Here's an example of adding a new property to `Widget` and removing an old one:\n\n```typespec\n@doc(\"A widget.\")\n@resource(\"widgets\")\nmodel Widget {\n  @key(\"widgetName\")\n  @doc(\"The widget name.\")\n  @visibility(\"read\")\n  name: string;\n\n  @doc(\"The widget color.\")\n  @added(Contoso.WidgetManager.Versions.v2022_11_30)\n  color: string;\n\n  @doc(\"The ID of the widget's manufacturer.\")\n  @removed(Contoso.WidgetManager.Versions.v2022_11_30)\n  manufacturerId: string;\n}\n```\n\n> You can do a lot more with versioning decorators, so consult the `typespec-versioning` [README.md](https://github.com/microsoft/typespec/tree/main/packages/versioning#enable-versioning-for-service-or-library) for more information on how you can use them to annotate your service and describe changes between different versions.\n\n## Using Azure.Core versions\n\n`typespec-azure-core` is a versioned TypeSpec library. This means that even as the TypeSpec portions of the typespec-azure-core library are updated, you can anchor each version of your spec to a specific `Azure.Core` version. This is done by decorating your service namespace with the `@useDependency` decorator from the `typespec-versioning` library.\n\nSimple TypeSpec specs need only pass the desired `Azure.Core` version into the `@useDependency` decorator:\n\n```typespec\n@service({\n  title: \"Contoso Widget Manager\",\n})\n@useDependency(Azure.Core.Versions.v1_0_Preview_2)\nnamespace Contoso.WidgetManager;\n```\n\nIf your spec has [multiple versions](#versioning-your-service), you will need to specify the version of `typespec-azure-core` that was used for each version in your spec. Assuming that there are two versions of `Azure.Core` and each version of your service uses a different one, it would look like this:\n\n```typespec\n@service({\n  title: \"Contoso Widget Manager\",\n})\n@versioned(Contoso.WidgetManager.Versions)\nnamespace Contoso.WidgetManager;\n\nenum Versions {\n  @useDependency(Azure.Core.Versions.v1_0_Preview_1)\n  v2022_08_31: \"v20220831\",\n\n  @useDependency(Azure.Core.Versions.v1_0_Preview_2)\n  v2022_11_30: \"v20221130\",\n}\n```\n", "file_path": "../../docs\\getstarted\\azure-core\\step10.md", "link_to_file": "file://../../docs\\getstarted\\azure-core\\step10.md"}, {"file_content": "# 11. Complete Example\n\nA complete version of the `Contoso.WidgetManager` specification can be found in the [`widget-manager` sample folder](https://github.com/Azure/typespec-azure/blob/main/packages/samples/specs/data-plane/widget-manager/main.tsp).\n\nYou can experiment with the full sample on the [TypeSpec Azure Playground](https://cadlplayground.z22.web.core.windows.net/cadl-azure/?sample=Azure+Core+Data+Plane+Service)!\n", "file_path": "../../docs\\getstarted\\azure-core\\step11.md", "link_to_file": "file://../../docs\\getstarted\\azure-core\\step11.md"}, {"file_content": "# Advanced Topics\n\nOnce you have written your first service with `Azure.Core`, you might be interested to try the following features:\n\n## Defining singleton resources\n\nYou can define a singleton resource (a resource type with only one instance) by using a string literal for the key type. Imagine we want to expose an analytics endpoint for each `Widget` instance. Here's what it would look like:\n\n```typespec\n@resource(\"analytics\")\n@parentResource(Widget)\nmodel WidgetAnalytics {\n  @key(\"analyticsId\")\n  id: \"current\";\n\n  @doc(\"The number of uses of the widget.\")\n  useCount: int64;\n\n  @doc(\"The number of times the widget was repaired.\")\n  repairCount: int64;\n}\n```\n\nYou can then use the standard operation signatures with this singleton resource type:\n\n```typespec\nimport \"@azure-tools/typespec-azure-core\";\n\nusing Azure.Core;\nusing Azure.Core.Traits;\n\nalias ServiceTraits = SupportsRepeatableRequests &\n  SupportsConditionalRequests &\n  SupportsClientRequestId;\n\nalias Operations = Azure.Core.ResourceOperations<ServiceTraits>;\n\nop getAnalytics is Operations.ResourceRead<WidgetAnalytics>;\nop updateAnalytics is Operations.ResourceCreateOrUpdate<WidgetAnalytics>;\n```\n\nBy using a literal value of `\"current\"` for `\"id\"`, the route path for these operations will be the following:\n\n```\n\"/widgets/{widgetName}/analytics/current\"\n```\n\nThe operations defined against this singleton resource will also exclude the key parameter because it cannot be changed.\n", "file_path": "../../docs\\getstarted\\azure-core\\step12.md", "link_to_file": "file://../../docs\\getstarted\\azure-core\\step12.md"}, {"file_content": "# 1. Writing Your First Service\n\n## Installing IDE Tools\n\nIf you use Visual Studio or Visual Studio code, the TypeSpec extensions are an important tool in providing a first class experience for writing, editing, and reviewing TypeSpec. See [Installing the VS and VS Code Extensions](https://microsoft.github.io/typespec/introduction/installation#install-the-vs-and-vscode-extensions) for details.\n\n## Creating a Service\n\nThe [Azure Resource Manager Service template](../providerhub/step01-create-userrp-project.md) will create a very basic TypeSpec file in `main.tsp`:\n\n```typespec\nimport \"@typespec/rest\";\nimport \"@typespec/versioning\";\nimport \"@azure-tools/typespec-autorest\";\nimport \"@azure-tools/typespec-azure-core\";\nimport \"@azure-tools/typespec-azure-resource-manager\";\n```\n\nThese lines import the libraries you will need to build your first service.\n\n**Add the following lines** to bring the models, operations, and decorators you will need into the specification:\n\n```typespec\nusing TypeSpec.Http;\nusing TypeSpec.Rest;\nusing TypeSpec.Versioning;\nusing Azure.Resource.Manager;\n```\n", "file_path": "../../docs\\getstarted\\azure-resource-manager\\step00.md", "link_to_file": "file://../../docs\\getstarted\\azure-resource-manager\\step00.md"}, {"file_content": "# 2. Defining the Service\n\nTo define an Azure Resource Manager service, the first thing you will need to do is define the service namespace and decorate it with the `service` and `armProviderNamespace` decorators:\n\n```typespec\n@armProviderNamespace\n@service({title: \"<service name>\", version: \"<service version>\"})\nnamespace <mynamespace>;\n```\n\nFor example:\n\n```typespec\n@armProviderNamespace\n@service({\n  title: \"Contoso User Service\",\n  version: \"2020-10-01-preview\",\n})\n@useDependency(Azure.ResourceManager.Versions.v1_0_Preview_1)\n@armCommonTypesVersion(Azure.ResourceManager.CommonTypes.Versions.v5)\nnamespace Contoso.Users;\n```\n\nIf you need to use a different version of the ARM `common-types` definitions in your emitted Swagger files, change the `@armCommonTypesVersion` decorator to the version that you require.\n\n## The `using` keyword\n\nJust after the `namespace` declaration, you will also need to include a few `using` statements to pull in symbols from the namespaces of libraries you will for your specification.\n\nFor example, these lines pull in symbols from the `@typespec/rest` and `@azure-tools/typespec-azure-resource-manager`:\n\n```\nusing TypeSpec.Http;\nusing TypeSpec.Rest;\nusing Azure.ResourceManager;\n```\n\n## The `operations` interface\n\nAll Resource Providers are required to provide operations that list the available operations for their resources. If you are using ProviderHub (RPaaS: RP as a Service), this functionality can be provided for you, but you will still need to include these operations in your api description. You can include these operations in your API description automatically using the following code:\n\n```typespec\ninterface Operations extends Azure.ResourceManager.Operations {}\n```\n", "file_path": "../../docs\\getstarted\\azure-resource-manager\\step01.md", "link_to_file": "file://../../docs\\getstarted\\azure-resource-manager\\step01.md"}, {"file_content": "# 3. Defining the Resources\n\nAn ARM resource provider is composed of resources. The TypeSpec Azure Resource Manager library makes it much easier to define the structure and endpoints of such resources.\n\nThere are three essential components of a resource defined with TypeSpec:\n\n- A model type representing the resource, derived from one of the [base resource types](#base-resource-types)\n- A model type defining the properties of the resource type\n- An interface that defines the operations that can be performed on the resource type, usually a combination of [standard resource operations](#standard-resource-operations) and [custom actions](#custom-actions)\n\n> Read the [TypeSpec tutorial](https://github.com/Microsoft/typespec/blob/main/docs/tutorial.md) to learn the basics about TypeSpec model types and interfaces.\n\n## 1. **Define a model representing the `properties` of the ARM resource**\n\nEach resource type must have a properties type which defines its custom properties. This type will be exposed as the `properties` property of the resource type.\n\n```typespec\n@doc(\"The properties of UserResource\")\nmodel UserResourceProperties {\n  @doc(\"The user's full name\")\n  fullName: string;\n\n  @doc(\"The user's email address.\")\n  emailAddress: string;\n}\n```\n\n## 2. **Define a model representing the resource type**\n\nResource types are defined as plain models which pull in a standard resource type using the `is` keyword.\n\nYou define a resource type, you need the following:\n\n- A `name` property which is marked with the following decorators\n  - `@key`: Specifies the parameter name for this resource type in the service URI hierarchy\n  - `@segment`: Specifies the name of the resource \"collection\", the URI segment that comes just before the parameter name which identifies the resource type\n- A second model type which defines the resource type's custom properties as we described in step 1\n\nHere we define a tracked resource called `UserResource`:\n\n```typespec\n@doc(\"A UserResource\")\nmodel UserResource is TrackedResource<UserResourceProperties> {\n  @key(\"userName\")\n  @segment(\"users\")\n  name: string;\n}\n```\n\n## 3. **Define an interface with operations for the resource type**\n\n```typespec\n@armResourceOperations\ninterface Users {\n  get is ArmResourceRead<UserResource>;\n  create is ArmResourceCreateOrUpdateAsync<UserResource>;\n  update is ArmResourcePatchSync<UserResource, UserResourceProperties>;\n  delete is ArmResourceDeleteSync<UserResource>;\n  listByResourceGroup is ArmResourceListByParent<UserResource>;\n  listBySubscription is ArmListBySubscription<UserResource>;\n}\n```\n\nThis uses operation templates defined in the `Azure.ResourceManager` namespace to define the operations over your resource. For operations like `create (PUT)`, `update (PATCH)` and `delete (DELETE)` there are both asynchronous (long-running) and synchronous (operation completes in the same http request) versions of the operation templates.\n\nThe interface above creates the following operations for your service:\n\n| Method & Path                                                                                                        | Description                             |\n| -------------------------------------------------------------------------------------------------------------------- | --------------------------------------- |\n| `GET /subscriptions/{subscriptionId}/providers/Contoso.Users/users`                                                  | list all UserResource by subscription   |\n| `GET /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Contoso.Users/users`               | list all UserResource by resource group |\n| `GET /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Contoso.Users/users/{userName}`    | get item                                |\n| `PUT /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Contoso.Users/users/{userName}`    | create item                             |\n| `PATCH /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Contoso.Users/users/{userName}`  | patch item                              |\n| `DELETE /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Contoso.Users/users/{userName}` | delete item                             |\n\n### Alternate (Legacy) Syntax for Operations\n\nAlternately, you can use interface templates, which define a set of operations in your resource operations interface. Interface templates are convenient if you want to conform to standard\npractices, but are less flexible than operation templates.\n\nTo specify the standard set of TrackedResource operations for your resource, you can use the following code:\n\n```typespec\n@armResourceOperations\ninterface Users extends TrackedResourceOperations<UserResource, UserResourceProperties> {}\n```\n\nThis will now produce all the endpoints(`get`, `post`, `put`, `patch` and `delete`, listByResourceGroup, listBySubscription) for a resource called `UserResources` and the `operations` endpoint for the service:\n\n| Method & Path                                                                                                        | Description                             |\n| -------------------------------------------------------------------------------------------------------------------- | --------------------------------------- |\n| `GET /providers/Contoso.Users/operations`                                                                            | List all operations for your service    |\n| `GET /subscriptions/{subscriptionId}/providers/Contoso.Users/users`                                                  | list all UserResource by subscription   |\n| `GET /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Contoso.Users/users`               | list all UserResource by resource group |\n| `GET /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Contoso.Users/users/{userName}`    | get item                                |\n| `PUT /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Contoso.Users/users/{userName}`    | insert item                             |\n| `PATCH /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Contoso.Users/users/{userName}`  | patch item                              |\n| `DELETE /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Contoso.Users/users/{userName}` | delete item                             |\n\n#### Base Resource Types\n\nHere are the base resource types you can use when defining your own ARM resources:\n\n| Name                             | Description                                                                            |\n| -------------------------------- | -------------------------------------------------------------------------------------- |\n| `TrackedResource<TProperties>`   | Defines a normal ARM resource where `TProperties` is the model of the `properties`     |\n| `ProxyResource<TProperties>`     | Defines a proxy ARM resource where `TProperties` is the model of the `properties`      |\n| `ExtensionResource<TProperties>` | Defines an extension ARM resource where `TProperties` is the model of the `properties` |\n", "file_path": "../../docs\\getstarted\\azure-resource-manager\\step02.md", "link_to_file": "file://../../docs\\getstarted\\azure-resource-manager\\step02.md"}, {"file_content": "# 4. Defining Child Resource Types\n\nYou can create parent/child relationships between resource types by using the `@parentResource` decorator when defining a resource type.\n\nFor example, here's how you could create a new `AddressResource` resource under the `UserResource` defined above:\n\n```typespec\n@doc(\"An address resource belonging to a user resource.\")\n@parentResource(UserResource)\nmodel AddressResource is ProxyResource<AddressResourceProperties> {\n  @key(\"addressName\")\n  @segment(\"addresses\")\n  name: string;\n}\n\n@doc(\"The properties of AddressResource\")\nmodel AddressResourceProperties {\n  @doc(\"The street address.\")\n  streetAddress: string;\n\n  @doc(\"The city of the address.\")\n  city: string;\n\n  @doc(\"The state of the address.\")\n  state: string;\n\n  @doc(\"The zip code of the address.\")\n  zip: int32;\n}\n\n@armResourceOperations\ninterface Addresses {\n  get is ArmResourceRead<AddressResource>;\n  create is ArmResourceCreateOrReplaceSync<AddressResource>;\n  update is ArmResourcePatchSync<AddressResource, AddressResourceProperties>;\n  delete is ArmResourceDeleteSync<AddressResource>;\n  listByParent is ArmResourceListByParent<AddressResource>;\n}\n```\n", "file_path": "../../docs\\getstarted\\azure-resource-manager\\step03.md", "link_to_file": "file://../../docs\\getstarted\\azure-resource-manager\\step03.md"}, {"file_content": "# 5. Defining Custom Actions\n\nSome resources will provide more than the standard CRUD operations and will need to define a custom action endpoint. Additional resource operations can be added to the `interface` where you defined standard resource operations, using the `ArmResourceAction` templates.\n\nFor example, to add an additional `POST` action called `/notify` to the standard operations of `UserResource`:\n\n```typespec\n@doc(\"The details of a user notification.\")\nmodel NotificationDetails {\n  @doc(\"The notification message.\")\n  message: string;\n\n  @doc(\"If true, the notification is urgent.\")\n  urgent: boolean;\n}\n\n@armResourceOperations\ninterface Users extends TrackedResourceOperations<UserResource, UserResourceProperties> {\n  @doc(\"Send a notification to the user\")\n  @segment(\"notify\")\n  NotifyUser is ArmResourceActionNoContentSync<UserResource, NotificationDetails>;\n}\n```\n\nThe following operation templates for different kinds of actions are provider in the `Azure.ResourceManager` namespace:\n\n| Template                                                 | Description                                                                                        |\n| -------------------------------------------------------- | -------------------------------------------------------------------------------------------------- |\n| `ArmResourceActionNoContentSync<TResource, TRequest>`    | Synchronous action with no data in the response, providing the resource type and request payload.  |\n| `ArmResourceActionNoContentAsync<TResource, TRequest>`   | Asynchronous action with no data in the response, providing the resource type and request payload. |\n| `ArmResourceActionSync<TResource, TRequest, TResponse>`  | Synchronous action, providing the resource type and request and response payload.                  |\n| `ArmResourceActionAsync<TResource, TRequest, TResponse>` | Asynchronous action, providing the resource type and request and response payload.                 |\n\n## Custom Operations\n\nAlternately, you may define custom operations for extraordinary scenarios. Be sure to have a discussion with the ARM team before defining a custom operation.\nThere are strict guidelines around ARM operations, and you may need to get special signoff for operation that are not expressible using the templates.\n\nIn a custom operation, you define the operation parameters, responses, http verb, and so on. For example, here is an operation defining a simple custom action.\n\n```typespec\n@post\n@doc(\"Send a notification to the user\")\n@segment(\"notify\")\nop NotifyUser(\n  ...ResourceInstanceParameters<UserResource>,\n  @body notification: NotificationDetails,\n): ArmResponse<string> | ErrorResponse;\n```\n\n### ARM Response Types\n\nCustom operations in ARM still need to respect the correct response schema. This library provides standard ARM response types to help with reusability and compliance.\n\n| Model                            | Code | Description                                                                                                                 |\n| -------------------------------- | ---- | --------------------------------------------------------------------------------------------------------------------------- |\n| `ArmResponse<T>`                 | 200  | Base Arm 200 response.                                                                                                      |\n| `ArmCreatedResponse<T>`          | 201  | Resource created response.                                                                                                  |\n| `ArmNoContentResponse<TMessage>` | 204  | No Content (success). The parameter is the documentation for the response (by default, `Operation completed successfully`). |\n| `ArmDeletedResponse`             | 200  | Resource deleted response.                                                                                                  |\n| `ArmDeleteAcceptedResponse`      | 202  | Resource deletion in progress response.                                                                                     |\n| `ArmDeletedNoContentResponse`    | 204  | Resource deleted response.                                                                                                  |\n| `Page<T>`                        | 200  | Return a list of resource with ARM pagination.                                                                              |\n| `ErrorResponse<T>`               | x    | Error response.                                                                                                             |\n\n### Common Operation Parameters\n\nThere are a number of model types which specify common parameters which are used in resource type operations:\n\n| Model                        | In           | Description                                                        |\n| ---------------------------- | ------------ | ------------------------------------------------------------------ |\n| `ApiVersionParameter`        | query        | `api-version` parameter                                            |\n| `SubscriptionIdParameter`    | path         | Subscription ID path parameter                                     |\n| `ResourceGroupNameParameter` | path         | Resource Group Name path parameter                                 |\n| `CommonResourceParameters`   | path & query | Group of Api version, Subscription ID and Resource group parameter |\n| `ResourceUriParameter`       | path         | Resource uri path parameter                                        |\n| `OperationIdParameter`       | path         | Operation Id path parameter                                        |\n\n## Name Availability Operations\n\nSometimes, resource names must be globally unique or unique within a specified location. The following operation templates are provided in the `Azure.ResourceManager` namespace for checking name availability:\n\n| Template                                                              | Description                                          |\n| --------------------------------------------------------------------- | ---------------------------------------------------- |\n| `checkLocalNameAvailability<TRequest, TResponse, TAdditionalParams>`  | Checks name availability based on an Azure location. |\n| `checkGlobalNameAvailability<TRequest, TResponse, TAdditionalParams>` | Checks name availability globally.                   |\n\nThese templates have default values so that they are normally used without specifying any template parameters.\n\n### Custom Name Check Operation\n\nThe above templates are specializations of the following template in the `Azure.ResourceManager.Foundations` namespace:\n\n| Template                                                                         | Description                                                      |\n| -------------------------------------------------------------------------------- | ---------------------------------------------------------------- |\n| `checkNameAvailability<TScopeParamters, TRequest, TResponse, TAdditionalParams>` | Checks name availability based on the provided scope parameters. |\n\nFor reference, the standard templates use the following `TScopeParameters`:\n\n| Operation                      | Scope Parameters                                                       |\n| ------------------------------ | ---------------------------------------------------------------------- |\n| Global Name Availability Check | `SubscriptionIdParameter, DefaultProviderNamespace`                    |\n| Local Name Availability Check  | `SubscriptionIdParameter, DefaultProviderNamespace, LocationParameter` |\n", "file_path": "../../docs\\getstarted\\azure-resource-manager\\step04.md", "link_to_file": "file://../../docs\\getstarted\\azure-resource-manager\\step04.md"}, {"file_content": "# 6. Complete Example and Generate OpenApi 2.0 spec\n\nTo generate an OpenAPI v2 (Swagger) specification from the service definition, run the following command inside of the project folder:\n\n```\ntsp compile . --emit @azure-tools/typespec-autorest\n```\n\nThis will create a file in the `tsp-output` subfolder called `openapi.json`.\n\nYou can learn more about the `typespec-autorest` emitter and its options by reading its [README.md](https://github.com/Azure/typespec-azure/blob/main/packages/typespec-autorest/README.md).\n\n## A Complete Example\n\nHere's a complete example `main.tsp` file based on all of the snippets in this README:\n\n```typespec\nimport \"@typespec/rest\";\nimport \"@typespec/versioning\";\nimport \"@azure-tools/typespec-providerhub\";\nimport \"@azure-tools/typespec-azure-core\";\nimport \"@azure-tools/typespec-azure-resource-manager\";\n\nusing TypeSpec.Http;\nusing TypeSpec.Rest;\nusing TypeSpec.Versioning;\nusing Azure.Core;\nusing Azure.ResourceManager;\n\n@armProviderNamespace\n@service({\n  title: \"ContosoProviderHubClient\",\n  version: \"2021-01-01-preview\",\n})\n@doc(\"Contoso Resource Provider management API.\")\n@useDependency(Azure.ResourceManager.Versions.v1_0_Preview_1)\n@armCommonTypesVersion(Azure.ResourceManager.CommonTypes.Versions.v5)\nnamespace Microsoft.ContosoProviderHub;\n\ninterface Operations extends Azure.ResourceManager.Operations {}\n\n@lroStatus\nenum ProvisioningState {\n  ...ResourceProvisioningState,\n  Provisioning,\n  Updating,\n  Deleting,\n  Accepted,\n}\n\n@doc(\"The properties of UserResource\")\nmodel UserResourceProperties {\n  @doc(\"The user's full name\")\n  fullName: string;\n\n  @doc(\"The user's email address.\")\n  emailAddress: string;\n\n  @doc(\"The status of the last operation.\")\n  provisioningState?: ProvisioningState;\n}\n\n@doc(\"A UserResource\")\nmodel UserResource is TrackedResource<UserResourceProperties> {\n  @key(\"userName\")\n  @segment(\"users\")\n  @doc(\"Address name\")\n  @path\n  name: string;\n}\n\n@doc(\"The details of a user notification.\")\nmodel NotificationDetails {\n  @doc(\"The notification message.\")\n  message: string;\n\n  @doc(\"If true, the notification is urgent.\")\n  urgent: boolean;\n}\n\n@armResourceOperations\ninterface Users {\n  get is ArmResourceRead<UserResource>;\n  create is ArmResourceCreateOrUpdateAsync<UserResource>;\n  update is ArmResourcePatchSync<UserResource, UserResourceProperties>;\n  delete is ArmResourceDeleteSync<UserResource>;\n  listByResourceGroup is ArmResourceListByParent<UserResource>;\n  listBySubscription is ArmListBySubscription<UserResource>;\n  @doc(\"Send a notification to the user\")\n  @segment(\"notify\")\n  NotifyUser is ArmResourceActionNoContentSync<UserResource, NotificationDetails>;\n}\n\n@doc(\"An address resource belonging to a user resource.\")\n@parentResource(UserResource)\nmodel AddressResource is ProxyResource<AddressResourceProperties> {\n  @doc(\"Address name\")\n  @key(\"addressName\")\n  @segment(\"addresses\")\n  @path\n  name: string;\n}\n\n@doc(\"The properties of AddressResource\")\nmodel AddressResourceProperties {\n  @doc(\"The street address.\")\n  streetAddress: string;\n\n  @doc(\"The city of the address.\")\n  city: string;\n\n  @doc(\"The state of the address.\")\n  state: string;\n\n  @doc(\"The zip code of the address.\")\n  zip: int32;\n\n  @doc(\"The status of the last operation.\")\n  provisioningState?: ProvisioningState;\n}\n\n@armResourceOperations\ninterface Addresses {\n  get is ArmResourceRead<AddressResource>;\n  create is ArmResourceCreateOrReplaceSync<AddressResource>;\n  update is ArmResourcePatchSync<AddressResource, AddressResourceProperties>;\n  delete is ArmResourceDeleteSync<AddressResource>;\n  listByParent is ArmResourceListByParent<AddressResource>;\n  checkGlobalName is checkGlobalNameAvailability;\n}\n```\n", "file_path": "../../docs\\getstarted\\azure-resource-manager\\step05.md", "link_to_file": "file://../../docs\\getstarted\\azure-resource-manager\\step05.md"}, {"file_content": "# 1. Create TypeSpec ProviderHub ASP.NET Project\n\n### Install or refresh .NET template\n\n```bash\ndotnet new install Microsoft.TypeSpec.ProviderHub.Templates\n```\n\n### Create typespec-providerhub project with a sample UserRP service using template\n\n```bash\n dotnet new typespec-providerhub -P <provider> -o <project folder> --allow-scripts yes\n```\n\n> Note:\n>\n> 1.  the project name by default is the project folder name, you can specify it through the '-n' option.\n> 2.  You can generate a project that only contains models using the '-m' or '--models-only' option.\n\n### Edit TypeSpec spec and generate UserRP\n\nYou can open the solution created above in Visual Studio or vscode. This project contains starter TypeSpec spec and will auto-refresh generated User.RP controller service code.\n\nthe generated solution structure is as follows:\n\n```\ncontoso.sln\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 typespec\n        \u251c\u2500\u2500 typespec.csproj\n        \u2514\u2500\u2500 typespec\n          \u251c\u2500\u2500 main.tsp\n          \u2514\u2500\u2500 package.json\n    \u2514\u2500\u2500 contoso\n        \u251c\u2500\u2500 contoso.csproj\n        \u251c\u2500\u2500 Startup.cs\n        \u2514\u2500\u2500 onebox\n            \u2514\u2500\u2500 <rpaas onebox configurations>\n\n```\n\nThe `typespec.csproj` is configured to generate typespec models only into csharp models.\nThe generated providerhub controller is generated by `contoso.csproj` which has a project reference to the `typespec.csproj` and the `TypeSpecCompile` msbuild task is configured to used the `tsp compiler` in `typespec.csproj` by using 'CommandPath' with relative path.\nlike this:\n\n```\n<ItemGroup>\n    <TypeSpecCompile Include=\"..\\typespec\\typespec\\main.tsp\" CommandPath=\"$(MSBuildProjectDirectory)/../typespec/typespec/node_modules/.bin\" OutputDir=\"$(MSBuildProjectDirectory)\" Options=\"@azure-tools/typespec-providerhub-controller.code-kind=controller\" Emitters=\"@azure-tools/typespec-providerhub-controller\" />\n</ItemGroup>\n```\n", "file_path": "../../docs\\getstarted\\providerhub\\step01-create-userrp-project.md", "link_to_file": "file://../../docs\\getstarted\\providerhub\\step01-create-userrp-project.md"}, {"file_content": "# 2. Debug with OneBox\n\nTo debug your UserRP project with [ProviderHub OneBox](https://armwiki.azurewebsites.net/rpaas/onebox.html) in local environment, you need basically perform following 2 steps:\n\n1. Run OneBox locally\n2. Register your resourceProvider and resourceTypes\n\n### Prerequisites\n\n1. Install [Docker](https://docs.docker.com/get-docker/) and [Docker Compose](https://docs.docker.com/compose/install/)\n1. Install [Azure CLI](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest)\n1. Install [oav](https://www.npmjs.com/package/oav) for API Test\n\nTo authenticate with the ProviderHub OneBox ACR, use following commands:\n\n```bash\naz login\naz acr login --name rpaasoneboxacr\n```\n\nIf you are not authorized to access rpaasoneboxacr, you may need to be added to the [RPaaS Partners Security Group](https://idweb.microsoft.com/identitymanagement/aspx/groups/AllGroups.aspx?popupFromClipboard=%2Fidentitymanagement%2Faspx%2FGroups%2FEditGroup.aspx%3Fid%3Dfc4a82d5-c2fb-4519-8e14-6b9582de07fe).\n\n### Run OneBox\n\n#### Option 1: Run OneBox with `docker-compose`\n\n```bash\ncd onebox\ndocker-compose up\n```\n\nThe OneBox will be running on <http://localhost:5000>.\n\nAvailable environment variables:\n\n- `RPAAS_ONEBOX_IMAGE_TAG`: The tag of the OneBox images to use. Default is `latest`.\n- `RPAAS_ONEBOX_REGISTRY`: The registry to use for OneBox images. Default is `rpaasoneboxacr.azurecr.io`.\n- `RPAAS_ONEBOX_PORT`: The port to expose the OneBox on. Default is `5000`.\n- `RPAAS_ONEBOX_SERVICERP_PORT`: The port to expose the OneBox ServiceRP on. Default is `6012`.\n- `RPAAS_ONEBOX_METARP_PORT`: The port to expose the OneBox MetaRP on. Default is `6010`.\n\nFor example, to run the OneBox on another port:\n\n```bash\nRPAAS_ONEBOX_PORT=8080 docker-compose up\n```\n\nTo stop OneBox, run `docker-compose down`.\n\n#### Option 2: Run OneBox with [Porter](https://porter.sh/install/)\n\n```bash\nporter install --reference rpaasoneboxacr.azurecr.io/rpaas-onebox:v0.1.1 --allow-docker-host-access\n```\n\nAvailable parameters:\n\n- `tag`: The tag of the OneBox images to use. Default is `latest`.\n- `registry`: The registry to use for OneBox images. Default is `rpaasoneboxacr.azurecr.io`.\n- `port`: The port to expose the OneBox on. Default is `5000`.\n- `port_servicerp`: The port to expose the OneBox ServiceRP on. Default is `6012`.\n- `port_metarp`: The port to expose the OneBox MetaRP on. Default is `6010`.\n\nFor example, to run the OneBox on another port:\n\n```bash\nporter install --reference rpaasoneboxacr.azurecr.io/rpaas-onebox:v0.1.1 --allow-docker-host-access --param port=8080\n```\n\nTo stop, run `porter uninstall rpaas-onebox`.\n\n### Register resourceProvider and resourceTypes\n\nThe resourceProvider and resourceTypes registration contents are put in the `registrations` folder:\n\n```\n.\n\u251c\u2500\u2500 register.sh\n\u2514\u2500\u2500 registrations\n    \u251c\u2500\u2500 Microsoft.Contoso\n    \u2502   \u2514\u2500\u2500 employees.json\n    \u2514\u2500\u2500 Microsoft.Contoso.json\n```\n\nWith following command, you can register the resourceProvider and resourceTypes to OneBox ServiceRP:\n\n```bash\nchmod +x register.sh\n./register.sh\n```\n\nLimitation: ./register.sh works only for registering parent resource. Child resource type should be registered manually via curl or postman.\n\nExample: PUT http://host.docker.internal:5000/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerregistrations/{RP Namespace}/resourcetyperegistrations/{parentResource}/resourcetyperegistrations/{childResource}?api-version={api-version}\n\nThe payload for the request looks like below:\n\n```json\n{\n  \"properties\": {\n    \"routingType\": \"Default\",\n    \"regionality\": \"Regional\",\n    \"management\": {\n      \"incidentRoutingService\": \"ICM ServiceName\",\n      \"incidentRoutingTeam\": \"ICM TeamName\",\n      \"incidentContactEmail\": \"incidentContactEmail@domain.com\"\n    },\n    \"endpoints\": [\n      {\n        \"apiVersions\": [{api-version}],\n        \"locations\": [\"West US\"],\n        \"extensions\": [\n          {\n            \"endpointUri\": \"http://host.docker.internal:6020/\",\n            \"extensionCategories\": [\n              \"ResourceReadValidate\",\n              \"ResourceCreationValidate\",\n              \"ResourceCreationBegin\",\n              \"ResourceCreationCompleted\",\n              \"ResourcePatchValidate\",\n              \"ResourcePatchBegin\",\n              \"ResourcePatchCompleted\",\n              \"ResourceDeletionValidate\",\n              \"ResourceDeletionBegin\",\n              \"ResourceDeletionCompleted\"\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\n\n```\n\nor with `docker`:\n\n```bash\ndocker run --rm -v $(pwd)/registrations:/app/registrations:ro rpaasoneboxacr.azurecr.io/rpaas-onebox/register\n```\n\nor directly do the registration with Curl or other REST tools. See [ProviderHub wiki As RP owner section](https://armwiki.azurewebsites.net/rpaas/onebox.html#as-rp-owner-userrp).\n\nNote that, the registration is idempotent, and is persisted in docker volume. In case you need to reset the registration, use following command:\n\n```bash\ndocker-compose down -v\n```\n", "file_path": "../../docs\\getstarted\\providerhub\\step02-debug-onebox.md", "link_to_file": "file://../../docs\\getstarted\\providerhub\\step02-debug-onebox.md"}, {"file_content": "# 3. API Test with OneBox\n\nIn the project template, we provide `apitest.sh` script to smoothen the API test experience. (The script only supports WSL2 and Linux. For Windows users, please check the commands in the script and run them manually.)\n\n1. Generate API Scenario\n\nTo get started, generate API Scenario from Swagger with the following command:\n\n```bash\ncd swagger\nchmod +x apitest.sh\n./apitest.sh generate\n```\n\nIt will generate a `basic.yaml` file in `scenarios` folder next to swagger file, which contains all the swagger operations and minimum required parameters. You can improve the `basic.yaml` file or create new API Scenario files to define your own API usage scenarios.\n\n2. Run API Scenario Test\n\nTo run the API Scenario test with OneBox, use the following command:\n\n```bash\n./apitest.sh run\n```\n\nAfter execution, the test report and Swagger examples generated from live traffic will be under `./apitest/<scenario-file-name>/<runId>/<scenario-name>/`.\n\n3. Manual Debug API Scenario\n\nImport the generated Postman collection and environment file into Postman, then run the API test manually.\n\n### API Test with ARM endpoints\n\nAfter service deployment to Azure, you can use `oav` to rerun the API Scenario test with ARM endpoints.\n\n1. [Prepare AAD app](https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal) and assign subscription contributor role to the app.\n\n2. Update the `.apitest/env.json` file with `tenantId`, `client_id`, `client_secret`, and `subscriptionId` prepared in step 1:\n\n```json\n{\n  \"tenantId\": \"<AAD app tenantId>\",\n  \"client_id\": \"<AAD app client_id>\",\n  \"client_secret\": \"<AAD app client_secret>\",\n  \"subscriptionId\": \"<subscriptionId>\",\n  \"location\": \"westus\"\n}\n```\n\n3. Run API Scenario test with ARM endpoints:\n\n```bash\n  oav run <scenario-file> --specs <swagger-file> -e <env-file>\n```\n\nAfter execution, check the test report under `.apitest/<scenario-file-name>/<runId>/<scenario-name>/report.json`.\n\n### Generate Swagger examples\n\nEnable generating examples from live traffic in API Scenario test with option `--generateExample` (already enabled if using `apitest.sh`):\n\n```bash\n  oav run <scenario-file> --specs <swagger-file> -e <env-file> --generateExample\n```\n\nAfter execution, the Swagger examples will be generated in `.apitest/<scenario-file-name>/<runId>/<scenario-name>/examples`. You can check the examples and copy to `typespec/examples` folder. Next time when you compile typespec or build the project, the examples will be used in generated Swagger.\n", "file_path": "../../docs\\getstarted\\providerhub\\step03-api-testing.md", "link_to_file": "file://../../docs\\getstarted\\providerhub\\step03-api-testing.md"}, {"file_content": "# 4. Connect and test with RPaas Dogfood\n\n## PREREQUISITES\n\n- Successfully build the TYPESPEC repo (i.e. running `dotnet build`)\n- Publish your repo (i.e. publishing the repo to App Service in Visual Studio) and have a URI for the repo. You can use a Microsoft-tenant subscription to publish the repo.\n- Merge the Swagger file generated by TYPESPEC into the `RPSaaSDev` branch on https://github.com/Azure/azure-rest-api-specs-pr.\n- Set up a Dogfood subscription for RP.\n\n## Notes\n\n- The steps below are similar to the ones specified in the RpaaS Dogfood onboarding doc: https://armwiki.azurewebsites.net/rpaas/onboarddf.html. Please refer to this doc to set up the Dogfood subscription.\n- The key difference is that you need to use include the URI of the app as a value of `extension-endpoint-uri` when creating resource types.\n\n## STEPS\n\n## Log in\n\n### I. Using AZ CLI\n\n### 1. Register dogfood cloud environment\n\n```\naz cloud register --name Dogfood --endpoint-active-directory-graph-resource-id https://graph.windows-ppe.net/ --endpoint-active-directory-resource-id https://management.core.windows.net/ --endpoint-gallery https://df.gallery.azure-test.net/ --endpoint-resource-manager https://api-dogfood.resources.windows-int.net/ --endpoint-active-directory https://login.windows-ppe.net/\n```\n\n### 2. Set the cloud environment to Dogfood\n\n```\naz cloud set -n Dogfood\n```\n\n### 3. Login\n\n```\naz login\n```\n\n### 4. Set to targeted subscription\n\n```\naz account set -s {subscriptionId}\n```\n\n### II. If you use ARM Client to log in, use the command below.\n\n```\nARMClient login dogfood\n\nset SUB=/subscriptions/{subscriptionId}\n```\n\n## REGISTER\n\n## 1. Register the Resource Provider (RP)\n\n```\naz providerhub provider-registration create `\n--provider-namespace \"Microsoft.AppSecurity\"\n--provider-type \"Internal\" `\n--provider-version \"2.0\" `\n--incident-contact-email \"lyle@microsoft.com\" `\n--incident-routing-service \"Cloudnet\" `\n--incident-routing-team \"AFD WAF DRI\" `\n--capabilities effect=\"Allow\" quota-id=\"CSP_2015-05-01\" `\n--capabilities effect=\"Allow\" quota-id=\"CSP_MG_2017-12-01\"\n--service-tree-infos service-id=\"{subscriptionId}\" `\ncomponent-id=\"{subscriptionId}\"\n```\n\n## Check results of RP registration\n\n```\naz providerhub provider-registration show --provider-namespace \"Microsoft.AppSecurity\" -o json\n```\n\n## 2. Register Resource Type\n\nReplace the endpoint-uri with the uri where your RP is hosted:\n\n`extension-endpoint-uri=\"https://app-security-waf.azurewebsites.net/\" `\n\n### 1) Profiles (Parent resource type)\n\n```\naz providerhub resource-type-registration create `\n--provider-namespace Microsoft.AppSecurity `\n--resource-type Profiles `\n--regionality \"Regional\" `\n--routing-type \"Default\" `\n--endpoints api-versions=\"2022-10-01-preview\" `\nlocations=\"CentralUS\" `\nextension-endpoint-uri=\"https://app-security-waf.azurewebsites.net/\" `\nextension-categories=\"ResourceCreationValidate\" extension-categories=\"ResourceCreationBegin\" `\nextension-categories=\"ResourceDeletionValidate\" extension-categories=\"ResourceDeletionBegin\" `\n--swagger-specifications api-versions=\"2021-08-01-preview\" `\nswagger-spec-folder-uri=\"https://github.com/Azure/azure-rest-api-specs-pr/tree/RPSaaSDev/specification/appsecurity/resource-manager/Microsoft.AppSecurity/\" `\n```\n\n- **Troubleshooting**: If the resource type payload generated by AZ CLI includes an array of disallowed verbs, that might prevent you from creating resources under this resource type. The solution is to update the payload to leave this array of disallowed verbs empty using ARM Client.\n\n### Update Profiles payload to allow action verbs\n\n```\narmclient PUT /subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerregistrations/Microsoft.AppSecurity/resourcetyperegistrations/Profiles?api-version=2022-07-01-preview @\"C:\\RPSaaS\\WAFaaSPublishedDogfoodTesting\\updateProfileResourceTypeToAllowActionVerbs.json\" -verbose\n```\n\n### Delete Profiles\n\nIf you need to delete the resource type, run the command below:\n\n```\naz providerhub resource-type-registration delete --provider-namespace Microsoft.AppSecurity --resource-type Profiles\n```\n\n### 2) WebApplicationFirewallPolicies (Subresource type of Profiles)\n\nAZ CLI\n\n```\naz providerhub resource-type-registration create `\n--provider-namespace Microsoft.AppSecurity `\n--resource-type Profiles/WebApplicationFirewallPolicies `\n--regionality \"Regional\" `\n--routing-type \"Default\" `\n--endpoints api-versions=\"2022-10-01-preview\" `\nlocations=\"CentralUS\" `\nextension-endpoint-uri=\"https://app-security-waf.azurewebsites.net/\" `\nextension-categories=\"ResourceCreationValidate\" extension-categories=\"ResourceCreationBegin\" `\nextension-categories=\"ResourceDeletionValidate\" extension-categories=\"ResourceDeletionBegin\" `\n--swagger-specifications api-versions=\"2021-08-01-preview\" `\nswagger-spec-folder-uri=\"https://github.com/Azure/azure-rest-api-specs-pr/tree/RPSaaSDev/specification/appsecurity/resource-manager/Microsoft.AppSecurity/\" `\n```\n\n### Update WAF payload to allow action verbs\n\n```\narmclient PUT /subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerregistrations/Microsoft.AppSecurity/resourcetyperegistrations/Profiles/resourcetyperegistrations/WebApplicationFirewallPolicies?api-version=2022-07-01-preview @\"C:\\RPSaaS\\LongRunningOperation\\updateWafResourceType.json\" -verbose\n```\n\n## 3. Role out manifest\n\n```\naz providerhub custom-rollout create --provider-namespace Microsoft.AppSecurity --rollout-name DogfoodManifestRollOutOct072022 --canary regions=NorthEurope regions=CentralUS\n```\n\n## 4. Check results of resource type registration\n\n### 1) Profiles\n\n```\naz providerhub resource-type-registration show --provider-namespace Microsoft.AppSecurity --resource-type Profiles -o json\n```\n\n### 2) WebApplicationFirewallPolicies\n\n```\naz providerhub resource-type-registration show --provider-namespace Microsoft.AppSecurity --resource-type WebApplicationFirewallPolicies -o json\n```\n\n## 5. Register subscription used to create resources\n\n```\narmclient POST /subscriptions/{subscriptionId}/providers/Microsoft.AppSecurity/register?api-version=2020-10-01\n```\n\n## 6. Sample CRUD Operations\n\n### PUT\n\n### 1) Create Profiles\n\n```\narmclient PUT /subscriptions/{subscriptionId}/resourcegroups/lyle/providers/Microsoft.AppSecurity/Profiles/profileoct072022a?api-version=2022-10-01-preview  @\"C:\\RPSaaS\\WAFaaSPublishedDogfoodTesting\\profileResourcePayload.json\" -verbose\n```\n\n### 2) Create WAF\n\n```\narmclient PUT /subscriptions/{subscriptionId}/resourcegroups/lyle/providers/Microsoft.AppSecurity/Profiles/profileoct072022a/WebApplicationFirewallPolicies/test082022a?api-version=2022-10-01-preview  @\"C:\\RPSaaS\\WAFaaSPublishedDogfoodTesting\\wafResourcePayload.json\" -verbose\n```\n\n### GET\n\n### 1. Get Profiles\n\n```\narmclient GET /subscriptions/{subscriptionId}/resourcegroups/lyle/providers/Microsoft.AppSecurity/Profiles/profileoct072022a?api-version=2022-10-01-preview\n```\n\n### 2. Get WAF\n\n```\narmclient GET /subscriptions/{subscriptionId}/resourcegroups/lyle/providers/Microsoft.AppSecurity/Profiles/profileoct072022a/WebApplicationFirewallPolicies/test082022a?api-version=2022-10-01-preview\n```\n\n## VERIFICATION\n\nPlease note that you can perform the steps above without actually having any code thanks to RpaaS's metadata.\n\nIn order to verify that the requests _actually hit the TYPESPEC code base_, you can try to hard-code a property in the controller to see if the response body shows the hard-coded value.\n", "file_path": "../../docs\\getstarted\\providerhub\\step04-deploy-cloud.md", "link_to_file": "file://../../docs\\getstarted\\providerhub\\step04-deploy-cloud.md"}, {"file_content": "# ARM Rules, TypeSpec Linting, and Suppression\n\nARM includes many rules on the structure of resources and the details of resource operations that ensure a consistent user experience when managing services inside Azure. TypeSpec encodes many fo these rules into linting checks that occur on each compilation. If you use an IDE and install the [TypeSpec IDE Tools](../../getstarted/azure-resource-manager/step00.md#installing-ide-tools), violations of rules will show up as yellow highlights in your tsp code. If you hover over these, you will get a message indicating the issue and how to fix it in your specification. If you use the typespec command-line, violations of rules will be printed as warnings, with a description and steps to correct the issue, and a pointer to the location in the specification where the violation occurred.\n\nIn the sections below, we will discuss these rules, how they work, and, in cases where a violation is a false positive, or has a reason approved by an ARM reviewer, can be suppressed.\n\n## ARM RPC Rules\n\nTypeSpec has a set of linting rules that execute whenever the specification is compiled, and in the IDE as you type. Violations are highlighted inline in the spec, or emitted during compilation.\n\nFor more information, see [ARM RPC rules](https://eng.ms/docs/products/arm/api_contracts/guidelines/rpc)\n\n## Detecting and Suppressing Rule Violations at Design Time\n\nViolations of ARM RPC rules will show up at design time as a yellow highlight over the violating type in TypeSpec, and at compile time as an emitted warning with a specific reference in the specification code (line number, position, pointer).\n\nHere is an example of a linter warning:\n\n```bash\nDiagnostics were reported during compilation:\n\nC:/typespec-samples/resource-manager/zerotrust/main.tsp:38:3 - warning @azure-tools/typespec-azure-resource-manager/arm-resource-operation-missing-decorator: Resource POST operation must be decorated with @armResourceAction.\n> 38 |   @doc(\"Gets the Zero Trust URL for this resource\")\n     |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n> 39 |   @post\n     | ^^^^^^^\n> 40 |   getZeroTrustUrl(...ResourceInstanceParameters<ZeroTrustResource>): ZeroTrustUrl | ErrorResponse;\n     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nFound 1 warning.\n\n```\n\nTo suppress the warning, you would use the `#suppress` directive on the type that violates the rule. The directive takes the fully-qualified name of the rule you are suppressing, and a reason for the suppression.\n\n```typespec\n  #suppress \"@azure-tools/typespec-azure-resource-manager/arm-resource-operation-missing-decorator\" \"This is a sample suppression.\"\n  @doc(\"Gets the MAA URL for this resource\")\n  @post\n  getZeroTrustUrl(...ResourceInstanceParameters<ZeroTrustResource>): ZeroTrustUrl | ErrorResponse;\n```\n\nOf course, in this case, the best resolution would be to follow the advice in the linting rule, and add the `@armResourceAction` decorator.\n\n```typespec\n  @armResourceAction(ZeroTrustResource)\n  @doc(\"Gets the MAA URL for this resource\")\n  @post\n  getZeroTrustUrl(...ResourceInstanceParameters<ZeroTrustResource>): ZeroTrustUrl | ErrorResponse;\n```\n", "file_path": "../../docs\\howtos\\ARM\\arm-rules.md", "link_to_file": "file://../../docs\\howtos\\ARM\\arm-rules.md"}, {"file_content": "# ARM Resource Operations\n\n## Recommended and Required Operations\n\n### TrackedResource\n\n| Operation             | Recommended | Required | TypeSpec Representation                                          |\n| --------------------- | ----------- | -------- | ---------------------------------------------------------------- |\n| GET                   | Yes         | Yes      | `get is ArmResourceRead<Resource>;`                              |\n| CreateOrUpdate (PUT)  | Yes         | Yes      | `createOrUpdate is ArmResourceCreateOrUpdateAsync<Resource>;`    |\n| Tags Update (PATCH)   | No          | Yes\\*    | `update is ArmResourceTagsPatchSync<Resource>;`                  |\n| Full Update (PATCH)   | Yes         | No\\*     | `update is ArmResourcePatchSync<Resource, ResourceProperties>;`  |\n| Delete                | Yes         | Yes      | `delete is ArmResourceDeleteSync<Resource>;`                     |\n| List by ResourceGroup | Yes         | Yes      | `listByResourceGroup is ArmResourceListByParent<Resource>;`      |\n| List by Subscription  | Yes         | Yes      | `listBySubscription is ArmResourceListBySubscription<Resource>;` |\n\n\\* Arm requires that, at minimum, a TrackedResource can update Tags. A Full PATCH of all updateable resource properties is preferred.\n\n### Proxy Resource\n\n| Operation            | Recommended | Required | TypeSpec Representation                                         |\n| -------------------- | ----------- | -------- | --------------------------------------------------------------- |\n| GET                  | Yes         | Yes      | `get is ArmResourceRead<Resource>;`                             |\n| CreateOrUpdate (PUT) | Yes         | No\\*     | `createOrUpdate is ArmResourceCreateOrUpdateAsync<Resource>;`   |\n| Update (PATCH)       | Yes         | No       | `update is ArmResourcePatchSync<Resource, ResourceProperties>;` |\n| Delete               | Yes         | No\\*     | `delete is ArmResourceDeleteSync<Resource>;`                    |\n| List by Parent       | Yes         | Yes      | `listByParent is ArmResourceListByParent<Resource>;`            |\n\n\\* Note that, if a resource implements Create, it is highly recommended that it implement delete as well, and vice-versa.\n\n## TypeSpec Operation Templates and Interface Templates\n\nTypeSpec provide operation templates that describe the request and response of standard resource operations. A description of the options available for each resource template, and how to choose which one is described in the sections below.\n\n### Synchronous and Asynchronous APIs\n\nCreateOrUpdate (PUT), Update (Patch), Delete, and Action (POST) operations over a resource may\n\n### Determining Which Resource Properties Appear in Lifecycle Operations\n\nBy default, any property that occurs in your resource model will also appear in the response to GET, PUT, PATCH, and LIST operations, and in the request for PUT and PATCH operations. This does not work for all properties. Some properties are calculated by the service and cannot be directly set by PUT or PATCH (provisioningState, modification date, etc.). Some properties can only be set when creating a resource, but always appear in responses (e.g. 'location'). Some properties can only be set when updating the resource, and appear in responses. Some properties (rarely) may be settable when updating the resource via PUT or PATCH. To allow using a common resource model, but applying these `views` of resources to determine how the resource appear in request and responses, TypeSpec provides the visibility framework. You can see a complete representation of available visibilities in the table [on Property Visibility and Other Constraints](./resource-type.md#property-visibility-and-other-constraints). The sections below outline some common scenarios for designing properties with your operations in mind.\n\n#### Properties That Are Never Directly Set by the User\n\nIt is common to have properties that are calculated by the service or otherwise not directly set by the user, examples include timestamps, dates, values that are only set by specific actions (on/off, enabled/disabled, provisioningState). You want to make sure that these properties are marked so that they will appear in responses and not requests. this is done using the `@visibility(\"read\")` decorator instance:\n\n```typespec\n@visibility(\"read\")\nprovisioningState: ProvisioningState;\n```\n\n### Resource Get Operations\n\nGet is the operation to retrieve a single resource TypeSpec provides a single operation template for GET:\n\n```typespec\nget is ArmResourceRead<MyResource>;\n```\n\n- **get**: The name of the operation passed on to clients.\n- **Resource**: A reference to your resource type.\n\n### Resource CreateOrUpdate Operations (PUT)\n\nThe CreateOrUpdate operation may be synchronous (The operation may always complete before a response is returned) or asynchronous (an initial response may be returned before the operation fully completes).\n\n- Simple resources may have synchronous PUT operations. If a resource may need to perform additional checks, creation of other dependent resources, or the like, it is best to use an Asynchronous API.\n- Asynchronous operations for PUT occur when the RP needs to perform additional validaton actions, create other resources, or perform other tasks as part of resource creation or update that can cause the operation to take longer than the length of a single request/response.\n\n| Operation        | TypeSpec                                                          |\n| ---------------- | ----------------------------------------------------------------- |\n| Synchronous PUT  | `createOrUpdate is ArmResourceCreateOrReplaceSync<ResourceType>`  |\n| Asynchronous PUT | `createOrUpdate is ArmResourceCreateOrReplaceAsync<ResourceType>` |\n\nIn the TypeSpec in the table `createOrUpdate` is the name of the operation, which will be passed on to clients, and `ResourceType` is the type of the resource being created (or updated)\n\n### Resource Update Operations (PATCH)\n\nARM Requires that all `Tracked` resources implement PATCH for ARM tags, which are contained in the envelope of every `TrackedResource`. ARM recommends that you also allow PATCH of other envelope properties and resource-specific properties. Unless marked with a specific visibility, any property in your rp-specific properties will be automatically included in the PATCH schema.\n\nTypeSpec Provides both Synchronous and Asynchronous PATCH Operations, and allows you to specify a PATCH for Resource tags only, a PATCH for all updateable properties, or a custom patch. Generally, you should choose the patch for all updateable properties, unless you have a very good reason fro choosing another PATCH operation.\n\n| Operation Description             | TypeSpec                                                            |\n| --------------------------------- | ------------------------------------------------------------------- |\n| Sync Updateable Properties PATCH  | `update is ArmResourcePatchSync<ResourceType, ResourceProperties>`  |\n| Async Updateable Properties PATCH | `update is ArmResourcePatchAsync<ResourceType, ResourceProperties>` |\n| Sync TagsOnly PATCH               | `update is ArmTagsPatchSync<ResourceType>`                          |\n| Async TagsOnly PATCH              | `update is ArmTagsPatchAsync<ResourceType>`                         |\n| Sync Custom PATCH                 | `update is ArmCustomPatchSync<ResourceType, PatchRequest>`          |\n| Async Custom PATCH                | `update is ArmCustomPatchAsync<ResourceType, PatchRequest>`         |\n\nThe ArmResourcePatch\\* templates take the resource type and the resource properties type as parameters.\nThe ArmTagsPatch\\* templates take the resource type as a parameter.\nThe ArmCustomPatch\\* templates take the resource type and your custom PATCH request type as parameters.\n\n### Resource Delete Operations (DELETE)\n\nThe Delete operation may be synchronous (The operation may always complete before a response is returned) or asynchronous (an initial response may be returned before the operation fully completes).\n\nSimple resources may have synchronous DELETE operations. If a resource needs to clean up other resources or do other validations as part of delete, the delete operation may need to be asynchronous.\n\n| Operation           | TypeSpec                                                  |\n| ------------------- | --------------------------------------------------------- |\n| Synchronous Delete  | `delete is ArmResourceDeleteSync<ResourceType>`           |\n| Asynchronous Delete | `delete is ArmResourceDeleteWithoutOkAsync<ResourceType>` |\n\nIn the TypeSpec in the table `delete` is the name of the operation, which will be passed on to clients, and `ResourceType` is the type of the resource being deleted.\n\n### Resource List Operations (GET)\n\nArm Resource list operations return a list of Tracked or Proxy Resources at a particular scope.\n\n- All resources _should_ include a list operation at its immediate parent scope\n  - For **Tenant Resources**, this is at the tenant scope\n  - For **Extension Resources**, this is at the scope of resources they are extending\n  - For **Tracked Resources**, this is at the resource group scope.\n  - For **Child Resources**, this is at the scope of the resource parent.\n- Tracked resources _must_ include a list operation at the Subscription level.\n\n| Operation          | TypeSpec                                                            |\n| ------------------ | ------------------------------------------------------------------- |\n| ListByParent       | `listByWidget is ArmResourceListByParent<ResourceType>`             |\n| ListBySubscription | `listBySubscription is ArmResourceListBySubscription<ResourceType>` |\n\n### Resource Actions (POST)\n\nCustom actions define any operations over resources outside the simple CRUDL (Create< Read, Update, Delete, List) or lifecycle operations described above. Any operation that returns data that is not made up of resources, performs a prescriptive state change on the resource (cycling power, upgrading, etc.), or any operation that does not fit into the operations described above should be modelled as a _resource action_. Examples of resource actions include:\n\n- Operations that manage credentials associated with a resource\n- Operations that calculate statistics about resources\n- Operations that make specific state changes to resources (power cycle, upgrade, etc.)\n\n#### Actions that take input and output\n\nOperations that manage credentials are a good example fo this category. TypeSpec defines synchronous and asynchronous templates for actions that consume and produce information.\n\n| Operation                    | TypeSpec                                                                       |\n| ---------------------------- | ------------------------------------------------------------------------------ |\n| Synchronous Resource Action  | `updateCredentials is ArmResourceActionSync<ResourceType, Request, Response>`  |\n| Asynchronous Resource Action | `updateCredentials is ArmResourceActionAsync<ResourceType, Request, Response>` |\n\nParameters to the template are the ResourceType, the model for the operation Request body, and the model for the operation Response body.\n\n#### Actions that take input but produce no output (state changing actions)\n\nOperations that make state changes will often take some user configuration, and will return a seccess code or an error code depending on success or failure. TypeSpec defines synchronous and asynchronous operation templates for state changing actions.\n\n| Operation                     | TypeSpec                                                                              |\n| ----------------------------- | ------------------------------------------------------------------------------------- |\n| Synchronous NoContent Action  | `updateCredentials is ArmResourceActionNoContentSync<ResourceType, Request>`          |\n| Asynchronous NoContent Action | `updateCredentials is ArmResourceActionNoResponseContentAsync<ResourceType, Request>` |\n\nParameters to the template are the ResourceType and the model for the operation Request body.\n\n### Actions that take no input but produce output (data retrieval actions)\n\nSome operations return data or paged lists of data. TypeSpec does not yet provide templates for these kinds of actions, but here are two templates that you could reuse in your own specification, described in the next section of the document:\n\n- [Synchronous Resource List Actions](#synchronous-list-action)\n- [Asynchronous List Action](#asynchronous-list-action)\n\n### Check Name Operations\n\nSome services provide operations to check name availability, either location-specific (locally) or globally, especially if a resource name must be globally unique (such as when an exposed endpoint uses the resource name in the url).\n\n| Operation                      | TypeSpec                                                                                             |\n| ------------------------------ | ---------------------------------------------------------------------------------------------------- |\n| Global Name Availability Check | `checkGlobalName is checkGlobalNameAvailability<TRequest, TResponse, TAdditionalParams>`             |\n| Local Name Availability Check  | `checkLocalName is checkLocalNameAvailability<TRequest, TResponse, TAdditionalParams>`               |\n| Custom Name Availability Check | `customNameCheck is checkNameAvailability<TScopeParameters, TRequest, TResponse, TAdditionalParams>` |\n\n`checkGlobalNameAvailability` and `checkLocalNameAvailability` have default values that allow them to be used without specifying any template parameters. `checkNameAvailability` requires the `TScopeParameters` template parameter, which describes the parameters which define the scope of the name check request. For reference, the following table shows the `TScopeParameters` for the standard templates:\n\n| Operation                      | Scope Parameters                                                       |\n| ------------------------------ | ---------------------------------------------------------------------- |\n| Global Name Availability Check | `SubscriptionIdParameter, DefaultProviderNamespace`                    |\n| Local Name Availability Check  | `SubscriptionIdParameter, DefaultProviderNamespace, LocationParameter` |\n\n## Writing Custom Operations\n\nTypeSpec operation templates provide a simple mechanism for producing the most common operation patterns in ARM, using best practices and conforming to ARM RPC guidelines. However, sometimes a service has special requirements for operations that fall outside these boundaries. The `Azure.ResourceManager.Foundations` namespace provides lower level building blocks that can be used to produce operations and operation templates.\n\nThe building blocks are described in the sections below:\n\n### ARM Response Types\n\nCustom operations in ARM still need to respect the correct response schema. This library provides standard ARM response types to help with reusability and compliance.\n\n| Model                               | Code | Description                                   |\n| ----------------------------------- | ---- | --------------------------------------------- |\n| `ArmResponse<T>`                    | 200  | Base Arm 200 response.                        |\n| `ArmResourceUpdatedResponse<T>`     | 200  | Resource updated (PUT) response.              |\n| `ArmResourceCreatedResponse<T>`     | 201  | Resource created response for an lro.         |\n| `ArmResourceCreatedSyncResponse<T>` | 201  | Resource created synchronously.               |\n| `ArmAcceptedResponse`               | 202  | Base Arm Accepted response.                   |\n| `ArmNoContentResponse`              | 204  | Base Arm No Content response.                 |\n| `ArmDeletedResponse`                | 200  | Resource deleted response.                    |\n| `ArmDeleteAcceptedResponse`         | 202  | Resource deletion in progress response.       |\n| `ResourceListResult<T>`             | 200  | Return a list of resource with ARM pagination |\n| `ErrorResponse`                     | x    | Error response                                |\n\n### Common Operation Parameters\n\nThere are a number of model types which specify common parameters which are used in resource type operations:\n\n| Model                           | In           | Description                                                 |\n| ------------------------------- | ------------ | ----------------------------------------------------------- |\n| `ApiVersionParameter`           | query        | api-version parameter                                       |\n| `SubscriptionIdParameter`       | path         | Subscription ID path parameter                              |\n| `ResourceGroupNameParameter`    | path         | Resource Group Name path parameter                          |\n| `ResourceInstanceParameters<T>` | path & query | Identity parameters for a resource, with api-version        |\n| `ResourceParentParameters<T>`   | path & query | Identity Parameters for listing by parent, with api-version |\n| `ResourceUriParameter`          | path         | Resource uri path parameter for Extension resources         |\n| `OperationIdParameter`          | path         | Operation Id path parameter                                 |\n\n### Synchronous List Action\n\nHere is a sample template for resource list actions that return synchronously, using the common building blocks.\n\n```typespec\n// Template definition\n@autoRoute\n@armResourceAction(TResource)\n@post\nop ArmResourceListActionSync<TResource extends ArmResource, TResponse extends object>(\n  ...ResourceInstanceParameters<TResource, TBaseParameters>,\n): ArmResponse<TResponse> | ErrorResponse;\n\n// Usage\n\n// The model for each data record\nmodel Widget {\n  name: string;\n  color: string;\n}\n@armResourceOperations(MyResource)\ninterface MyResourceOperations {\n  // ResourceListResult<T> produces a Pageable list of T\n  listWidgets is ArmResourceListActionSync<MyResource, ResourceListResult<Widget>>;\n}\n```\n\n### Asynchronous List Action\n\nHere is a sample template for resource list actions that return asynchronously, using the common building blocks.\n\n```typespec\n// Template definition\n@autoRoute\n@armResourceAction(TResource)\n@post\nop ArmResourceListActionAsync<TResource extends ArmResource, TResponse extends object>(\n  ...ResourceInstanceParameters<TResource, TBaseParameters>,\n): ArmResponse<TResponse> | ArmAcceptedResponse | ErrorResponse;\n\n// Usage\n\n// The model for each data record\nmodel Widget {\n  name: string;\n  color: string;\n}\n@armResourceOperations(MyResource)\ninterface MyResourceOperations {\n  // ResourceListResult<T> produces a Pageable list of T\n  listWidgets is ArmResourceListActionAsync<MyResource, ResourceListResult<Widget>>;\n}\n```\n", "file_path": "../../docs\\howtos\\ARM\\resource-operations.md", "link_to_file": "file://../../docs\\howtos\\ARM\\resource-operations.md"}, {"file_content": "# ARM Resource Types\n\n## Introductions\n\nIntroduction\nResources are the basic building blocks of Azure. When a customer interacts with Azure through the Control Plane (ARM), they generally will be reading (GET), writing (PUT/PATCH), deleting (DELETE) or performing actions upon (POST) one or more resources. Each resource is managed by a particular Resource Provider, so we uniquely identify a resource by its 'fully-qualified type'. Some well-known examples of types are Microsoft.Compute/virtualMachines, or Microsoft.Network/networkSecurityGroups/securityRules. See Resource Ids for a more in-depth breakdown of the id and associated fields.\n\nIn order to give customers a consistent API when working with many different Resource Providers, and to allow ARM to understand and manage resources programmatically, ARM requires each RP to follow a set of contracts for resource management, defined in the ARM RPC.\n\n## ARM Resource Terminology\n\nThe most important distinction between resources is between _Tracked_ and _Proxy_ resources. Tracked resources are resources in which all of the metadata is maintained in Azure Resource Manager. Tracked Resources can be targeted to specific regions, and are generally the best choice for most top-level resources. Azure Resource Manager maintains data about Tracked Resources, and generally will handle many implementation details or operations on the resource. See [RPC: Resource API Reference](https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/resource-api-reference.md) for further information on the contract for Tracked Resources.\n\nProxy resources are resources in which only a portion of resource metadata is tracked in ARM. Generally, these model resources maintained on other systems, or that resource-providers want to track themselves. Generally, resource providers must implement most of the operations for Proxy resources. Tenant, Extension, and child resources are usually modeled as Proxy resources.\n\nThere is a good discussion on making the choice between Tracked and Proxy Resources in the armwiki discussion [Tracked vs Proxy Resources](https://armwiki.azurewebsites.net/rp_onboarding/tracked_vs_proxy_resources.html)\n\n## Choosing a Resource Type\n\n- The large majority of resources have their metadata tracked by ARM, can be assigned to regions, and are contained inside a resource group in a subscription, for ease of management and billing. These are called [Tracked Resources](#tracked-resources).\n- Some resources may need to have scope across an entire customer tenant, or may need to have a single instance across all customer subscriptions. These are called [tenant resources](#tenant-resources).\n- Some kinds of resources may augment or alter the functionality of resources or resource containers provided by other resource-providers. For example, policy or RBAC rules may be applied to any resource or resource container. These resources are called [extension resources](#extension-resource).\n- Some resources are complex and naturally break down into one or more components that are separately configurable, but an integral part of the larger resource (for example, a virtual network resource may contain many separately configurable subnets). These component resources are called [child resources](#child-resource).\n- Rarely, some resources may need to apply across a subscription, or have a single instance in a customer subscription, these are called [subscription-based resources](#subscription-based-resource).\n- Rarer still, some resources may need to apply across a specific region, or have a single instance in a region, these are called [location-based resources](#location-based-resource).\n- In some cases, there can only be one instance of a resource at a specific scope - this is rare, but happens most frequently in tenant, child, and location resources. In typespec, you will need to specify that the resource is a singleton, and the resource manager tools will automatically apply the correct pattern for singleton resources (using the recommended resource name 'default')\n\n## Modeling Resources in TypeSpec\n\nResources are modeled in TypeSpec by choosing a _base resource type_, defining _rp-specific properties_, and optionally mixing in _standard envelope properties_. Later sections document [how to model resource operations](./resource-operations.md). The following sections discuss usage of each of the base resource types. Later sections discuss [designing rp-specific properties](#designing-resource-specific-properties) and [adding standard ARM envelope properties](#adding-optional-standard-envelope-properties).\n\n### Tracked Resources\n\nTracked resources use the `TrackedResource<TProperties/>` as their base resource type, where `TProperties` is the properties model for the rp-specific properties of the resource. Here is an example:\n\n```typespec\nmodel EmployeeResource is TrackedResource<EmployeeProperties> {\n  @doc(\"The employee name, using 'Firstname Lastname' notation\")\n  @segment(\"employees\")\n  @key(\"employeeName\")\n  @visibility(\"read\")\n  @path\n  name: string;\n}\n```\n\n`@doc`: provides documentation for the 'name' property of the resource.\n`@segment(employees)`: provides the resource type name for this resource.\n`@key(employeeName)`: provides the parameter name for the name of the resource in operations that use this resource.\n`@visibility(read)`: indicates that this property is returned in the body of responses to operations over this resource, but does not appear in the body of requests. Later sections describe the [usage of property visibility](#property-visibility-and-other-constraints).\n`@path`: indicates that this property corresponds to the last segment of the url path to the resource (otherwise known as the resource identity).\n\nYou can find samples of Tracked Resources [in the DynaTrace sample](https://github.com/Azure/typespec-azure/packages/samples/resource-manager/dynatrace/main.tsp).\n\n### Tenant Resources\n\nTenant resources use the `ProxyResource<TProperties/>` as their base resource type, where `TProperties` is the properties model for the rp-specific properties of the resource. Here is an example:\n\n```typespec\n@tenantResource\nmodel EmployeeResource is ProxyResource<EmployeeProperties> {\n  @doc(\"The employee name, using 'Firstname Lastname' notation\")\n  @segment(\"employees\")\n  @key(\"employeeName\")\n  @visibility(\"read\")\n  @path\n  name: string;\n}\n```\n\n`@tenantResource`: designates this resource as being a cross-tenant resource, with scope across all customer subscriptions in the tenant.\n`@doc`: provides documentation for the 'name' property of the resource.\n`@segment(employees)`: provides the resource type name for this resource.\n`@key(employeeName)`: provides the parameter name for the name of the resource in operations that use this resource.\n`@visibility(read)`: indicates that this property is returned in the body of responses to operations over this resource, but does not appear in the body of requests. Later sections describe the [usage of property visibility](#property-visibility-and-other-constraints).\n`@path`: indicates that this property corresponds to the last segment of the url path to the resource (otherwise known as the resource identity).\n\nYou can find samples of Tenant Resources [in the TenantResource sample](https://github.com/Azure/typespec-azure/packages/samples/resource-manager/tenantResource/main.tsp).\n\n### Extension Resource\n\nExtension resources use the `ExtensionResource<TProperties/>` as their base resource type, where `TProperties` is the properties model for the rp-specific properties of the resource. Here is an example:\n\n```typespec\nmodel EmployeeResource is ExtensionResource<EmployeeProperties> {\n  @doc(\"The employee name, using 'Firstname Lastname' notation\")\n  @segment(\"employees\")\n  @key(\"employeeName\")\n  @visibility(\"read\")\n  @path\n  name: string;\n}\n```\n\n`@doc`: provides documentation for the 'name' property of the resource.\n`@segment(employees)`: provides the resource type name for this resource.\n`@key(employeeName)`: provides the parameter name for the name of the resource in operations that use this resource.\n`@visibility(read)`: indicates that this property is returned in the body of responses to operations over this resource, but does not appear in the body of requests. Later sections describe the [usage of property visibility](#property-visibility-and-other-constraints).\n`@path`: indicates that this property corresponds to the last segment of the url path to the resource (otherwise known as the resource identity).\n\nYou can find samples of Extension Resources [in the TenantResource sample](https://github.com/Azure/typespec-azure/packages/samples/resource-manager/tenantResource/main.tsp).\n\n### Child Resource\n\nChild resources usually use the `ProxyResource<TProperties/>` as their base resource type, where `TProperties` is the properties model for the rp-specific properties of the resource. Here is an example:\n\n```typespec\n@parentResource(EmployeeResource)\nmodel JobResource is ProxyResource<JobProperties> {\n  @doc(\"The job name\")\n  @segment(\"jobs\")\n  @key(\"jobName\")\n  @visibility(\"read\")\n  @path\n  name: string;\n}\n```\n\n`@parentResource`: designates the model type for the parent of this child resource. The resource identifier for this resource will be prepended with the resource identity of the parent.\n`@doc`: provides documentation for the 'name' property of the resource.\n`@segment(employees)`: provides the resource type name for this resource.\n`@key(employeeName)`: provides the parameter name for the name of the resource in operations that use this resource.\n`@visibility(read)`: indicates that this property is returned in the body of responses to operations over this resource, but does not appear in the body of requests. Later sections describe the [usage of property visibility](#property-visibility-and-other-constraints).\n`@path`: indicates that this property corresponds to the last segment of the url path to the resource (otherwise known as the resource identity).\n\nYou can find samples of Child Resources [in the DynaTrace sample](https://github.com/Azure/typespec-azure/packages/samples/resource-manager/dynatrace/main.tsp).\n\n### Subscription-based Resource\n\nTenant resources use the `ProxyResource<TProperties/>` as their base resource type, where `TProperties` is the properties model for the rp-specific properties of the resource. Here is an example:\n\n```typespec\n@subscriptionResource\nmodel EmployeeResource is ProxyResource<EmployeeProperties> {\n  @doc(\"The employee name, using 'Firstname Lastname' notation\")\n  @segment(\"employees\")\n  @key(\"employeeName\")\n  @visibility(\"read\")\n  @path\n  name: string;\n}\n```\n\n`@subscriptionResource`: designates this resource as being a cross-subscription resource, with scope across all resource groups in the subscription.\n`@doc`: provides documentation for the 'name' property of the resource.\n`@segment(employees)`: provides the resource type name for this resource.\n`@key(employeeName)`: provides the parameter name for the name of the resource in operations that use this resource.\n`@visibility(read)`: indicates that this property is returned in the body of responses to operations over this resource, but does not appear in the body of requests. Later sections describe the [usage of property visibility](#property-visibility-and-other-constraints).\n`@path`: indicates that this property corresponds to the last segment of the url path to the resource (otherwise known as the resource identity).\n\nYou can find samples of Subscription Resources [in the OperationTemplates sample](https://github.com/Azure/typespec-azure/packages/samples/resource-manager/operationsTest/opTemplates.tsp).\n\n### Location-based Resource\n\nLocation-based resources usually use the `ProxyResource<TProperties/>` as their base resource type, where `TProperties` is the properties model for the rp-specific properties of the resource. Here is an example:\n\n```typespec\n@locationResource\nmodel EmployeeResource is ProxyResource<EmployeeProperties> {\n  @doc(\"The employee name, using 'Firstname Lastname' notation\")\n  @segment(\"employees\")\n  @key(\"employeeName\")\n  @visibility(\"read\")\n  @path\n  name: string;\n}\n```\n\n`@locationResource`: designates this resource as being a cross-location resource, with scope across a location within a subscription.\n`@doc`: provides documentation for the 'name' property of the resource.\n`@segment(employees)`: provides the resource type name for this resource.\n`@key(employeeName)`: provides the parameter name for the name of the resource in operations that use this resource.\n`@visibility(read)`: indicates that this property is returned in the body of responses to operations over this resource, but does not appear in the body of requests. Later sections describe the [usage of property visibility](#property-visibility-and-other-constraints).\n`@path`: indicates that this property corresponds to the last segment of the url path to the resource (otherwise known as the resource identity).\n\nYou can find samples of Location Resources [in the OperationTemplates sample](https://github.com/Azure/typespec-azure/packages/samples/resource-manager/operationsTest/opTemplates.tsp).\n\n### Singleton Resource\n\nSingleton resources can use any resource base type, but most often use `ProxyResource<TProperties/>` as their base resource type, where `TProperties` is the properties model for the rp-specific properties of the resource. Here is an example:\n\n```typespec\n@singleton\n@tenantResource\nmodel EmployeeAgreementResource is ProxyResource<EmployeeAgreementProperties> {\n  @doc(\"The default employee agreement, applying to all employees.\")\n  @segment(\"employeeAgreements\")\n  @key\n  @visibility(\"read\")\n  @path\n  name: string;\n}\n```\n\n`@singleton`: indicates that there can only be one of the resources in the resource container (in this case, only one instance in the customer tenant).\n`@tenantResource`: designates this resource as being a cross-tenant resource, with scope across all customer subscriptions in the tenant.\n`@doc`: provides documentation for the 'name' property of the resource. For a singleton, the name value will always be the same.\n`@segment(employeeAGreements)`: provides the resource type name for this resource.\n`@key`: provides the parameter name for the name of the resource in operations that use this resource - this will not be a settable value for singleton resources.\n`@visibility(read)`: indicates that this property is returned in the body of responses to operations over this resource, but does not appear in the body of requests. Later sections describe the [usage of property visibility](#property-visibility-and-other-constraints).\n`@path`: indicates that this property corresponds to the last segment of the url path to the resource (otherwise known as the resource identity).\n\nYou can find samples of Singleton Resources [in the DynaTrace sample](https://github.com/Azure/typespec-azure/packages/samples/resource-manager/dynatrace/main.tsp#L120-L128).\n\n## Designing Resource-specific Properties\n\nEach resource model consists of two distinct parts\n\n- An outer _envelope_ of information that provides metadata for optional standardized ARM functionality, like entity-tags and managed identities, and is processed by Azure Resource Manager.\n- An inner set of properties that are specific to the resource and are defined by the resource provider.\n\nModifying the ARM envelope is discussed in later sections on [mixing in standard ARM envelope add-ons](#adding-optional-standard-envelope-properties).\n\nThe inner _rp-specific property bag_ consists of all of the properties that the RP needs to manage about the resource. Properties should be completely specified, should not duplicate properties from the _ARM envelope_, and may consist of simple types, arrays, or other complex properties.\n\nHere is an example of a property bag for the `EmployeeResource` resource.\n\n```typespec\nmodel EmployeeResource is TrackedResource<EmployeeProperties> {\n  @doc(\"The employee name, using 'Firstname Lastname' notation\")\n  @segment(\"employees\")\n  @key(\"employeeName\")\n  @visibility(\"read\")\n  @path\n  name: string;\n}\n\nenum EmployeeProvisioningState {\n  Creating,\n  GeneratingId,\n  ...ResourceProvisioningState,\n  Deleting,\n}\n\n@minValue(50)\n@maxValue(70)\nscalar EmployeeLevel extends int32;\n\nscalar EmployeeResourceId\n  extends ResourceIdentifier<[\n    {\n      type: \"Microsoft.HR/employees\",\n    }\n  ]>;\n\n@secret\nscalar Password extends string;\n\nmodel Job {\n  name: string;\n  companyName: string;\n  start: plainDate;\n  end: plainDate;\n  role: string;\n  notes?: string;\n}\n\nmodel EmployeeProperties {\n  @doc(\"The current title of the employee\")\n  title: string;\n\n  @visibility(\"read\", \"create\")\n  level: EmployeeLevel;\n\n  @visibility(\"read\")\n  employeeId: int32;\n\n  biography?: string = \"No biography provided\";\n  colleagues: EmployeeResourceId[];\n  employmentHistory: Job[];\n\n  @visibility(\"create\")\n  password: Password;\n\n  provisioningState?: EmployeeProvisioningState;\n}\n```\n\n`EmployeeProperties` specifies the employee metadata that the RP needs to track and manage. Notice that the model uses built-in scalar types like `string` and `int32`, new types built from scalar types with added constraints, like `Password` and `EmployeeLevel`, enumerations of values, like `EmployeeProvisioningState`, and complex types. The individual components of this model are described below.\n\nNote that _documentation comments on all models and model properties are required when specs are checked in_. Here they are omitted for clarity. The TypeSpec compiler and TypeSpec IDE tooling will emit warning diagnostics if you emit required documentation, and about most of the ARM rules described in this document.\n\n### The `provisioningState` Property for Tracked Resources\n\nAll Tracked Resources are required to implement a 'provisioningState' property in their rp-specific property bag. This is used by ARM and some ARM clients to track the provisioning state of a resource as it is created and deleted. At minimum, the provisioning state must contain the standard terminal values that ARM is looking for. There are contained in the `ResourceProvisioningState` enumeration in the Azure.ResourceManager library. If RPs have other provisioning states they would like to track, they can define their own provisioning state enum, and mix in the value, as shown in the sample above, or they may simply use the standard provisioning state as shown in the sample below:\n\n```typespec\nmodel ResourceProperties {\n  ...ResourceProvisioningState;\n}\n```\n\nNote that this example uses the spread operator `...`, which allows you to simply include the properties from a source model in the target model you are constructing. This has the effect of copying the properties of the source model and their decorations into the target model, without creating any nominal inheritance relationship.\n\nAlternately, this is also equivalent:\n\n```typespec\nmodel ResourceProperties {\n  @doc(\"The status of the last provisioning operation performed on the resource.\")\n  @visibility(\"read\")\n  provisioningState?: ResourceProvisioningState;\n}\n```\n\n### Required and Optional properties and Property Defaults\n\nIn the examples, note that some model properties use the optional operator `?` after the property name, like `biography?` and some do not, like `title`. Property names using the `?` are optional properties, which may or may not be provided in the request body for CreateOrUpdate (PUT) requests. Property names without the `?` are required properties, which must be provided in PUT requests. The exception is that properties that have 'readOnly' visibility do not appear in requests, but may be required or optional in responses.\n\nAlso note that optional properties may specify defaults, as with `biography?: string = \"No biography provided\"`. The default indicates the value that will be recorded on the server if no value is sent by the client.\n\n### Defining Custom Types\n\nIn the sample, new constrained scalar types and new complex model types are defined and used inside the _rp-specific property bag_. TypeSpec allows you to define custom types for use in your specification.\n\nYou will often want to define scalar types or properties that have constraints. For example, numeric values may be constrained to have a certain minimum or maximum, strign values may be constrained to follow a particular regex pattern, and so on. Whenever these constrained types are used in your spec, the constraints will be transmitted to the usage.\n\nThe example creates a numeric type with minimum and maximum constraints:\n\n```typespec\n@minValue(50)\n@maxValue(70)\nscalar EmployeeLevel extends int32;\n```\n\nThis defines 'EmployeeLevel' as an integer value between 50 and 70. The example also defines a complex type used in an array:\n\n```typespec\nmodel Job {\n  name: string;\n  companyName: string;\n  start: plainDate;\n  end: plainDate;\n  role: string;\n  notes?: string;\n}\n```\n\nMode details on what to consider when using complex types in an array are discussed in the section on [modeling arrays of complex types](#modeling-arrays-of-complex-types).\n\n### Using Resource identifiers\n\nIt is often the case that resources need to reference other resources to provide specific pieces of functionality. For example, resources may need to reference a storage account to use for storing user data, or a NIC to attach to a Network. The `Azure.ResourceManager` library defines a `ResourceIdentifier` template that allows you to easily represent references to resources in your API. The template allows you to specify one or more acceptable resource types, automatically designating the value as a resource reference, and providing the appropriate pattern validation - which helps in generating better code, better ARM templates, and better documentation for your API.\n\n```typespec\nscalar EmployeeResourceId\n  extends ResourceIdentifier<[\n    {\n      type: \"Microsoft.HR/employees\",\n    }\n  ]>;\n\nscalar NetworkInterfaceId\n  extends ResourceIdentifier<[\n    {\n      type: \"Microsoft.Network/networkInterfaces\",\n    },\n    {\n      type: \"Microsoft.ClassicNetwork/networkInterfaces\",\n    }\n  ]>;\n```\n\nThe `NetworkInterfaceId example shows how to allow multiple resource types in a reference.\n\n### Property Visibility and Other Constraints\n\nThe sample uses the `@visibility` decorator to indicate how the resource definition is used in requests to PUT and PATCH operations, and in responses to PUT, PATCH, GET, and LIST operations.\n\nThis table shows how visibility is used to determine whether a property is used in requests and responses:\n\n| Visibility           | In Create Request? | In Patch Request/ Updateable in PUT | In Responses | Sample                                         |\n| -------------------- | ------------------ | ----------------------------------- | ------------ | ---------------------------------------------- |\n| None                 | Yes                | Yes                                 | Yes          | Most properties                                |\n| read, create, update | Yes                | Yes                                 | Yes          | Most properties                                |\n| read, create         | Yes                | No                                  | Yes          | resource location                              |\n| read, update         | No                 | Yes                                 | Yes          | Properties only settable after creation (keys) |\n| create, update       | Yes                | Yes                                 | No           | Secrets (e.g. password)                        |\n| read                 | No                 | No                                  | Yes          | Calculated properties, e.g. provisioningState  |\n| update               | No                 | Yes                                 | No           | Secrets (e.g. keys)                            |\n| create               | Yes                | No                                  | No           | Secrets (e.g. user-defined password)           |\n\n### Modeling Arrays of Complex Types\n\nFinally, when your _rp-specific property bag_ contains an array of complex properties, there are a few important considerations:\n\n- The complex properties in an array must have a key property - this means a property named 'name' or 'id' that uniquely identifies the property in the array. The TypeSpec tools will emit a diagnostic if you omit this.\n- ARM resources must be fully loaded in memory, so there are limits to the size of arrays in the properties of a resource. If your array is not strictly bounded, you should consider modeling the array property as a [child resource](#child-resource)\n- Updating the contents of arrays can be difficult, and result in data loss under simultaneous updates, especially as Json-Merge-Patch is not widely supported in ARM update operations. If users will frequently need to update the contents of arrays, you should consider modeling as a [child resource](#child-resource).\n\n## Adding Optional Standard Envelope Properties\n\nIn addition to the resource-specific property bag, a resource may configure on or more standard ARM features through the use of standard properties in the _ARM Envelope_. Standard features configured in the envelope include:\n\n- **Managed Identity**: Associating a managed identity with the resource to authorize actions taken by this resource on other resources.\n- **SKU**: A standard mechanism for configuring levels of service for a resource.\n- **Plan**: A standard mechanism for configuring MarketPlace billing plans for a resource.\n- **ETags**: A standard mechanism for managing concurrent operations over the resource.\n- **ResourceKind**: A standard mechanism for specifying a type of user experience in the portal.\n\n### Managed Identity\n\nStandard configuration for ARM support of both SystemAssigned and UserAssigned Managed Service Identity (MSI)\n\n- If a resource allows both generated (SystemAssigned) and user-assigned (UserAssigned) Managed Identity, use the spread (...) operator to include the standard ManagedServiceIdentity envelope property. This will allow users to manage any ManagedServiceIdentity associated with this resource.\n\n  ```typespec\n  model EmployeeResource is TrackedResource<EmployeeProperties> {\n    @doc(\"The employee name, using 'Firstname Lastname' notation\")\n    @segment(\"employees\")\n    @key(\"employeeName\")\n    @visibility(\"read\")\n    @path\n    name: string;\n\n    ...ManagedServiceIdentity;\n  }\n  ```\n\n- If a resource allows only generated (SystemAssigned) Managed Identity, use the spread operator (...) to include the `ManagedSystemAssignedIdentity` standard envelope property in the resource definition. This will allow users to manage the SystemAssigned identity associated with this resource.\n\n  ```typespec\n  model EmployeeResource is TrackedResource<EmployeeProperties> {\n    @doc(\"The employee name, using 'Firstname Lastname' notation\")\n    @segment(\"employees\")\n    @key(\"employeeName\")\n    @visibility(\"read\")\n    @path\n    name: string;\n\n    ...ManagedSystemAssignedIdentity;\n  }\n  ```\n\nFor more information, see [Managed Service Identity Support](https://eng.ms/docs/products/arm/rpaas/msisupport)\n\n### SKU\n\nStandard support for setting a SKU-based service level for a resource. To enable SKU support, add the `ResourceSku` enevelope property to the resource definition:\n\n```typespec\nmodel EmployeeResource is TrackedResource<EmployeeProperties> {\n  @doc(\"The employee name, using 'Firstname Lastname' notation\")\n  @segment(\"employees\")\n  @key(\"employeeName\")\n  @visibility(\"read\")\n  @path\n  name: string;\n\n  ...ResourceSku;\n}\n```\n\nFor more information, see [SKU Support](https://eng.ms/docs/products/arm/rpaas/skusupport)\n\n### ETags\n\nIndicator that entity-tag operation concurrency support is enabled for this resource. To enable ETags, add the `EntityTag` envelope property to the resource definition.\n\n```typespec\nmodel EmployeeResource is TrackedResource<EmployeeProperties> {\n  @doc(\"The employee name, using 'Firstname Lastname' notation\")\n  @segment(\"employees\")\n  @key(\"employeeName\")\n  @visibility(\"read\")\n  @path\n  name: string;\n\n  ...EntityTag;\n}\n```\n\nFor more information, and limitations on RPaaS concurrency support, see [RPaaS ETag Support](https://eng.ms/docs/products/arm/rpaas/etags)\n\n### Plan\n\nSupport for marketplace billing configuration for the resource. To enable `Plan` support, add the `ResourcePlan` standard envelope property to the resource definition.\n\n```typespec\nmodel EmployeeResource is TrackedResource<EmployeeProperties> {\n  @doc(\"The employee name, using 'Firstname Lastname' notation\")\n  @segment(\"employees\")\n  @key(\"employeeName\")\n  @visibility(\"read\")\n  @path\n  name: string;\n\n  ...ResourcePlan;\n}\n```\n\nSee [MarketPlace Third Party Billing SUpport](https://eng.ms/docs/products/arm/rpaas/custom_billing)\n\n### ResourceKind\n\nSupport for certain kinds of portal user experiences based on the kind of resource. To include 'Kind' in the resource defintion, add the `ResourceKind` standard envelope property.\n\n```typespec\nmodel EmployeeResource is TrackedResource<EmployeeProperties> {\n  @doc(\"The employee name, using 'Firstname Lastname' notation\")\n  @segment(\"employees\")\n  @key(\"employeeName\")\n  @visibility(\"read\")\n  @path\n  name: string;\n\n  ...ResourceKind;\n}\n```\n\nFor more information on user experiences in the Azure Portal, see [Portal Support](https://eng.ms/docs/products/arm/rpaas/portal/gettingstarted)\n\n### ManagedBy\n\nSupport for management of this resource by other resources. To add 'ManagedBy' support to the resource, add the `ManagedBy` envelope property to the resource definition:\n\n```typespec\nmodel EmployeeResource is TrackedResource<EmployeeProperties> {\n  @doc(\"The employee name, using 'Firstname Lastname' notation\")\n  @segment(\"employees\")\n  @key(\"employeeName\")\n  @visibility(\"read\")\n  @path\n  name: string;\n\n  ...ManagedBy;\n}\n```\n\nFor more information on supporting 'ManagedBy', see [ManagedBy API Contract](https://eng.ms/docs/products/arm/api_contracts/managedby)\n\n## Reference\n\n[Fundamentals - ARM Wiki](https://armwiki.azurewebsites.net/fundamentals/overview.html)\n", "file_path": "../../docs\\howtos\\ARM\\resource-type.md", "link_to_file": "file://../../docs\\howtos\\ARM\\resource-type.md"}, {"file_content": "# Content Type Negotiation\n\nSee [Http documentation on content type negotiation](https://microsoft.github.io/typespec/next/standard-library/http/content-types#content-type-negotiation) for the general concept\n\n## Usage with Azure.Core operations\n\nContent negotiation in `Azure.Core` is done in the same way as in Http operations. This means each operation must have the `@sharedRoute` decorator added as well as an `Accept` header in the operation parameters (`TParams`).\n\nFor example, consider an api that lets you download the avatar of the `User` resource as a `png` or `jpeg` depending on which Accept header is sent.\n\n```tsp\nusing TypeSpec.Http;\nusing TypeSpec.Rest;\nusing Azure.Core;\n\n@resource(\"users\")\nmodel User {\n  @key id: string;\n}\n\nmodel PngImage {\n  @header contentType: \"image/png\";\n  @body image: bytes;\n}\n\nmodel JpegImage {\n  @header contentType: \"image/jpeg\";\n  @body image: bytes;\n}\n\n@sharedRoute\n@action(\"avatar\")\nop getAvatarAsPng is StandardResourceOperations.ResourceAction<\n  User,\n  {\n    @header accept: \"image/png\";\n  },\n  PngImage\n>;\n\n@sharedRoute\n@action(\"avatar\")\nop getAvatarAsJpeg is StandardResourceOperations.ResourceAction<\n  User,\n  {\n    @header accept: \"image/jpeg\";\n  },\n  JpegImage\n>;\n```\n", "file_path": "../../docs\\howtos\\Azure Core\\content-negotiation.md", "link_to_file": "file://../../docs\\howtos\\Azure Core\\content-negotiation.md"}, {"file_content": "# Deep Dive: Long-running (Asynchronous) Operations\n\nLong-running, or asynchronous operations (LROs for short) are Http Operations that are not complete in a single request/response sequence. Such operations require multiple requests and responses, usually to different endpoints before the operation is complete. Some common patterns that services use for LROs include:\n\n- Polling the resource 'GET' endpoint - Using a 'status' field in the resource to specify the resource state, and polling the resource Get endpoint until the status field reached a terminal status. A 'Location' header is often provided on the initial operation response, with a Url for the resource 'Get' endpoint.\n- Using a Status Monitor endpoint - Defining a separate endpoint where operation status can be obtained. An 'Operation-Location' or similar header with a Url for the StatusMonitor endpoint is most often provided in the initial operation response.\n- Providing a Push Notification System - Allowing the client to specify an endpoint for the service to call once the operation is complete\n\nNote that, for many APIs, the Url of the StatusMonitor (or resource GET) endpoint can easily be determined from the values in the initial request and response. This pattern is often followed when linking operations in OpenAPI3 specifications.\n\n## Modeling Long-running Operations in TypeSpec\n\nThe `@azure-tools/typespec-azure-core` library contains specific operation templates for long-running operation patterns recommended by the api review board. Using these templates will ensure that a service has the widest range of compatibility with Azure SDKs and Azure tooling for long-running operations. Service teams **should** use these templates to define their long-running operations. Existing services that have LROs that do not comply with API guidelines should discuss their operations with the Api review board, or the TypeSpec team.\n\n## Long-running Operation Helpers for Emitters and Libraries\n\nThe Azure.Core library provides a helper that emitters can use to determine if an operation being processed is an LRO, and to provide details about how the LRO should be processed by clients, or about how operations are linked.\n\n```typespec\ngetLroMetadata( program: Program, operation: Operation) : LroMetadata | undefined;\n```\n\nThe `LroMetadata` returned from this function contains information about the linked operations and their behavior, as well as additional that clients used to processing OpenAPI2 will be able to use to process TypeSpec operations similarly:\n\n| Property          | Description                                                                                                                                                                                                                                                                             |\n| ----------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `logicalResponse` | contains the type of the operation response, for the long-running operation (i.e. the result after polling completes).                                                                                                                                                                  |\n| `final-state-via` | contains values corresponding to the same field in the `x-ms-long-running-operation-options` extension in OpenAPI specifications.                                                                                                                                                       |\n| `statusMonitor`   | contains information about the status monitor, including the status monitor type                                                                                                                                                                                                        |\n| `polling`         | contains information about polling the status monitor, including the status field and terminal status values                                                                                                                                                                            |\n| `final`           | contains information about how to get the result when polling completes. In the standard case. this will contain a reference to the status monitor property that contains result information. If another operation needs to be called to get the status, that information will be here. |\n\nAs indicated above, operations often contain multiple mechanisms that clients can use to resolve a long-running operation, this means that an operation will frequently contain both operation links and resource links that describe the LRO. The helper prefers the use of resource links to the use of operation links, where possible.\n\n## Describing Custom LRO Patterns using Azure.Core\n\nThe `@azure-tools/typespec-azure-core` library also contains general structures for defining custom long-running operations using specialized model templates and decorators. The following sections describe . The primary mechanisms for linking operations are `Operation Links` and `Resource Links`.\n\n### Custom LROs - Operation Links\n\nOperation links are used when the input parameters to a linked operation can be determined from parameters in the initial operation request and response. For example, if a polling operation uses the identity parameters of the initial request, and an `operationId` parameter which is returned in a header or field in the response, the link between the operations should be modeled as an Operation Link. In order to use an Operation link, each parameter of the linked operation must correspond with a parameter of the initial operation, a property of the initial request (header or body), or property of the initial response (header or body). Operation links encode a reference to the linked operation, and a mapping between the initial request and response and the parameters of the linked operation:\n\n```typespec\nop getWidgetOperationStatus is getResourceOperationStatus<Widget>;\n\n@pollingOperation(getWidgetOperationStatus, parameterMap)\nop createWidgetAsync is longRunningCreateOrReplace<Widget>;\n```\n\nNote that, in the example above, the `@pollingOperation`decorator is used to specify an operation link to a StatusMonitor endpoint. This is just syntactic sugar for `@operationLink(getWidgetOperationStatus, \"polling\", parameterMap)`. To represent the logical stages of an LRO, `@pollingOperation` represents a link to a statusMonitor, and is the only decoration required for operations that comply with the recommended LRO pattern. Another decorator `@finalOperation` represents a link to an operation where the final result must be obtained my making a final request after polling has terminated.\n\n#### Decorators for Operation Links in Azure.Core\n\nAzure.Core defines the following decorators for operation links\n\n`@pollingOperation` - links a long-running operation to its status monitor endpoint.\n`@finalOperation` - links a long-running operation to an additional endpoint, in the case that an additional endpoint must be called to obtain the final result after polling the status monitor is complete.\n\nEach of these decorators require a reference to the linked operation. They may also provide a mapping between the parameters and response properties of the initial request to the parameters of the linked operation. This mapping can be provided as a `Model` type parameter passed to the decorator, or by decorating the parameters and response properties of the original operation using `@lroParameter`\n\n### Custom LROs - Resource Links\n\nResource links are used when the entire url of the linked operation is provided as part of the response to the initial operation. A resource link encodes the type of the expected response when the link is followed:\n\n```typespec\nmodel WidgetStatusMonitorResponse {\n  @pollingLocation\n  @header(\"Operation-Location\")\n  operationLocation: ResourceLocation<ResourceOperationStatus<Widget>>;\n  // following the url in this header will provide a response of type ResourceOperationStatus<Widget>\n}\n```\n\n#### Decorators for Resource Links in Azure.Core\n\nAzure.Core defines the following decorators for resource links used in long-running operations:\n\n`@pollingLocation` - indicates that the decorated property contains a url to the StatusMonitor. The type of the decorated property **should** be a `ResourceLocation`.\n`@finalLocation` - indicates that the decorated property contains a url to the final result, in cases where an additional request must be made after polling to obtain the final result of the operation. The type of the decorated property must be a `ResourceLocation`.\n\n```typespec\nalias ResultHeaders = {\n  @pollingLocation\n  @header(\"Operation-Location\")\n  operationLocation: ResourceLocation<ResourceOperationStatus<Widget>>;\n\n  @finalLocation\n  @header(\"location\")\n  location: ResourceLocation<Widget>;\n};\n```\n\nNote that the LRO templates provided in Azure.Core automatically provide the appropriate headers and resource location decoration for LROs.\nNote that operations often provide multiple mechanisms that clients may use to determine how to logically complete an operation. This is often done to allow clients with different capabilities to determine how to resolve a long-running operation. It is recommended that clients prefer using Operation links in preference to Resource links whenever possible, because OperationLinks provide more information about the next operation.\n\n### Status Monitor Types in Azure.Core\n\nFor Azure services, there is clear API guidance that requires usage of the Status Monitor pattern. In Azure, the Status Monitor has a specific structure, including:\n\n- A 'status' property containing the current status of the operation\n  - The status property is a string property that contains known values for terminal states, by default these are 'Succeeded' for successful operation termination, 'Failed' for operation termination with failure, and 'Canceled' to indicate the operation was canceled.\n- A 'result' property, containing the result of the operation once the operation has succeeded (and is null if it has not succeeded)\n- An 'error' property, containing any errors that occurred during the operation.\n\nIn Azure.Core, this structure is represented using the `ResourceOperationStatus<TResource, TSuccess, TError>` model. The initial response to a long-running operation in Azure must contain an `Operation-Location` header that contains a url to the StatusMonitor endpoint. The StatusMonitor endpoint Url can also be calculated using the key properties of the resource and an additional `operationId` key property. To allow repeatability of requests and automatic calculation of the statusMonitor Uri, each LRO should allow an `OperationId` header that sets the operationId for the operation id execution. The `OperationId` must also be included in a header in the initial lro response. These patterns are encoded in the `LongRunning` operation templates provided in Azure.Core. If your service description uses these templates, it will automatically be following the recommended pattern.\n\n### Decorators and Types for Custom StatusMonitors in Azure.Core\n\nA StatusMonitor provides information that drives client polling until an operation completes. This includes a `status` field containing the current state of the operation, with known values for terminal states, headers that suggest polling retry intervals, and fields that will contain result and error information when the operation reaches a terminal status. Azure.Core provides a `ResourceOperationStatus` template that defines the standard Azure status monitor for an Azure operation. However, some services may need to implement custom status monitors. Azure.Core provides additional decorators to help clients use custom status monitors.\n\n| Decorator                    | Value                                                                                                                                                                                                                                                                     |\n| ---------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `@lroStatus`                 | A decorator marking the field of the StatusMonitor that contains status information. This field should use an `enum` type to specify terminal status values.                                                                                                              |\n| `@lroResult`                 | A decorator marking the property of the Status monitor that contains the result of the operation, when the operation completes successfully. By default, any field named 'result' in a StatusMonitor is assumed to contain the result of a successful operation.          |\n| `@lroErrorResult`            | A decorator marking the property of the Status monitor that contains errors when the operation is unsuccessful. By default, any field named 'error' in a StatusMonitor is assumed to contain the result of a successful operation.                                        |\n| `@lroSucceeded`              | If a status monitor uses a value other than `Succeeded` to indicate operation termination with success, then the enum value corresponding to successful completion should be decorated with this decorator.                                                               |\n| `@lroCanceled`               | If a status monitor uses a value other than `Canceled` to indicate that the operation was cancelled, then the enum value corresponding to cancellation should be decorated with this decorator.                                                                           |\n| `@lroFailed`                 | If a status monitor uses a value other than `Failed` to indicate operation termination with failure, then the enum value corresponding to operation failure should be decorated with this decorator.                                                                      |\n| `@pollingOperationParameter` | Indicates which request parameters or response properties of an operation can be used to call the operation that retrieves lro status (Status Monitor). Each application of the decorator may reference or name the corresponding parameter in the `getStatus` operation. |\n\n### Examples of common (non-standard) Lro Patterns\n\n- Status Monitor with custom terminal status fields\n- Status Monitor with custom result field\n- Link to StatusMonitor in the `location` header\n- Link to StatusMonitor in the `Azure-AsyncOperation` header\n- Link to operation with final status\n- Calling GetStatusMonitor operation with non-standard parameters\n\n#### Example 1 - Status Monitor with custom terminal status fields\n\nIn this example, the Status Monitor terminal properties for \"Succeeded\", \"Failed\", and \"Canceled\" use non-standard names.\n\n```tsp\n@lroStatus\nenum OperationStatus {\n  Running,\n\n  @lroSucceeded\n  Completed,\n\n  @lroCanceled\n  Aborted,\n\n  @lroFailed\n  Faulted,\n}\n\nmodel StatusMonitor {\n  status: OperationStatus;\n  result?: Widget;\n  error?: Error;\n}\n\n@route(\"/status/{id}\")\nop getStatus(@path id: string): StatusMonitor | ErrorResult;\n\n@pollingOperation(getStatus)\nop repairWidget is StandardResourceOperations.LongRUnningResourceAction<Widget>;\n```\n\nWe would expect `getLroMetadata` to return the foillowing data for this operation:\n\n```typescript\n{\n  envelopeResult: StatusMonitor, // the return value of getStatus\n  logicalResult: Widget; // The `result` field in the StatusMonitor\n  logicalPath: \"result\",\n  finalStateVia: \"operation-location\",\n  statusMonitorStep: {\n    target: {\n      kind: \"link\"\n      location: \"ResponseHeader\",\n      property: operationLocation\n    }\n  },\n  pollingInfo: {\n    resultProperty: StatusMonitor.result,\n    errorProperty: StatusMonitor.error,\n    terminationStatus: {\n      property: StatusMonitor.result,\n      succeededState: [\"Completed\"],\n      canceledState [\"Aborted\"],\n      failedState: [\"Faulted\"],\n    }\n  }\n}\n```\n\n#### Example 2 - Status Monitor with custom result fields\n\nIn this example, the status monitor returns the result of a successful operation in a field with a name other than 'result'\n\n```tsp\n@lroStatus\nnum OperationStatus {\n  Running,\n  Succeeded,\n  Canceled,\n  Failed\n}\n\nmodel StatusMonitor {\n  status: OperationStatus;\n  @lroResult\n  success?: Widget;\n  @lroErrorResult\n  failure?: Error;\n}\n\n@route(\"/status/{id}\")\nop getStatus(@path id: string): StatusMonitor | ErrorResult;\n\n@pollingOperation(getStatus) // sets the status monitor for the operation\nop repairWidget is StandardResourceOperations.LongRUnningResourceAction<Widget, WidgetRepairRequest>;\n```\n\nWe would expect `getLroMetadata` to return the foillowing data for this operation:\n\n```typescript\n{\n  envelopeResult: StatusMonitor, // the return value of getStatus\n  logicalResult: Widget; // The `result` field in the StatusMonitor\n  logicalPath: \"success\",\n  finalStateVia: \"operation-location\",\n  statusMonitorStep: {\n    target: {\n      kind: \"link\"\n      location: \"ResponseHeader\",\n      property: operationLocation\n    }\n  },\n  pollingInfo: {\n    resultProperty: StatusMonitor.success,\n    errorProperty: StatusMonitor.failure,\n    terminationStatus: {\n      property: StatusMonitor.result,\n      succeededState: [\"Succeeded\"],\n      canceledState [\"Canceled\"],\n      failedState: [\"Failed\"],\n    }\n  }\n}\n```\n\n#### Example 3 - Link to StatusMonitor in the `location` header\n\nIn this example, the operation returns a `location` header with a link to the Status Monitor instead of the recommended `Operation-Location` header\n\n```tsp\n@lroStatus\nenum OperationStatus {\n  Running,\n  Succeeded,\n  Canceled,\n  Failed,\n}\n\nmodel StatusMonitor {\n  status: OperationStatus;\n  result?: Widget;\n  error?: Error;\n}\n\n@route(\"/status/{id}\")\nop getStatus(@path id: string): StatusMonitor | ErrorResult;\n\nalias RepairAccepted = {\n  @statusCode _: 202;\n\n  @pollingLocation // this marks the response property or header that will contain a link to the Status Monitor\n  @header\n  location?: ResourceLocation;\n};\n\n@pollingOperation(getStatus)\n@action(\"repairWidget\")\n@post\nop repairWidget is Azure.Core.Foundations.Operation<\n  InstanceKeysOf<Widget> & WidgetRepairRequest,\n  RepairAccepted\n>;\n```\n\nWe would expect `getLroMetadata` to return the foillowing data for this operation:\n\n```typescript\n{\n  envelopeResult: StatusMonitor, // the return value of getStatus\n  logicalResult: Widget; // The `result` field in the StatusMonitor\n  logicalPath: \"result\",\n  finalStateVia: \"location\",\n  statusMonitorStep: {\n    target: {\n      kind: \"link\"\n      location: \"ResponseHeader\",\n      property: location\n    }\n  },\n  pollingInfo: {\n    resultProperty: StatusMonitor.result,\n    errorProperty: StatusMonitor.error,\n    terminationStatus: {\n      property: StatusMonitor.result,\n      succeededState: [\"Succeeded\"],\n      canceledState [\"Canceled\"],\n      failedState: [\"Failed\"],\n    }\n  }\n}\n```\n\n#### Example 4 - Link to StatusMonitor in the `Azure-AsyncOperation` header\n\nIn this example, the operation returns a `Azure-AsyncOperation` header with a link to the Status Monitor instead of the recommended `Operation-Location` header\n\n```tsp\n@lroStatus\nenum OperationStatus {\n  Running,\n  Succeeded,\n  Canceled,\n  Failed,\n}\n\nmodel StatusMonitor {\n  status: OperationStatus;\n  result?: Widget;\n  error?: Error;\n}\n\n@route(\"/status/{id}\")\nop getStatus(@path id: string): StatusMonitor | ErrorResult;\n\nalias RepairAccepted = {\n  @statusCode _: 202;\n\n  @pollingLocation // this marks the response property or header that will contain a link to the Status Monitor\n  @header(\"Azure-AsyncOperation\")\n  azureAsyncOperation?: string;\n};\n\n@pollingOperation(getStatus)\n@action(\"repairWidget\")\n@result\n@post\nop repairWidget is Azure.Core.Foundations.Operation<\n  InstanceKeysOf<Widget> & WidgetRepairRequest,\n  RepairAccepted\n>;\n```\n\nWe would expect `getLroMetadata` to return the foillowing data for this operation:\n\n```typescript\n{\n  envelopeResult: StatusMonitor, // the return value of getStatus\n  logicalResult: Widget; // The `result` field in the StatusMonitor\n  logicalPath: \"result\",\n  finalStateVia: \"azure-async-operation\",\n  statusMonitorStep: {\n    target: {\n      kind: \"link\"\n      location: \"ResponseHeader\",\n      property: azureAsyncOperation\n    }\n  },\n  pollingInfo: {\n    resultProperty: StatusMonitor.result,\n    errorProperty: StatusMonitor.error,\n    terminationStatus: {\n      property: StatusMonitor.result,\n      succeededState: [\"Succeeded\"],\n      canceledState [\"Canceled\"],\n      failedState: [\"Failed\"],\n    }\n  }\n}\n```\n\n#### Example 5 - Link to StatusMonitor in the `Azure-AsyncOperation` header and final link\n\nIn this example, the operation returns a link to the Status Monitor (in `Azure-AsyncOperation`) **and** a link to the final result (in `location`).\n\n```tsp\n@lroStatus\nenum OperationStatus {\n  Running,\n  Succeeded,\n  Canceled,\n  Failed,\n}\n\nmodel StatusMonitor {\n  status: OperationStatus;\n}\n\n@route(\"/status/{id}\")\nop getStatus(@path id: string): StatusMonitor | ErrorResult;\n\nalias RepairAccepted = {\n  @statusCode _: 202;\n\n  @pollingLocation // this marks the response property or header that will contain a link to the Status Monitor\n  @header(\"Azure-AsyncOperation\")\n  azureAsyncOperation?: string;\n\n  @finalLocation // this marks the response property or header that will contain a link to the final result\n  @header\n  location?: string;\n};\n\n@pollingOperation(getStatus)\n@finalOperation(getWidget)\n@action(\"repairWidget\")\n@result\n@post\nop repairWidget is Azure.Core.Foundations.Operation<\n  InstanceKeysOf<Widget> & WidgetRepairRequest,\n  RepairAccepted\n>;\n\nop getWidget is StandardResourceOperations.ResourceRead<Widget>;\n```\n\nWe would expect `getLroMetadata` to return the foillowing data for this operation:\n\n```typescript\n{\n  envelopeResult: StatusMonitor, // the return value of getStatus\n  logicalResult: Widget; // The `result` field in the StatusMonitor\n  logicalPath: \"\",\n  finalStateVia: \"location\",\n  statusMonitorStep: {\n    target: {\n      kind: \"link\"\n      location: \"ResponseHeader\",\n      property: azureAsyncOperation\n    }\n  },\n  finalStep: {\n    target: {\n      kind: \"link\"\n      location: \"ResponseHeader\",\n      property: location\n    }\n  },\n  pollingInfo: {\n    resultProperty: StatusMonitor.result,\n    errorProperty: StatusMonitor.error,\n    terminationStatus: {\n      property: StatusMonitor.result,\n      succeededState: [\"Succeeded\"],\n      canceledState [\"Canceled\"],\n      failedState: [\"Failed\"],\n    }\n  }\n}\n```\n\n#### Example 6 - Calling GetStatusMonitor operation with non-standard parameters\n\nIn this example, the operation does not return a link, instead, the request parameters and response properties can be used to call the `getStatus` operation that returns the Status Monitor.\n\n```tsp\n@lroStatus\nenum OperationStatus {\n  Running,\n  Succeeded,\n  Canceled,\n  Failed,\n}\n\nmodel StatusMonitor {\n  status: OperationStatus;\n  result?: Widget;\n  error?: Error;\n}\n\n@route(\"/status/{id}\")\nop getStatus(@path widgetId: string): StatusMonitor | ErrorResult;\n\nalias RepairAccepted = {\n  @statusCode _: 202;\n};\n\n@pollingOperation(getStatus)\n@action(\"repairWidget\")\n@result\n@post\nop repairWidget(\n  @pollingOperationParameter(getStatus::parameters.widgetId) @path id: string,\n  body: WidgetRepairRequest,\n): RepairAccepted | ErrorResult;\n```\n\nWe would expect `getLroMetadata` to return the foillowing data for this operation:\n\n```typescript\n{\n  envelopeResult: StatusMonitor, // the return value of getStatus\n  logicalResult: Widget; // The `result` field in the StatusMonitor\n  logicalPath: \"result\",\n  finalStateVia: \"custom-operation-reference\",\n  statusMonitorStep: {\n    target: {\n      kind: \"reference\",\n      operation: getStatus,\n      parameters: {\n        widgetId: {\n          sourceKind: \"RequestParameter\",\n          source: repairWidget::parameters.id,\n          target: getStatus::parameters.widgetId\n        }\n      }\n    }\n  },\n  pollingInfo: {\n    resultProperty: StatusMonitor.result,\n    errorProperty: StatusMonitor.error,\n    terminationStatus: {\n      property: StatusMonitor.result,\n      succeededState: [\"Succeeded\"],\n      canceledState [\"Canceled\"],\n      failedState: [\"Failed\"],\n    }\n  }\n}\n```\n", "file_path": "../../docs\\howtos\\Azure Core\\long-running-operations.md", "link_to_file": "file://../../docs\\howtos\\Azure Core\\long-running-operations.md"}, {"file_content": "import Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\n# How to generate DPG\n\nThis page documents how to build a Data-Plane SDK from your TYPESPEC specification. For an overview of the whole process from initial API design to shipping SDKs, please visit https://aka.ms/azsdk/dpcodegen.\n\nThe best documentation on how to generate can found using those links:\n\n- https://aka.ms/azsdk/dpcodegen/net\n- https://aka.ms/azsdk/dpcodegen/python\n- https://aka.ms/azsdk/dpcodegen/java\n- https://aka.ms/azsdk/rlc/js\n\nAt a glance, add your emitter name to your `package.json`, along with the right options in the `tspconfig.yaml`.\n\n> **NOTE:** It may be complicated to generate all languages from the same folder at the moment as DPG and `typespec-azure-core` are still in preview.\n> It's recommended that you keep each `package.json` with a unique language emitter, as they are likely to conflict, until all emitters and `typespec-azure-core`\n> reach their first stable release.\n\nUpdate your `package.json` to contain dependencies on DPG language emitter(s). Don't forget to do `npm install` after an update of the file:\n\n```json\n{\n  \"name\": \"clients\",\n  \"dependencies\": {\n    \"@typespec/compiler\": \"latest\",\n    \"@typespec/rest\": \"latest\",\n    \"@typespec/http\": \"latest\",\n    \"@azure-tools/typespec-azure-core\": \"latest\",\n    \"@azure-tools/typespec-python\": \"latest\"\n  },\n  \"private\": true\n}\n```\n\nTo get your code emitting without having to pass several options on the command line, the easiest way is to update your `tspconfig.yaml` file:\n\n```yaml\nemit:\n  # Emitter for Swagger files with Autorest Extensions\n  - \"@azure-tools/typespec-autorest\"\n  # add \"@azure-tools/typespec-python\" to your package.json to generate Python code\n  - \"@azure-tools/typespec-python\"\n  # add \"@azure-tools/typespec-java\" to your package.json to generate Java code\n  - \"@azure-tools/typespec-java\"\n  # add \"@azure-tools/typespec-csharp\" to your package.json to generate C# code\n  - \"@azure-tools/typespec-csharp\"\n  # add \"@azure-tools/typespec-ts\" to your package.json to generate Typescript code\n  - \"@azure-tools/typespec-ts\"\noptions:\n  \"@azure-tools/typespec-python\":\n    package-name: azure-service-template\n```\n", "file_path": "../../docs\\howtos\\DataPlane Generation - DPG\\00howtogen.md", "link_to_file": "file://../../docs\\howtos\\DataPlane Generation - DPG\\00howtogen.md"}, {"file_content": "import Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\n# Setup for SDK customization\n\nThis page explains how to setup customization of DPG generator if necessary.\n\nYour `package.json` needs to contains a link to the customization library for dpg, called `typespec-client-generator-core`:\n\n```json\n{\n  \"name\": \"clients\",\n  \"dependencies\": {\n    \"@typespec/compiler\": \"latest\",\n    \"@typespec/http\": \"latest\",\n    \"@typespec/rest\": \"latest\",\n    \"@azure-tools/typespec-azure-core\": \"latest\",\n    \"@azure-tools/typespec-client-generator-core\": \"latest\"\n  },\n  \"private\": true\n}\n```\n\nCustomization should always be done in a file called `client.tsp` along with the `main.tsp`.\n\n```typespec\n// client.tsp\nimport \"./main.tsp\";\nimport \"@azure-tools/typespec-client-generator-core\";\n\nusing Azure.ClientGenerator.Core;\n\n// Your customizations here\n```\n\nOnce you have a customization file, you should compile with your client.tsp to get output that includes the customizations:\n\n```shell\ntsp compile client.tsp\n```\n", "file_path": "../../docs\\howtos\\DataPlane Generation - DPG\\01setup.md", "link_to_file": "file://../../docs\\howtos\\DataPlane Generation - DPG\\01setup.md"}, {"file_content": "import Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\n# Client hierarchy\n\nThis page documents how to customize clients in DPG. For an overview of the setup, please visit the previous page.\n\nJS RLC is not in the business of customization. it will ignore client.tsp and the follow scenarios will not have impact on the JS RLC user experiences. In this context, TypeScript part means JS DPG.\n\n## Default behaviors\n\nBy default, any language code generator will generate one single client named after the \"service\" name and concatenating `Client` at the end.\n\n<Tabs>\n<TabItem value=\"typespec\" label=\"TypeSpec\" default>\n\n```typespec\n@service\nnamespace PetStore;\n\n// Or\n@service({title: \"Pet Store\", version: \"v1\"})\nnamespace PetStoreNamespace;\n\n```\n\n</TabItem>\n\n<TabItem value=\"python\" label=\"Python\">\n\n```python\nfrom service_namespace import PetStoreClient\n\nclient = PetStoreClient()\n```\n\n</TabItem>\n<TabItem value=\"csharp\" label=\"CSharp\" >\n\n```csharp\nusing ServiceNamespace;\n\nPetStoreClient client = new PetStoreClient();\n```\n\n</TabItem>\n<TabItem value=\"typescript\" label=\"Typescript\" >\n\n```typescript\nimport { PetStoreClient } from \"@azure/package-name\";\nconst client = new PetStoreClient();\n```\n\n</TabItem>\n<TabItem value=\"java\" label=\"Java\" >\n\n```java\nPetStoreClient client = new PetStoreClientBuilder().buildClient();\n```\n\n</TabItem>\n</Tabs>\n\nAll operations will be available directly on this client. Code emitters do not try to infer any SDK structure from namespaces and interfaces name.\n\n## Customizations\n\nCustomization should always be done in a file called `client.tsp` along with the `main.tsp`. For this section, we will assume that you have service called `PetStore` in the namespace `PetStoreNamespace`, defining the two operations `feed` and `pet`.\n\n### Renaming the single client\n\nThis can be achieved with the augment operator and the DPG package\n\n<Tabs>\n<TabItem value=\"typespec\" label=\"TypeSpec\" default>\n\n```typespec\nimport \"./main.tsp\";\nimport \"@azure-tools/typespec-client-generator-core\";\n\nusing Azure.ClientGenerator.Core;\n\n@@client(PetStoreNamespace,\n  {\n    name: \"PetStoreGreatClient\",\n  }\n);\n```\n\n</TabItem>\n<TabItem value=\"python\" label=\"Python\">\n\n```python\nfrom service_namespace import PetStoreGreatClient\n\nclient = PetStoreGreatClient()\n```\n\n</TabItem>\n<TabItem value=\"csharp\" label=\"CSharp\" >\n\n```c#\nusing ServiceNamespace;\n\nPetStoreGreatClient client = new PetStoreGreatClient();\n```\n\n</TabItem>\n<TabItem value=\"typescript\" label=\"Typescript\" >\n\n```typescript\nimport { PetStoreGreatClient } from \"@azure/package-name\";\nconst client = new PetStoreGreatClient();\n```\n\n</TabItem>\n<TabItem value=\"java\" label=\"Java\" >\n\n```java\nPetStoreGreatClient client = new PetStoreGreatClientBuilder().buildClient();\n```\n\n</TabItem>\n</Tabs>\n\n### Splitting the operations in two clients\n\nTwo clients that separates the operations can be declared using the `client` decorator of `typespec-client-generator-core`:\n\n<Tabs>\n<TabItem value=\"typespec\" label=\"TypeSpec\" default>\n\n```typespec\nimport \"./main.tsp\"\nimport \"@azure-tools/typespec-client-generator-core\"\n\nusing Azure.ClientGenerator.Core;\n\nnamespace Customizations;   # The actual name here doesn't matter and is here for organization purposes only\n\n@client({\n  name: \"FoodClient\",\n  service: PetStoreNamespace\n})\ninterface Client1 {\n  feed is PetStoreNamespace.feed;\n}\n\n@client({\n  name: \"PetActionClient\",\n  service: PetStoreNamespace\n})\ninterface Client2 {\n  pet is PetStoreNamespace.pet;\n}\n```\n\n</TabItem>\n<TabItem value=\"python\" label=\"Python\">\n\n```python\nfrom service_namespace import FoodClient, PetActionClient\n\nclient1 = FoodClient()\nclient2 = PetActionClient()\n\nclient1.feed()\nclient2.pet()\n```\n\n</TabItem>\n<TabItem value=\"csharp\" label=\"CSharp\" >\n\n```csharp\nusing ServiceNamespace;\n\nPetActionClient petActionClient = new PetActionClient();\nFoodClient foodClient = new FoodClient();\n\npetActionClient.Pet();\nfoodClient.Feed();\n```\n\n</TabItem>\n<TabItem value=\"typescript\" label=\"Typescript\" >\n\n```typescript\nimport { FoodClient, PetActionClient } from \"@azure/package-name\";\nconst client1 = new PetActionClient();\nconst client2 = new FoodClient();\nclient1.pet();\nclient2.feed();\n```\n\n</TabItem>\n<TabItem value=\"java\" label=\"Java\" >\n\n```java\nFoodClient foodClient = new FoodClientBuilder().buildClient();\nPetActionClient petActionClient = new PetActionClientBuilder().buildClient();\n\nfoodClient.feed()\npetActionClient.pet()\n```\n\n</TabItem>\n</Tabs>\n\n### One client and two operation groups\n\nTwo clients that separates the operations can be declared using the `client` decorator and the `operationGroup` decorator of `typespec-client-generator-core`:\n\n<Tabs>\n<TabItem value=\"typespec\" label=\"TypeSpec\" default>\n\n```typespec\nimport \"./main.tsp\"\nimport \"@azure-tools/typespec-client-generator-core\"\n\nusing Azure.ClientGenerator.Core;\n\n@client({\n  name: \"PetStoreClient\",\n  service: PetStoreNamespace\n})\nnamespace Customizations;   # The actual name here doesn't matter and is here for organization purposes only\n\n@operationGroup\ninterface OpGrp1{\n  feed is PetStoreNamespace.feed\n}\n\n@operationGroup\ninterface OpGrp2 {\n  pet is PetStoreNamespace.pet\n}\n```\n\n</TabItem>\n<TabItem value=\"python\" label=\"Python\">\n\n```python\nfrom service_namespace import PetStoreClient\n\nclient = PetStoreClient()\n\nclient.op_grp_1.feed()\nclient.op_grp_2.pet()\n```\n\n</TabItem>\n<TabItem value=\"csharp\" label=\"CSharp\" >\n\n```csharp\nusing ServiceNamespace;\n\nPetStoreClient client = new PetStoreClient();\n\nclient.OpGrp1.Feed();\nclient.OpGrp2.Pet();\n```\n\n</TabItem>\n<TabItem value=\"typescript\" label=\"Typescript\" >\n\n```typescript\nimport { PetStoreClient } from \"@azure/package-name\";\nconst client = new PetStoreClient();\nclient.opGrp1.feed();\nclient.opGrp2.pet();\n```\n\n</TabItem>\n<TabItem value=\"java\" label=\"Java\" >\n\n```java\nPetStoreClientBuilder builder = new PetStoreClientBuilder();\n\nOpGrp1Client opGrp1Client = builder.buildOpGrp1Client();\nOpGrp2Client opGrp2Client = builder.buildOpGrp2Client();\n```\n\n</TabItem>\n</Tabs>\n\n### Splitting the operations in two clients and have clients in different namespace\n\nTwo clients that separates the operations can be declared using the `client` decorator of `typespec-client-generator-core`:\n\n<Tabs>\n<TabItem value=\"typespec\" label=\"TypeSpec\" default>\n\n```typespec\nimport \"./main.tsp\"\nimport \"@azure-tools/typespec-client-generator-core\"\n\nusing Azure.ClientGenerator.Core;\n\nnamespace Customizations;   # The actual name here doesn't matter and is here for organization purposes only\n\n@client({\n  name: \"FoodClient\",\n  service: PetStoreNamespace\n})\ninterface Client1 {\n  feed is PetStoreNamespace.feed\n}\n\n@client({\n  name: \"SubNamespace.PetActionClient\",\n  service: PetStoreNamespace\n})\ninterface Client2 {\n  pet is PetStoreNamespace.pet\n}\n```\n\n</TabItem>\n<TabItem value=\"python\" label=\"Python\">\n\n```python\nfrom service_namespace import FoodClient\nfrom service_namespace.sub_namespace import PetActionClient\n\nclient1 = FoodClient()\nclient2 = PetActionClient()\n\nclient1.feed()\nclient2.pet()\n```\n\n</TabItem>\n<TabItem value=\"csharp\" label=\"CSharp\" >\n\n```csharp\nusing ServiceNamespace;\nusing ServiceNamespace.SubNamespace;\n\nPetActionClient petActionClient = new PetActionClient();\nFoodClient foodClient = new FoodClient();\n\npetActionClient.Pet();\nfoodClient.Feed();\n```\n\n</TabItem>\n<TabItem value=\"typescript\" label=\"Typescript\" >\n\n```typescript\nimport { FoodClient, PetActionClient } from \"@azure/package-name\";\nconst client1 = new PetActionClient();\nconst client2 = new FoodClient();\nclient1.pet();\nclient2.feed();\n```\n\n</TabItem>\n<TabItem value=\"java\" label=\"Java\" >\n\n```java\nFIXME\n```\n\n</TabItem>\n</Tabs>\n", "file_path": "../../docs\\howtos\\DataPlane Generation - DPG\\02client.mdx", "link_to_file": "file://../../docs\\howtos\\DataPlane Generation - DPG\\02client.mdx"}, {"file_content": "import Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\n# Convenient method generation\n\nThis page documents how to customize method generations in DPG. For an overview of the setup, please visit the setup page.\n\n## Default behaviors\n\nBy default, any language code generator will generate both protocol methods and convenient methods.\n\n> **NOTE:** Python and Typescript don't have a separation of convenient/protocol methods.\n\n<Tabs>\n<TabItem value=\"typespec\" label=\"TypeSpec\" default>\n\n```typespec\nnamespace PetStoreNamespace;\n\n@doc(\"This is the input I need\")\n@resource(\"output\")\nmodel OutputModel {\n  @key\n  @doc(\"Id of this object\")\n  @visibility(\"read\")\n  name: string;\n}\n\n@doc(\"Read my resource\")\nop GetModel is ResourceRead<OutputModel>;\n```\n\n</TabItem>\n\n<TabItem value=\"python\" label=\"Python\">\n\n```python\nclass OutputModel:\n  name: str = rest_field(readonly=True)\nresponse: OutputModel = client.get(name=\"name\")\nFIXME\n```\n\n</TabItem>\n<TabItem value=\"csharp\" label=\"CSharp\" >\n\n```csharp\nFIXME\n```\n\n</TabItem>\n<TabItem value=\"typescript\" label=\"Typescript\" >\n\n```typescript\ninterface OutputModel {\n  name: string;\n}\n\nconst model: OutputModel = await client.path(\"/petStore/model/{name}\").get();\n```\n\n</TabItem>\n<TabItem value=\"java\" label=\"Java\" >\n\n```java\nFIXME\n```\n\n</TabItem>\n</Tabs>\n\n## Customizations\n\nThe detailed generation configuration of protocol and/or convenient methods that can be done:\n\nAs emitters global parameters:\n\n- `generate-protocol-methods`: boolean flag to shift the entire generation for the process (`true` by default)\n- `generate-convenience-methods`: boolean flag to shift the entire generation for the process (`true` by default)\n\nTo set global emitters parameters, read the documentation of [emitters configuration](https://microsoft.github.io/typespec/introduction/configuration#configuration-file).\n\nFor fine tuning, the set of decorators `@protocolAPI` and `@convenientAPI` can be used. They take a required boolean as parameter.\n\n### Shifting the generation of protocol and convenience on and off\n\nThis can be achieved with the augment operator and the DPG package\n\n<Tabs>\n<TabItem value=\"typespec\" label=\"TypeSpec\" default>\n\n```typespec\nimport \"./main.tsp\";\nimport \"@azure-tools/typespec-client-generator-core\";\n\nusing Azure.ClientGenerator.Core;\n\n@@convenientAPI(PetStoreNamespace.GetModel, false);\n```\n\n</TabItem>\n<TabItem value=\"python\" label=\"Python\">\n\n```python\n# Python do not change behavior based on protocolAPI or convenientAPI\n```\n\n</TabItem>\n<TabItem value=\"csharp\" label=\"CSharp\" >\n\n```c#\nFIXME\n```\n\n</TabItem>\n<TabItem value=\"typescript\" label=\"Typescript\" >\n\n```typescript\n// Typescript do not change behavior based on protocolAPI or convenientAPI\n```\n\n</TabItem>\n<TabItem value=\"java\" label=\"Java\" >\n\n```java\nFIXME\n```\n\n</TabItem>\n</Tabs>\n\n### Make methods private/internal\n\nSometimes it may be useful to still generate the method, but to make it private, so it can be re-used by a manual code wrapper.\n\n<Tabs>\n<TabItem value=\"typespec\" label=\"TypeSpec\" default>\n\n```typespec\nimport \"./main.tsp\";\nimport \"@azure-tools/typespec-client-generator-core\";\n\nusing Azure.ClientGenerator.Core;\n\n@@internal(PetStoreNamespace.GetModel);\n```\n\n</TabItem>\n<TabItem value=\"python\" label=\"Python\">\n\n```python\nclass _GetModel:\n  ...\n# FIXME\n```\n\n</TabItem>\n<TabItem value=\"csharp\" label=\"CSharp\" >\n\n```csharp\nFIXME\n```\n\n</TabItem>\n<TabItem value=\"typescript\" label=\"Typescript\" >\n\n```typescript\n// Typescript do not change behavior based on protocolAPI or convenientAPI\n```\n\n</TabItem>\n<TabItem value=\"java\" label=\"Java\" >\n\n```java\nFIXME\n```\n\n</TabItem>\n</Tabs>\n", "file_path": "../../docs\\howtos\\DataPlane Generation - DPG\\03convenient.mdx", "link_to_file": "file://../../docs\\howtos\\DataPlane Generation - DPG\\03convenient.mdx"}, {"file_content": "import Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\n\n# Client renaming\n\nThis page documents how to customize names for client generations in DPG. For an overview of the setup, please visit the setup page.\n\n## Default behaviors\n\nBy default, any language code generator will assume the TYPESPEC name is the client. For clarity, generators do not attempt to do any auto-magic rename.\n\n> **NOTE:** While names are not transformed, they will be adapted to what is idiomatic of the language (Python snake_case, etc.).\n\n<Tabs>\n<TabItem value=\"typespec\" label=\"TypeSpec\" default>\n\n```typespec\nnamespace PetStoreNamespace;\n\n@doc(\"This is the input I need\")\n@resource(\"input\")\nmodel InputModel {\n  @key\n  @doc(\"Id of this object\")\n  @visibility(\"read\")\n  name: string;\n}\n\n@doc(\"Read my resource\")\nop GetModel is ResourceRead<InputModel>;\n```\n\n</TabItem>\n\n<TabItem value=\"python\" label=\"Python\">\n\n```python\nclass OutputModel:\n  name: str = rest_field(readonly=True)\n\nresponse: OutputModel = client.get(name=\"name\")\nFIXME\n```\n\n</TabItem>\n<TabItem value=\"csharp\" label=\"CSharp\" >\n\n```csharp\nFIXME\n```\n\n</TabItem>\n<TabItem value=\"typescript\" label=\"Typescript\" >\n\n```typescript\ninterface InputModel {\n  name: string;\n}\n\nconst model: InputModel = await client.path(\"/petStore/model/{name}\").get();\n```\n\n</TabItem>\n<TabItem value=\"java\" label=\"Java\" >\n\n```java\nFIXME\n```\n\n</TabItem>\n</Tabs>\n\n## Customizations\n\n### Model names\n\nRenames in the context of models can be done on the model name and the attribute name. [Renames have a target](https://microsoft.github.io/typespec/standard-library/projected-names#known-targets):\n\n- `client` means that all client will use that name\n- `csharp`, `javascript`, `python`, `java` means you target this specific language\n\nLanguage target takes priority over `client` target.\n\n> **NOTE:** As model name do not get serialized as JSON, sometimes the best choice is to rename the main TYPESPEC for clarity. Talk to your DPG contact is you're unsure\n> if you should rename the model in the main TYPESPEC or customize it.\n\n<Tabs>\n<TabItem value=\"typespec\" label=\"TypeSpec\" default>\n\n```typespec\nimport \"./main.tsp\";\nimport \"@azure-tools/typespec-client-generator-core\";\n\nusing Azure.ClientGenerator.Core;\n\n@@projectedName(InputModel, \"client\", \"InputOptions\"); // Use InputOptions as a base name in clients\n@@projectedName(InputModel, \"csharp\", \"ParameterOptions\"); // Prefer a different name for C# only\n\n@@projectedName(InputModel.name, \"python\", \"input_name\"); // Python may need a different to be idiomatic\n```\n\n</TabItem>\n<TabItem value=\"python\" label=\"Python\">\n\n```python\nclass OutputOptions:\n  output_name: str = rest_field(rest_name=\"name\", readonly=True)\nFIXME\n```\n\n</TabItem>\n<TabItem value=\"csharp\" label=\"CSharp\" >\n\n```c#\nFIXME\n```\n\n</TabItem>\n<TabItem value=\"typescript\" label=\"Typescript\" >\n\n```typescript\n// Typescript do not change behavior based on protocolAPI or convenientAPI\n```\n\n</TabItem>\n<TabItem value=\"java\" label=\"Java\" >\n\n```java\nFIXME\n```\n\n</TabItem>\n</Tabs>\n\n### Rename operations and parameters\n\n<Tabs>\n<TabItem value=\"typespec\" label=\"TypeSpec\" default>\n\n```typespec\nimport \"./main.tsp\";\nimport \"@azure-tools/typespec-client-generator-core\";\n\nusing Azure.ClientGenerator.Core;\n\n@@projectedName(GetModel, \"client\", \"ReadModel\"); // Use InputOptions as a base name in clients\n@@projectedName(GetModel, \"python\", \"GetComputedModel\"); // Note that Python will still snake_case it\n```\n\n</TabItem>\n<TabItem value=\"python\" label=\"Python\">\n\n```python\nclient.get_computed_model()\n# FIXME\n```\n\n</TabItem>\n<TabItem value=\"csharp\" label=\"CSharp\" >\n\n```csharp\nFIXME\n```\n\n</TabItem>\n<TabItem value=\"typescript\" label=\"Typescript\" >\n\n```typescript\n// Typescript do not change behavior based on protocolAPI or convenientAPI\n```\n\n</TabItem>\n<TabItem value=\"java\" label=\"Java\" >\n\n```java\nFIXME\n```\n\n</TabItem>\n</Tabs>\n\n## Implementation\n\n### Order of Operations\n\nFor consistency when generating code, the order in which projections are applied is important. Code emitters should apply projections in the following order.\n\n#### Over-the-Wire JSON Names\n\nFor determining the final name of a TypeSpec entity when sent over-the-wire in JSON:\n\n1. Run the `#target(\"json\")` projection\n2. Run the `#customTarget(\"json\")` projection, if it exists\n3. Apply the `@projectedName` decorator using the `getProjectedName` helper method.\n\n#### Client SDK Names\n\nFor determining the final name of a TypeSpec entity when used in a client SDK (e.g. Python):\n\n1. Determine the name based on the client target:\n   1. Run the `#target(\"client\")` projection\n   1. Run the `#customTarget(\"client\")` projection, if it exists\n   1. Apply the `@projectedName` decorator using the `getProjectedName` helper method.\n1. Determine the name based on the language target:\n   1. Run the `#target(\"python\")` projection\n   1. Run the `#customTarget(\"python\")` projection, if it exists\n   1. Apply the `@projectedName` decorator using the `getProjectedName` helper method.\n1. If the language target name is different from the client target name, use the language target name. Otherwise, use the client name.\n1. For names based on language target projections, do not alter the casing. For names based on the client target projections, apply casing heuristics appropriate for the language (for example, snake case, Pascal case, etc.).\n", "file_path": "../../docs\\howtos\\DataPlane Generation - DPG\\04renaming.mdx", "link_to_file": "file://../../docs\\howtos\\DataPlane Generation - DPG\\04renaming.mdx"}, {"file_content": "# Using Build Pipelines with TypeSpec\n\nThis doc will help you get started with using TypeSpec in your build pipelines in your own repository. [See here for more how to use in the azure-rest-api-specs repo](./checking-in-api-specs-guide.md)\n\n## Table of Contents\n\n1. [Introduction](#introduction)\n1. [Azure DevOps Pipelines](#azure-devops-pipelines)\n\n## Introduction\n\n### Dependencies\n\nIn order to build TypeSpec in your build pipeline, you will need to ensure that the following are available or are automatically installed by your project:\n\n1. NodeJS 18.x LTS (Recommended)\n2. TypeSpec compilation tools (via npm package)\n\n## Azure DevOps Pipelines\n\nDepending on your project, you may need to add NodeJS and install NPM packages for TypeSpec.\nThe following Azure Devops Pipeline tasks can be modified and added to your pipeline yaml file if you do not already utilize NodeJS in your project.\n\n```yaml\n# Install NodeJS\n- task: NodeTool@0\n  inputs:\n    versionSpec: \"18.x\" # Node 18 LTS is recommended.\n    checkLatest: false\n\n# Install dependencies\n- script: npm install\n  workingDir: path/to/typespec/project # This is where package.json lives for your TypeSpec project\n\n# Build\n- script: npx tsp compile .\n  workingDir: path/to/typespec/project # This is where package.json lives for your TypeSpec project\n```\n\nThis is sufficient if you are building via a csproj file which triggers the tsp compile and finds the tsp compiler itself.\n\nYou may also need to add additional steps to compile your typespec files separately. An example of a basic pipeline is provided below.\n\n### Example Pipeline Configuration\n\nNote: This example assumes that your TypeSpec folder is at the root of your repository.\n\n```yaml\ntrigger:\n  - main\npool:\n  vmImage: ubuntu-latest\nsteps:\n  - task: NodeTool@0\n    inputs:\n      versionSpec: \"18.17.0\"\n  - script: npm install\n  - script: npx tsp compile .\n  - task: PublishPipelineArtifact@1\n    displayName: Publish TypeSpec Output Folder\n    inputs:\n      targetPath: \"tsp-output\"\n      artifact: \"tsp-output\"\n      publishLocation: \"pipeline\"\n```\n", "file_path": "../../docs\\howtos\\rest-api-publish\\buildpipelines.md", "link_to_file": "file://../../docs\\howtos\\rest-api-publish\\buildpipelines.md"}, {"file_content": "# Checking in typespec and generated OpenAPI to azure-rest-api-specs repo\n\nSee documentation on the azure-rest-api-specs repo https://github.com/Azure/azure-rest-api-specs/blob/main/documentation/Getting-started-with-TypeSpec-specifications.md\n", "file_path": "../../docs\\howtos\\rest-api-publish\\checking-in-api-specs-guide.md", "link_to_file": "file://../../docs\\howtos\\rest-api-publish\\checking-in-api-specs-guide.md"}, {"file_content": "# Emitter configurations\n\nTBA\n", "file_path": "../../docs\\howtos\\TypeSpec\\emitter-configurations.md", "link_to_file": "file://../../docs\\howtos\\TypeSpec\\emitter-configurations.md"}, {"file_content": "---\ntitle: \"Data types\"\ntoc_min_heading_level: 2\ntoc_max_heading_level: 3\n---\n\n# Data types\n\n## Azure.Core\n\n### `AadOauth2Auth` {#Azure.Core.AadOauth2Auth}\n\nAzure Active Directory OAuth2 Flow\n\n```typespec\nmodel Azure.Core.AadOauth2Auth<Scopes, AuthUrl, TokenUrl>\n```\n\n#### Template Parameters\n\n| Name     | Description                            |\n| -------- | -------------------------------------- |\n| Scopes   | A list of scopes the token applies to. |\n| AuthUrl  | The authorization URL.                 |\n| TokenUrl | The token URL.                         |\n\n### `AadTokenAuthFlow` {#Azure.Core.AadTokenAuthFlow}\n\nAzure Active Directory (AAD) Token Authentication Flow\n\n```typespec\nmodel Azure.Core.AadTokenAuthFlow<Scopes, AuthUrl, TokenUrl>\n```\n\n#### Template Parameters\n\n| Name     | Description                            |\n| -------- | -------------------------------------- |\n| Scopes   | A list of scopes the token applies to. |\n| AuthUrl  | The authorization URL.                 |\n| TokenUrl | The token URL.                         |\n\n### `AzureApiKeyAuthentication` {#Azure.Core.AzureApiKeyAuthentication}\n\nAzure API Key Authentication using the \"Ocp-Apim-Subscription-Key\" hea\n\n```typespec\nmodel Azure.Core.AzureApiKeyAuthentication\n```\n\n### `ClientRequestIdHeader` {#Azure.Core.ClientRequestIdHeader}\n\nProvides the 'x-ms-client-request-id' header to enable request correlation in requests and responses.\n\n```typespec\nmodel Azure.Core.ClientRequestIdHeader\n```\n\n### `ConditionalRequestHeaders` {#Azure.Core.ConditionalRequestHeaders}\n\nProvides the 'If-\\*' headers to enable conditional (cached) responses\n\n```typespec\nmodel Azure.Core.ConditionalRequestHeaders\n```\n\n### `EtagProperty` {#Azure.Core.EtagProperty}\n\nProvides the 'ETag' field to enable conditional (cached) requests. This model can be spread\ninto responses and item models to convey the ETag when it cannot simply conveyed in a header.\n\n```typespec\nmodel Azure.Core.EtagProperty\n```\n\n### `EtagResponseEnvelope` {#Azure.Core.EtagResponseEnvelope}\n\nProvides the 'ETag' header to enable conditional (cached) requests\n\n```typespec\nmodel Azure.Core.EtagResponseEnvelope\n```\n\n### `ExpandQueryParameter` {#Azure.Core.ExpandQueryParameter}\n\nProvides the standard 'expand' query parameter for list operations.\n\n```typespec\nmodel Azure.Core.ExpandQueryParameter\n```\n\n### `FilterQueryParameter` {#Azure.Core.FilterQueryParameter}\n\nProvides the standard 'filter' query parameter for list operations.\n\n```typespec\nmodel Azure.Core.FilterQueryParameter\n```\n\n### `MaxPageSizeQueryParameter` {#Azure.Core.MaxPageSizeQueryParameter}\n\nProvides the standard 'maxpagesize' query parameter for list operations.\n\n```typespec\nmodel Azure.Core.MaxPageSizeQueryParameter\n```\n\n### `OrderByQueryParameter` {#Azure.Core.OrderByQueryParameter}\n\nProvides the standard 'orderby' query parameter for list operations.\n\n```typespec\nmodel Azure.Core.OrderByQueryParameter\n```\n\n### `Page` {#Azure.Core.Page}\n\nDescribes a page of resource object.\n\n```typespec\nmodel Azure.Core.Page<TResource>\n```\n\n#### Template Parameters\n\n| Name      | Description        |\n| --------- | ------------------ |\n| TResource | The resource type. |\n\n### `RepeatabilityRequestHeaders` {#Azure.Core.RepeatabilityRequestHeaders}\n\nProvides the 'Repeatability-\\*' headers to enable repeatable requests.\n\n```typespec\nmodel Azure.Core.RepeatabilityRequestHeaders\n```\n\n### `RepeatabilityResponseHeaders` {#Azure.Core.RepeatabilityResponseHeaders}\n\nProvides the 'Repeatability-\\*' headers to enable repeatable requests.\n\n```typespec\nmodel Azure.Core.RepeatabilityResponseHeaders\n```\n\n### `RequestIdResponseHeader` {#Azure.Core.RequestIdResponseHeader}\n\nProvides the 'x-ms-request-id' header to enable request correlation in responses.\n\n```typespec\nmodel Azure.Core.RequestIdResponseHeader\n```\n\n### `RequestParameter` {#Azure.Core.RequestParameter}\n\nDefines a property as a request parameter.\n\n```typespec\nmodel Azure.Core.RequestParameter<T>\n```\n\n#### Template Parameters\n\n| Name | Description         |\n| ---- | ------------------- |\n| T    | The parameter name. |\n\n### `ResourceOperationStatus` {#Azure.Core.ResourceOperationStatus}\n\n```typespec\nmodel Azure.Core.ResourceOperationStatus<TResource, TStatusResult, TStatusError>\n```\n\n#### Template Parameters\n\n| Name          | Description                                                                                       |\n| ------------- | ------------------------------------------------------------------------------------------------- |\n| TResource     | The resource type.                                                                                |\n| TStatusResult | Model describing the status result object. If not specified, the default is the resource type.    |\n| TStatusError  | Model describing the status error object. If not specified, the default is the Foundations.Error. |\n\n### `ResponseProperty` {#Azure.Core.ResponseProperty}\n\nDefines a property as a response header.\n\n```typespec\nmodel Azure.Core.ResponseProperty<T>\n```\n\n#### Template Parameters\n\n| Name | Description      |\n| ---- | ---------------- |\n| T    | The header name. |\n\n### `SelectQueryParameter` {#Azure.Core.SelectQueryParameter}\n\nProvides the standard 'select' query parameter for list operations.\n\n```typespec\nmodel Azure.Core.SelectQueryParameter\n```\n\n### `SkipQueryParameter` {#Azure.Core.SkipQueryParameter}\n\nProvides the standard 'skip' query parameter for list operations.\n\n```typespec\nmodel Azure.Core.SkipQueryParameter\n```\n\n### `StandardListQueryParameters` {#Azure.Core.StandardListQueryParameters}\n\nProvides the most common query parameters for list operations.\n\n```typespec\nmodel Azure.Core.StandardListQueryParameters\n```\n\n### `TopQueryParameter` {#Azure.Core.TopQueryParameter}\n\nProvides the standard 'top' query parameter for list operations.\n\n```typespec\nmodel Azure.Core.TopQueryParameter\n```\n\n### `Versions` {#Azure.Core.Versions}\n\nSupported versions of Azure.Core TypeSpec building blocks.\n\n```typespec\nenum Azure.Core.Versions\n```\n\n### `eTag` {#Azure.Core.eTag}\n\nThe ETag (or entity tag) HTTP response header is an identifier for a specific version of a resource.\nIt lets caches be more efficient and save bandwidth, as a web server does not need to resend a full response if the content was not changed.\n\nIt is a string of ASCII characters placed between double quotes, like \"675af34563dc-tr34\".\n\n```typespec\nscalar Azure.Core.eTag\n```\n\n#### Examples\n\n##### In `ETag` header\n\n```\nETag: \"675af34563dc-tr34\"\n```\n\n### `ipV4Address` {#Azure.Core.ipV4Address}\n\nRepresent an IP V4 address serialized as a string.\n\nIt is formatted as four 8-bit fields separated by periods.\n\n```typespec\nscalar Azure.Core.ipV4Address\n```\n\n#### Examples\n\n```\n129.144.50.56\n```\n\n### `ipV6Address` {#Azure.Core.ipV6Address}\n\nRepresent an IP V6 address serialized as a string.\n\nIt is formatted as eight hex decimal values(16-bit) between 0 and FFFF separated by colon. (i.e. `y:y:y:y:y:y:y:y`)\n\n```typespec\nscalar Azure.Core.ipV6Address\n```\n\n#### Examples\n\n```\n2001:db8:3333:4444:CCCC:DDDD:EEEE:FFFF\n```\n\n### `uuid` {#Azure.Core.uuid}\n\nUniversally Unique Identifier\n\n```typespec\nscalar Azure.Core.uuid\n```\n\n#### Examples\n\n```\n123e4567-e89b-12d3-a456-426614174000\n```\n\n## Azure.Core.Foundations\n\n### `ApiVersionParameter` {#Azure.Core.Foundations.ApiVersionParameter}\n\nThe ApiVersion query parameter.\n\n```typespec\nmodel Azure.Core.Foundations.ApiVersionParameter\n```\n\n### `CollectionKeysOf` {#Azure.Core.Foundations.CollectionKeysOf}\n\nA model containing the collection keys of the provided resource's parent resource.\n\n```typespec\nmodel Azure.Core.Foundations.CollectionKeysOf<TResource>\n```\n\n#### Template Parameters\n\n| Name      | Description               |\n| --------- | ------------------------- |\n| TResource | The type of the resource. |\n\n### `CreateableAndUpdateableProperties` {#Azure.Core.Foundations.CreateableAndUpdateableProperties}\n\nCollection of properties from a resource that are visible to create or update scopes.\n\n```typespec\nmodel Azure.Core.Foundations.CreateableAndUpdateableProperties<TResource>\n```\n\n#### Template Parameters\n\n| Name      | Description               |\n| --------- | ------------------------- |\n| TResource | The type of the resource. |\n\n### `CustomizationFields` {#Azure.Core.Foundations.CustomizationFields}\n\nThe expected shape of model types passed to the TCustom parameter of operation signatures.\n\n```typespec\nmodel Azure.Core.Foundations.CustomizationFields\n```\n\n### `CustomPage` {#Azure.Core.Foundations.CustomPage}\n\nA model describing a customized page of resources.\n\n```typespec\nmodel Azure.Core.Foundations.CustomPage<TResource, Traits>\n```\n\n#### Template Parameters\n\n| Name      | Description                     |\n| --------- | ------------------------------- |\n| TResource | The type of the resource.       |\n| Traits    | Traits which apply to the page. |\n\n### `CustomParameters` {#Azure.Core.Foundations.CustomParameters}\n\nA model describing a set of custom request parameters.\n\n```typespec\nmodel Azure.Core.Foundations.CustomParameters<TCustom>\n```\n\n#### Template Parameters\n\n| Name    | Description                                     |\n| ------- | ----------------------------------------------- |\n| TCustom | An object describing custom request parameters. |\n\n### `CustomResponseFields` {#Azure.Core.Foundations.CustomResponseFields}\n\nA model describing a set of custom response properties.\n\n```typespec\nmodel Azure.Core.Foundations.CustomResponseFields<TCustom>\n```\n\n#### Template Parameters\n\n| Name    | Description                                      |\n| ------- | ------------------------------------------------ |\n| TCustom | An object describing custom response properties. |\n\n### `Error` {#Azure.Core.Foundations.Error}\n\nThe error object.\n\n```typespec\nmodel Azure.Core.Foundations.Error\n```\n\n### `ErrorResponse` {#Azure.Core.Foundations.ErrorResponse}\n\nA response containing error details.\n\n```typespec\nmodel Azure.Core.Foundations.ErrorResponse\n```\n\n### `ErrorResponseBase` {#Azure.Core.Foundations.ErrorResponseBase}\n\nA response containing error details.\n\n```typespec\nmodel Azure.Core.Foundations.ErrorResponseBase<TError>\n```\n\n#### Template Parameters\n\n| Name   | Description                   |\n| ------ | ----------------------------- |\n| TError | The type of the error object. |\n\n### `InnerError` {#Azure.Core.Foundations.InnerError}\n\nAn object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.\n\n```typespec\nmodel Azure.Core.Foundations.InnerError\n```\n\n### `ItemKeysOf` {#Azure.Core.Foundations.ItemKeysOf}\n\nA model containing the keys of the provided resource.\n\n```typespec\nmodel Azure.Core.Foundations.ItemKeysOf<TResource>\n```\n\n#### Template Parameters\n\n| Name      | Description               |\n| --------- | ------------------------- |\n| TResource | The type of the resource. |\n\n### `LocationOfCreatedResourceResponse` {#Azure.Core.Foundations.LocationOfCreatedResourceResponse}\n\nResponse describing the location of a created resource.\n\n```typespec\nmodel Azure.Core.Foundations.LocationOfCreatedResourceResponse<T>\n```\n\n#### Template Parameters\n\n| Name | Description                       |\n| ---- | --------------------------------- |\n| T    | The type of the created resource. |\n\n### `LocationOfCreatedResourceWithServiceProvidedNameResponse` {#Azure.Core.Foundations.LocationOfCreatedResourceWithServiceProvidedNameResponse}\n\nResponse describing the location of a resource created with a service-provided name.\n\n```typespec\nmodel Azure.Core.Foundations.LocationOfCreatedResourceWithServiceProvidedNameResponse<T>\n```\n\n#### Template Parameters\n\n| Name | Description                       |\n| ---- | --------------------------------- |\n| T    | The type of the created resource. |\n\n### `LongRunningStatusLocation` {#Azure.Core.Foundations.LongRunningStatusLocation}\n\nMetadata for long running operation status monitor locations.\n\n```typespec\nmodel Azure.Core.Foundations.LongRunningStatusLocation<TStatusResult>\n```\n\n#### Template Parameters\n\n| Name          | Description                              |\n| ------------- | ---------------------------------------- |\n| TStatusResult | The type of the operation status result. |\n\n### `OperationStatus` {#Azure.Core.Foundations.OperationStatus}\n\nProvides status details for long running operations.\n\n```typespec\nmodel Azure.Core.Foundations.OperationStatus<TStatusResult, TStatusError>\n```\n\n#### Template Parameters\n\n| Name          | Description                                                                         |\n| ------------- | ----------------------------------------------------------------------------------- |\n| TStatusResult | The type of the operation status result.                                            |\n| TStatusError  | The type of the operation status error. If not provided, the default error is used. |\n\n### `ResourceBody` {#Azure.Core.Foundations.ResourceBody}\n\nConveys the resource instance to an operation as a request body.\n\n```typespec\nmodel Azure.Core.Foundations.ResourceBody<T>\n```\n\n#### Template Parameters\n\n| Name | Description                        |\n| ---- | ---------------------------------- |\n| T    | The type of the resource instance. |\n\n### `ResourceCreateOrReplaceModel` {#Azure.Core.Foundations.ResourceCreateOrReplaceModel}\n\nVersion of a model for a create or replace operation which only includes updateable properties.\n\n```typespec\nmodel Azure.Core.Foundations.ResourceCreateOrReplaceModel<TResource>\n```\n\n#### Template Parameters\n\n| Name      | Description               |\n| --------- | ------------------------- |\n| TResource | The type of the resource. |\n\n### `ResourceCreateOrUpdateModel` {#Azure.Core.Foundations.ResourceCreateOrUpdateModel}\n\nVersion of a model for a create or update operation which only includes updateable properties.\n\n```typespec\nmodel Azure.Core.Foundations.ResourceCreateOrUpdateModel<TResource>\n```\n\n#### Template Parameters\n\n| Name      | Description               |\n| --------- | ------------------------- |\n| TResource | The type of the resource. |\n\n### `ResourceUpdateModel` {#Azure.Core.Foundations.ResourceUpdateModel}\n\nVersion of a model for an update operation which only includes updateable properties.\n\n```typespec\nmodel Azure.Core.Foundations.ResourceUpdateModel<TResource>\n```\n\n#### Template Parameters\n\n| Name      | Description               |\n| --------- | ------------------------- |\n| TResource | The type of the resource. |\n\n### `RetryAfterHeader` {#Azure.Core.Foundations.RetryAfterHeader}\n\nThe retry-after envelope.\n\n```typespec\nmodel Azure.Core.Foundations.RetryAfterHeader\n```\n\n### `OperationState` {#Azure.Core.Foundations.OperationState}\n\nEnum describing allowed operation states.\n\n```typespec\nenum Azure.Core.Foundations.OperationState\n```\n\n## Azure.Core.Traits\n\n### `ListQueryParametersTrait` {#Azure.Core.Traits.ListQueryParametersTrait}\n\nDeclares a trait that is applied as a query parameter for list operations.\n\n```typespec\nmodel Azure.Core.Traits.ListQueryParametersTrait<TParams>\n```\n\n#### Template Parameters\n\n| Name    | Description                             |\n| ------- | --------------------------------------- |\n| TParams | Object describing the query parameters. |\n\n### `NoClientRequestId` {#Azure.Core.Traits.NoClientRequestId}\n\nIndicates that the service or operation does not support clientRequestId headers.\n\n```typespec\nmodel Azure.Core.Traits.NoClientRequestId\n```\n\n### `NoConditionalRequests` {#Azure.Core.Traits.NoConditionalRequests}\n\nIndicates that the service or operation does not support conditional requests.\n\n```typespec\nmodel Azure.Core.Traits.NoConditionalRequests\n```\n\n### `NoRepeatableRequests` {#Azure.Core.Traits.NoRepeatableRequests}\n\nIndicates that the service or operation does not support repeatable requests.\n\n```typespec\nmodel Azure.Core.Traits.NoRepeatableRequests\n```\n\n### `QueryParametersTrait` {#Azure.Core.Traits.QueryParametersTrait}\n\nDeclares a trait that is applied as a query parameter.\n\n```typespec\nmodel Azure.Core.Traits.QueryParametersTrait<TParams, Contexts>\n```\n\n#### Template Parameters\n\n| Name     | Description                                    |\n| -------- | ---------------------------------------------- |\n| TParams  | The name of the query parameter.               |\n| Contexts | The contexts in which the trait is applicable. |\n\n### `RequestHeadersTrait` {#Azure.Core.Traits.RequestHeadersTrait}\n\nDeclares a trait that is applied as a request header parameter.\n\n```typespec\nmodel Azure.Core.Traits.RequestHeadersTrait<THeaders, Contexts>\n```\n\n#### Template Parameters\n\n| Name     | Description                                      |\n| -------- | ------------------------------------------------ |\n| THeaders | Object describing the request header parameters. |\n| Contexts | The contexts in which the trait is applicable.   |\n\n### `ResponseHeadersTrait` {#Azure.Core.Traits.ResponseHeadersTrait}\n\nDeclares a trait that is applied as a response header parameter.\n\n```typespec\nmodel Azure.Core.Traits.ResponseHeadersTrait<THeaders, Contexts>\n```\n\n#### Template Parameters\n\n| Name     | Description                                       |\n| -------- | ------------------------------------------------- |\n| THeaders | Object describing the response header parameters. |\n| Contexts | The contexts in which the trait is applicable.    |\n\n### `SupportsClientRequestId` {#Azure.Core.Traits.SupportsClientRequestId}\n\nProvides clientRequestId headers for requests and responses.\n\n```typespec\nmodel Azure.Core.Traits.SupportsClientRequestId<TVersionAdded>\n```\n\n#### Template Parameters\n\n| Name          | Description                                                                                                        |\n| ------------- | ------------------------------------------------------------------------------------------------------------------ |\n| TVersionAdded | The version when the trait was added to the specification.<br />Leave this empty if the trait is always supported. |\n\n### `SupportsConditionalRequests` {#Azure.Core.Traits.SupportsConditionalRequests}\n\nProvides conditional request headers for requests and ETag headers for responses.\n\n```typespec\nmodel Azure.Core.Traits.SupportsConditionalRequests<TVersionAdded>\n```\n\n#### Template Parameters\n\n| Name          | Description                                                                                                        |\n| ------------- | ------------------------------------------------------------------------------------------------------------------ |\n| TVersionAdded | The version when the trait was added to the specification.<br />Leave this empty if the trait is always supported. |\n\n### `SupportsRepeatableRequests` {#Azure.Core.Traits.SupportsRepeatableRequests}\n\nProvides repeatable request headers for requests and responses.\n\n```typespec\nmodel Azure.Core.Traits.SupportsRepeatableRequests<TVersionAdded>\n```\n\n#### Template Parameters\n\n| Name          | Description                                                                                                        |\n| ------------- | ------------------------------------------------------------------------------------------------------------------ |\n| TVersionAdded | The version when the trait was added to the specification.<br />Leave this empty if the trait is always supported. |\n\n### `TraitOverride` {#Azure.Core.Traits.TraitOverride}\n\nUsed to override a trait.\n\n```typespec\nmodel Azure.Core.Traits.TraitOverride<Trait>\n```\n\n#### Template Parameters\n\n| Name  | Description            |\n| ----- | ---------------------- |\n| Trait | The trait to override. |\n\n### `VersionParameterTrait` {#Azure.Core.Traits.VersionParameterTrait}\n\nDeclares a version parameter trait.\n\n```typespec\nmodel Azure.Core.Traits.VersionParameterTrait<TVersionParameter>\n```\n\n#### Template Parameters\n\n| Name              | Description                        |\n| ----------------- | ---------------------------------- |\n| TVersionParameter | The type of the version parameter. |\n\n### `TraitContext` {#Azure.Core.Traits.TraitContext}\n\nEnumerates the standard trait contexts for Azure.Core operations.\n\n```typespec\nenum Azure.Core.Traits.TraitContext\n```\n\n### `TraitLocation` {#Azure.Core.Traits.TraitLocation}\n\nEnumerates the standard trait locations for Azure.Core operations.\n\n```typespec\nenum Azure.Core.Traits.TraitLocation\n```\n", "file_path": "../../docs\\libraries\\azure-core\\reference\\data-types.md", "link_to_file": "file://../../docs\\libraries\\azure-core\\reference\\data-types.md"}, {"file_content": "---\ntitle: \"Decorators\"\ntoc_min_heading_level: 2\ntoc_max_heading_level: 3\n---\n\n# Decorators\n\n## Azure.Core\n\n### `@finalLocation` {#@Azure.Core.finalLocation}\n\nIdentifies a ModelProperty as containing the final location for the operation result.\n\n```typespec\n@Azure.Core.finalLocation\n```\n\n#### Target\n\n`ModelProperty`\n\n#### Parameters\n\nNone\n\n### `@finalOperation` {#@Azure.Core.finalOperation}\n\nIdentifies that an operation is the final operation for an LRO.\n\n```typespec\n@Azure.Core.finalOperation(linkedOperation: Operation, parameters?: {})\n```\n\n#### Target\n\n`Operation`\n\n#### Parameters\n\n| Name            | Type        | Description                                                                                                         |\n| --------------- | ----------- | ------------------------------------------------------------------------------------------------------------------- |\n| linkedOperation | `Operation` | The linked Operation                                                                                                |\n| parameters      | `model {}`  | Map of `RequestParameter<T>` and/or `ResponseProperty<T>` that will<br />be passed to the linked operation request. |\n\n### `@fixed` {#@Azure.Core.fixed}\n\nMarks an Enum as being fixed since enums in Azure are\nassumed to be extensible.\n\n```typespec\n@Azure.Core.fixed\n```\n\n#### Target\n\n`Enum`\n\n#### Parameters\n\nNone\n\n### `@items` {#@Azure.Core.items}\n\nIdentifies the ModelProperty that contains the paged items. Can only be used on a Model marked with `@pagedResult`.\n\n```typespec\n@Azure.Core.items\n```\n\n#### Target\n\n`ModelProperty`\n\n#### Parameters\n\nNone\n\n### `@lroCanceled` {#@Azure.Core.lroCanceled}\n\nUsed for custom StatusMonitor implementation.\nIdentifies an EnumMember as a long-running \"Canceled\" terminal state.\n\n```typespec\n@Azure.Core.lroCanceled\n```\n\n#### Target\n\n`EnumMember`\n\n#### Parameters\n\nNone\n\n### `@lroErrorResult` {#@Azure.Core.lroErrorResult}\n\nUsed for custom StatusMonitor implementation.\nIdentifies a model property of a StatusMonitor as containing the result\nof a long-running operation that terminates unsuccessfully (Failed).\n\n```typespec\n@Azure.Core.lroErrorResult\n```\n\n#### Target\n\n`ModelProperty`\n\n#### Parameters\n\nNone\n\n### `@lroFailed` {#@Azure.Core.lroFailed}\n\nUsed for custom StatusMonitor implementation.\nIdentifies an enum member as a long-running \"Failed\" terminal state.\n\n```typespec\n@Azure.Core.lroFailed\n```\n\n#### Target\n\n`EnumMember`\n\n#### Parameters\n\nNone\n\n### `@lroResult` {#@Azure.Core.lroResult}\n\nUsed for custom StatusMonitor implementation.\nIdentifies a model property of a StatusMonitor as containing the result\nof a long-running operation that terminates successfully (Succeeded).\n\n```typespec\n@Azure.Core.lroResult\n```\n\n#### Target\n\n`ModelProperty`\n\n#### Parameters\n\nNone\n\n### `@lroStatus` {#@Azure.Core.lroStatus}\n\nUsed for custom StatusMonitor implementation.\nIdentifies an Enum or ModelProperty as containing long-running operation\nstatus.\n\n```typespec\n@Azure.Core.lroStatus\n```\n\n#### Target\n\n`union Enum | ModelProperty`\n\n#### Parameters\n\nNone\n\n### `@lroSucceeded` {#@Azure.Core.lroSucceeded}\n\nUsed for custom StatusMonitor implementation.\nIdentifies an EnumMember as a long-running \"Succeeded\" terminal state.\n\n```typespec\n@Azure.Core.lroSucceeded\n```\n\n#### Target\n\n`EnumMember`\n\n#### Parameters\n\nNone\n\n### `@nextLink` {#@Azure.Core.nextLink}\n\nIdentifies a ModelProperty that contains the next link value. Can only be used on a Model marked with `@pagedResult`.\n\n```typespec\n@Azure.Core.nextLink\n```\n\n#### Target\n\n`ModelProperty`\n\n#### Parameters\n\nNone\n\n### `@nextPageOperation` {#@Azure.Core.nextPageOperation}\n\nIdentifies that an operation is used to retrieve the next page for paged operations.\n\n```typespec\n@Azure.Core.nextPageOperation(linkedOperation: Operation, parameters?: {})\n```\n\n#### Target\n\n`Operation`\n\n#### Parameters\n\n| Name            | Type        | Description                                                                                                         |\n| --------------- | ----------- | ------------------------------------------------------------------------------------------------------------------- |\n| linkedOperation | `Operation` | The linked Operation                                                                                                |\n| parameters      | `model {}`  | Map of `RequestParameter<T>` and/or `ResponseProperty<T>` that will<br />be passed to the linked operation request. |\n\n### `@operationLink` {#@Azure.Core.operationLink}\n\nIdentifies an operation that is linked to the target operation.\n\n```typespec\n@Azure.Core.operationLink(linkedOperation: Operation, linkType: valueof string, parameters?: {})\n```\n\n#### Target\n\n`Operation`\n\n#### Parameters\n\n| Name            | Type                    | Description                                                                                                         |\n| --------------- | ----------------------- | ------------------------------------------------------------------------------------------------------------------- |\n| linkedOperation | `Operation`             | The linked Operation                                                                                                |\n| linkType        | `valueof scalar string` | A string indicating the role of the linked operation                                                                |\n| parameters      | `model {}`              | Map of `RequestParameter<T>` and/or `ResponseProperty<T>` that will<br />be passed to the linked operation request. |\n\n### `@pagedResult` {#@Azure.Core.pagedResult}\n\nMarks a Model as a paged collection.\n\n```typespec\n@Azure.Core.pagedResult\n```\n\n#### Target\n\n`Model`\n\n#### Parameters\n\nNone\n\n### `@pollingLocation` {#@Azure.Core.pollingLocation}\n\nIdentifies a model property as containing the location to poll for operation state.\n\n```typespec\n@Azure.Core.pollingLocation\n```\n\n#### Target\n\n`ModelProperty`\n\n#### Parameters\n\nNone\n\n### `@pollingOperation` {#@Azure.Core.pollingOperation}\n\nIdentifies that an operation is a polling operation for an LRO.\n\n```typespec\n@Azure.Core.pollingOperation(linkedOperation: Operation, parameters?: {})\n```\n\n#### Target\n\n`Operation`\n\n#### Parameters\n\n| Name            | Type        | Description                                                                                                         |\n| --------------- | ----------- | ------------------------------------------------------------------------------------------------------------------- |\n| linkedOperation | `Operation` | The linked Operation                                                                                                |\n| parameters      | `model {}`  | Map of `RequestParameter<T>` and/or `ResponseProperty<T>` that will<br />be passed to the linked operation request. |\n\n### `@pollingOperationParameter` {#@Azure.Core.pollingOperationParameter}\n\nUsed to define how to call custom polling operations for long-running operations.\n\n```typespec\n@Azure.Core.pollingOperationParameter(targetParameter?: ModelProperty | string)\n```\n\n#### Target\n\n`ModelProperty`\n\n#### Parameters\n\n| Name            | Type                            | Description                                                                                                                                                                                        |\n| --------------- | ------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| targetParameter | `union ModelProperty \\| string` | A reference to the polling operation parameter this parameter<br />provides a value for, or the name of that parameter. The default value is the name of<br />the decorated parameter or property. |\n\n## Azure.Core.Foundations\n\n### `@omitKeyProperties` {#@Azure.Core.Foundations.omitKeyProperties}\n\nDeletes any key properties from the model.\n\n```typespec\n@Azure.Core.Foundations.omitKeyProperties\n```\n\n#### Target\n\n`Model`\n\n#### Parameters\n\nNone\n\n### `@requestParameter` {#@Azure.Core.Foundations.requestParameter}\n\nIdentifies a property on a request model that serves as a linked operation parameter.\n\n```typespec\n@Azure.Core.Foundations.requestParameter(name: valueof string)\n```\n\n#### Target\n\n`Model`\n\n#### Parameters\n\n| Name | Type                    | Description                 |\n| ---- | ----------------------- | --------------------------- |\n| name | `valueof scalar string` | Property name on the target |\n\n### `@responseProperty` {#@Azure.Core.Foundations.responseProperty}\n\nIdentifies a property on _all_ non-error response models that serve as a linked operation parameter.\n\n```typespec\n@Azure.Core.Foundations.responseProperty(name: valueof string)\n```\n\n#### Target\n\n`Model`\n\n#### Parameters\n\n| Name | Type                    | Description                 |\n| ---- | ----------------------- | --------------------------- |\n| name | `valueof scalar string` | Property name on the target |\n\n## Azure.Core.Traits\n\n### `@trait` {#@Azure.Core.Traits.trait}\n\n`@trait` marks a model type as representing a 'trait' and performs basic validation\nchecks.\n\n```typespec\n@Azure.Core.Traits.trait(traitName?: valueof string)\n```\n\n#### Target\n\nThe model type to mark as a trait.\n`(intrinsic) unknown`\n\n#### Parameters\n\n| Name      | Type                    | Description                                                                                        |\n| --------- | ----------------------- | -------------------------------------------------------------------------------------------------- |\n| traitName | `valueof scalar string` | An optional name to uniquely identify the trait. If unspecified,<br />the model type name is used. |\n\n### `@traitAdded` {#@Azure.Core.Traits.traitAdded}\n\nSets the version for when the trait was added to the specification. Can be applied\nto either a trait model type or its envelope property.\n\n```typespec\n@Azure.Core.Traits.traitAdded(addedVersion: EnumMember | null)\n```\n\n#### Target\n\n`union Model | ModelProperty`\n\n#### Parameters\n\n| Name         | Type                       | Description                                       |\n| ------------ | -------------------------- | ------------------------------------------------- |\n| addedVersion | `union EnumMember \\| null` | The enum member representing the service version. |\n\n### `@traitContext` {#@Azure.Core.Traits.traitContext}\n\n`@traitContext` sets the applicable context for a trait on its envelope property.\n\n```typespec\n@Azure.Core.Traits.traitContext(contexts: EnumMember | Union | unknown)\n```\n\n#### Target\n\nThe trait envelope property where the context will be applied.\n`ModelProperty`\n\n#### Parameters\n\n| Name     | Type                                   | Description                                                                                |\n| -------- | -------------------------------------- | ------------------------------------------------------------------------------------------ |\n| contexts | `union EnumMember \\| Union \\| unknown` | An enum member or union of enum members representing the trait's<br />applicable contexts. |\n\n### `@traitLocation` {#@Azure.Core.Traits.traitLocation}\n\n`@traitLocation` sets the applicable location for a trait on its envelope property.\n\n```typespec\n@Azure.Core.Traits.traitLocation(contexts: EnumMember)\n```\n\n#### Target\n\nThe trait envelope property where the context will be applied.\n`ModelProperty`\n\n#### Parameters\n\n| Name     | Type         | Description                                                                                |\n| -------- | ------------ | ------------------------------------------------------------------------------------------ |\n| contexts | `EnumMember` | An enum member or union of enum members representing the trait's<br />applicable contexts. |\n", "file_path": "../../docs\\libraries\\azure-core\\reference\\decorators.md", "link_to_file": "file://../../docs\\libraries\\azure-core\\reference\\decorators.md"}, {"file_content": "---\ntitle: Overview\nsidebar_position: 0\ntoc_min_heading_level: 2\ntoc_max_heading_level: 3\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n# Overview\n\nTypeSpec Azure Core library\n\n## Install\n\n<Tabs>\n<TabItem value=\"spec\" label=\"In a spec\" default>\n\n```bash\nnpm install @azure-tools/typespec-azure-core\n```\n\n</TabItem>\n<TabItem value=\"library\" label=\"In a library\" default>\n\n```bash\nnpm install --save-peer @azure-tools/typespec-azure-core\n```\n\n</TabItem>\n</Tabs>\n\n## Azure\n\n## Azure.Core\n\n### Decorators\n\n- [`@finalLocation`](./decorators.md#@Azure.Core.finalLocation)\n- [`@finalOperation`](./decorators.md#@Azure.Core.finalOperation)\n- [`@fixed`](./decorators.md#@Azure.Core.fixed)\n- [`@items`](./decorators.md#@Azure.Core.items)\n- [`@lroCanceled`](./decorators.md#@Azure.Core.lroCanceled)\n- [`@lroErrorResult`](./decorators.md#@Azure.Core.lroErrorResult)\n- [`@lroFailed`](./decorators.md#@Azure.Core.lroFailed)\n- [`@lroResult`](./decorators.md#@Azure.Core.lroResult)\n- [`@lroStatus`](./decorators.md#@Azure.Core.lroStatus)\n- [`@lroSucceeded`](./decorators.md#@Azure.Core.lroSucceeded)\n- [`@nextLink`](./decorators.md#@Azure.Core.nextLink)\n- [`@nextPageOperation`](./decorators.md#@Azure.Core.nextPageOperation)\n- [`@operationLink`](./decorators.md#@Azure.Core.operationLink)\n- [`@pagedResult`](./decorators.md#@Azure.Core.pagedResult)\n- [`@pollingLocation`](./decorators.md#@Azure.Core.pollingLocation)\n- [`@pollingOperation`](./decorators.md#@Azure.Core.pollingOperation)\n- [`@pollingOperationParameter`](./decorators.md#@Azure.Core.pollingOperationParameter)\n\n### Interfaces\n\n- [`ResourceOperations`](./interfaces.md#Azure.Core.ResourceOperations)\n\n### Operations\n\n- [`GetResourceOperationStatus`](./interfaces.md#Azure.Core.GetResourceOperationStatus)\n- [`LongRunningResourceAction`](./interfaces.md#Azure.Core.LongRunningResourceAction)\n- [`LongRunningResourceCollectionAction`](./interfaces.md#Azure.Core.LongRunningResourceCollectionAction)\n- [`LongRunningResourceCreateOrReplace`](./interfaces.md#Azure.Core.LongRunningResourceCreateOrReplace)\n- [`LongRunningResourceCreateOrUpdate`](./interfaces.md#Azure.Core.LongRunningResourceCreateOrUpdate)\n- [`LongRunningResourceCreateWithServiceProvidedName`](./interfaces.md#Azure.Core.LongRunningResourceCreateWithServiceProvidedName)\n- [`LongRunningResourceDelete`](./interfaces.md#Azure.Core.LongRunningResourceDelete)\n- [`LongRunningRpcOperation`](./interfaces.md#Azure.Core.LongRunningRpcOperation)\n- [`ResourceAction`](./interfaces.md#Azure.Core.ResourceAction)\n- [`ResourceCollectionAction`](./interfaces.md#Azure.Core.ResourceCollectionAction)\n- [`ResourceCreateOrReplace`](./interfaces.md#Azure.Core.ResourceCreateOrReplace)\n- [`ResourceCreateOrUpdate`](./interfaces.md#Azure.Core.ResourceCreateOrUpdate)\n- [`ResourceCreateWithServiceProvidedName`](./interfaces.md#Azure.Core.ResourceCreateWithServiceProvidedName)\n- [`ResourceDelete`](./interfaces.md#Azure.Core.ResourceDelete)\n- [`ResourceList`](./interfaces.md#Azure.Core.ResourceList)\n- [`ResourceRead`](./interfaces.md#Azure.Core.ResourceRead)\n- [`ResourceUpdate`](./interfaces.md#Azure.Core.ResourceUpdate)\n- [`RpcOperation`](./interfaces.md#Azure.Core.RpcOperation)\n\n### Models\n\n- [`AadOauth2Auth`](./data-types.md#Azure.Core.AadOauth2Auth)\n- [`AadTokenAuthFlow`](./data-types.md#Azure.Core.AadTokenAuthFlow)\n- [`AzureApiKeyAuthentication`](./data-types.md#Azure.Core.AzureApiKeyAuthentication)\n- [`ClientRequestIdHeader`](./data-types.md#Azure.Core.ClientRequestIdHeader)\n- [`ConditionalRequestHeaders`](./data-types.md#Azure.Core.ConditionalRequestHeaders)\n- [`EtagProperty`](./data-types.md#Azure.Core.EtagProperty)\n- [`EtagResponseEnvelope`](./data-types.md#Azure.Core.EtagResponseEnvelope)\n- [`ExpandQueryParameter`](./data-types.md#Azure.Core.ExpandQueryParameter)\n- [`FilterQueryParameter`](./data-types.md#Azure.Core.FilterQueryParameter)\n- [`MaxPageSizeQueryParameter`](./data-types.md#Azure.Core.MaxPageSizeQueryParameter)\n- [`OrderByQueryParameter`](./data-types.md#Azure.Core.OrderByQueryParameter)\n- [`Page`](./data-types.md#Azure.Core.Page)\n- [`RepeatabilityRequestHeaders`](./data-types.md#Azure.Core.RepeatabilityRequestHeaders)\n- [`RepeatabilityResponseHeaders`](./data-types.md#Azure.Core.RepeatabilityResponseHeaders)\n- [`RequestIdResponseHeader`](./data-types.md#Azure.Core.RequestIdResponseHeader)\n- [`RequestParameter`](./data-types.md#Azure.Core.RequestParameter)\n- [`ResourceOperationStatus`](./data-types.md#Azure.Core.ResourceOperationStatus)\n- [`ResponseProperty`](./data-types.md#Azure.Core.ResponseProperty)\n- [`SelectQueryParameter`](./data-types.md#Azure.Core.SelectQueryParameter)\n- [`SkipQueryParameter`](./data-types.md#Azure.Core.SkipQueryParameter)\n- [`StandardListQueryParameters`](./data-types.md#Azure.Core.StandardListQueryParameters)\n- [`TopQueryParameter`](./data-types.md#Azure.Core.TopQueryParameter)\n\n## Azure.Core.Foundations\n\n### Decorators\n\n- [`@omitKeyProperties`](./decorators.md#@Azure.Core.Foundations.omitKeyProperties)\n- [`@requestParameter`](./decorators.md#@Azure.Core.Foundations.requestParameter)\n- [`@responseProperty`](./decorators.md#@Azure.Core.Foundations.responseProperty)\n\n### Operations\n\n- [`GetOperationStatus`](./interfaces.md#Azure.Core.Foundations.GetOperationStatus)\n- [`LongRunningOperation`](./interfaces.md#Azure.Core.Foundations.LongRunningOperation)\n- [`LongRunningResourceUpdate`](./interfaces.md#Azure.Core.Foundations.LongRunningResourceUpdate)\n- [`NonPagedResourceList`](./interfaces.md#Azure.Core.Foundations.NonPagedResourceList)\n- [`Operation`](./interfaces.md#Azure.Core.Foundations.Operation)\n- [`ResourceCollectionOperation`](./interfaces.md#Azure.Core.Foundations.ResourceCollectionOperation)\n- [`ResourceList`](./interfaces.md#Azure.Core.Foundations.ResourceList)\n- [`ResourceOperation`](./interfaces.md#Azure.Core.Foundations.ResourceOperation)\n\n### Models\n\n- [`ApiVersionParameter`](./data-types.md#Azure.Core.Foundations.ApiVersionParameter)\n- [`CollectionKeysOf`](./data-types.md#Azure.Core.Foundations.CollectionKeysOf)\n- [`CreateableAndUpdateableProperties`](./data-types.md#Azure.Core.Foundations.CreateableAndUpdateableProperties)\n- [`CustomizationFields`](./data-types.md#Azure.Core.Foundations.CustomizationFields)\n- [`CustomPage`](./data-types.md#Azure.Core.Foundations.CustomPage)\n- [`CustomParameters`](./data-types.md#Azure.Core.Foundations.CustomParameters)\n- [`CustomResponseFields`](./data-types.md#Azure.Core.Foundations.CustomResponseFields)\n- [`Error`](./data-types.md#Azure.Core.Foundations.Error)\n- [`ErrorResponse`](./data-types.md#Azure.Core.Foundations.ErrorResponse)\n- [`ErrorResponseBase`](./data-types.md#Azure.Core.Foundations.ErrorResponseBase)\n- [`InnerError`](./data-types.md#Azure.Core.Foundations.InnerError)\n- [`ItemKeysOf`](./data-types.md#Azure.Core.Foundations.ItemKeysOf)\n- [`LocationOfCreatedResourceResponse`](./data-types.md#Azure.Core.Foundations.LocationOfCreatedResourceResponse)\n- [`LocationOfCreatedResourceWithServiceProvidedNameResponse`](./data-types.md#Azure.Core.Foundations.LocationOfCreatedResourceWithServiceProvidedNameResponse)\n- [`LongRunningStatusLocation`](./data-types.md#Azure.Core.Foundations.LongRunningStatusLocation)\n- [`OperationStatus`](./data-types.md#Azure.Core.Foundations.OperationStatus)\n- [`ResourceBody`](./data-types.md#Azure.Core.Foundations.ResourceBody)\n- [`ResourceCreateOrReplaceModel`](./data-types.md#Azure.Core.Foundations.ResourceCreateOrReplaceModel)\n- [`ResourceCreateOrUpdateModel`](./data-types.md#Azure.Core.Foundations.ResourceCreateOrUpdateModel)\n- [`ResourceUpdateModel`](./data-types.md#Azure.Core.Foundations.ResourceUpdateModel)\n- [`RetryAfterHeader`](./data-types.md#Azure.Core.Foundations.RetryAfterHeader)\n\n## Azure.Core.Traits\n\n### Decorators\n\n- [`@trait`](./decorators.md#@Azure.Core.Traits.trait)\n- [`@traitAdded`](./decorators.md#@Azure.Core.Traits.traitAdded)\n- [`@traitContext`](./decorators.md#@Azure.Core.Traits.traitContext)\n- [`@traitLocation`](./decorators.md#@Azure.Core.Traits.traitLocation)\n\n### Models\n\n- [`ListQueryParametersTrait`](./data-types.md#Azure.Core.Traits.ListQueryParametersTrait)\n- [`NoClientRequestId`](./data-types.md#Azure.Core.Traits.NoClientRequestId)\n- [`NoConditionalRequests`](./data-types.md#Azure.Core.Traits.NoConditionalRequests)\n- [`NoRepeatableRequests`](./data-types.md#Azure.Core.Traits.NoRepeatableRequests)\n- [`QueryParametersTrait`](./data-types.md#Azure.Core.Traits.QueryParametersTrait)\n- [`RequestHeadersTrait`](./data-types.md#Azure.Core.Traits.RequestHeadersTrait)\n- [`ResponseHeadersTrait`](./data-types.md#Azure.Core.Traits.ResponseHeadersTrait)\n- [`SupportsClientRequestId`](./data-types.md#Azure.Core.Traits.SupportsClientRequestId)\n- [`SupportsConditionalRequests`](./data-types.md#Azure.Core.Traits.SupportsConditionalRequests)\n- [`SupportsRepeatableRequests`](./data-types.md#Azure.Core.Traits.SupportsRepeatableRequests)\n- [`TraitOverride`](./data-types.md#Azure.Core.Traits.TraitOverride)\n- [`VersionParameterTrait`](./data-types.md#Azure.Core.Traits.VersionParameterTrait)\n", "file_path": "../../docs\\libraries\\azure-core\\reference\\index.mdx", "link_to_file": "file://../../docs\\libraries\\azure-core\\reference\\index.mdx"}, {"file_content": "---\ntitle: \"Interfaces and Operations\"\ntoc_min_heading_level: 2\ntoc_max_heading_level: 3\n---\n\n# Interfaces and Operations\n\n## Azure.Core\n\n### `ResourceOperations` {#Azure.Core.ResourceOperations}\n\nInterface containing common resource operations.\n\n```typespec\ninterface Azure.Core.ResourceOperations<InterfaceTraits, TErrorResponse>\n```\n\n#### Template Parameters\n\n| Name            | Description                                                                             |\n| --------------- | --------------------------------------------------------------------------------------- |\n| InterfaceTraits | Traits applicable to the operations.                                                    |\n| TErrorResponse  | Error response of the operations. If not specified, the default error response is used. |\n\n#### `ResourceOperations.ResourceCreateOrReplace` {#Azure.Core.ResourceOperations.ResourceCreateOrReplace}\n\nCreate or replace operation template.\n\n```typespec\nop Azure.Core.ResourceOperations.ResourceCreateOrReplace(apiVersion: string, resource: TResource): (anonymous model) | (anonymous model) | TErrorResponse\n```\n\n##### Template Parameters\n\n| Name      | Description                                    |\n| --------- | ---------------------------------------------- |\n| TResource | Resource type.                                 |\n| Traits    | Object describing the traits of the operation. |\n\n#### `ResourceOperations.LongRunningResourceCreateOrReplace` {#Azure.Core.ResourceOperations.LongRunningResourceCreateOrReplace}\n\nLong-running resource create or replace operation template.\n\n```typespec\nop Azure.Core.ResourceOperations.LongRunningResourceCreateOrReplace(apiVersion: string, resource: TResource): (anonymous model) | (anonymous model) | TErrorResponse\n```\n\n##### Template Parameters\n\n| Name      | Description                                    |\n| --------- | ---------------------------------------------- |\n| TResource | Resource type.                                 |\n| Traits    | Object describing the traits of the operation. |\n\n#### `ResourceOperations.ResourceCreateOrUpdate` {#Azure.Core.ResourceOperations.ResourceCreateOrUpdate}\n\nCreate or update operation template.\n\n```typespec\nop Azure.Core.ResourceOperations.ResourceCreateOrUpdate(apiVersion: string, contentType: application/merge-patch+json, resource: TResource): (anonymous model) | (anonymous model) | TErrorResponse\n```\n\n##### Template Parameters\n\n| Name      | Description                                    |\n| --------- | ---------------------------------------------- |\n| TResource | Resource type.                                 |\n| Traits    | Object describing the traits of the operation. |\n\n#### `ResourceOperations.LongRunningResourceCreateOrUpdate` {#Azure.Core.ResourceOperations.LongRunningResourceCreateOrUpdate}\n\nLong-running resource create or update operation template.\n\n```typespec\nop Azure.Core.ResourceOperations.LongRunningResourceCreateOrUpdate(apiVersion: string, contentType: application/merge-patch+json, resource: TResource): (anonymous model) | (anonymous model) | TErrorResponse\n```\n\n##### Template Parameters\n\n| Name      | Description                                    |\n| --------- | ---------------------------------------------- |\n| TResource | Resource type.                                 |\n| Traits    | Object describing the traits of the operation. |\n\n#### `ResourceOperations.ResourceUpdate` {#Azure.Core.ResourceOperations.ResourceUpdate}\n\nResource update operation template.\n\n```typespec\nop Azure.Core.ResourceOperations.ResourceUpdate(apiVersion: string, contentType: application/merge-patch+json, resource: TResource): (anonymous model) | TErrorResponse\n```\n\n##### Template Parameters\n\n| Name      | Description                                    |\n| --------- | ---------------------------------------------- |\n| TResource | Resource type.                                 |\n| Traits    | Object describing the traits of the operation. |\n\n#### `ResourceOperations.ResourceCreateWithServiceProvidedName` {#Azure.Core.ResourceOperations.ResourceCreateWithServiceProvidedName}\n\nResource create with service-provided name operation template.\n\n```typespec\nop Azure.Core.ResourceOperations.ResourceCreateWithServiceProvidedName(apiVersion: string, resource: TResource): Azure.Core.(anonymous model) | TErrorResponse\n```\n\n##### Template Parameters\n\n| Name      | Description                                    |\n| --------- | ---------------------------------------------- |\n| TResource | Resource type.                                 |\n| Traits    | Object describing the traits of the operation. |\n\n#### `ResourceOperations.LongRunningResourceCreateWithServiceProvidedName` {#Azure.Core.ResourceOperations.LongRunningResourceCreateWithServiceProvidedName}\n\nLong-running resource create with service-provided name operation template.\n\n```typespec\nop Azure.Core.ResourceOperations.LongRunningResourceCreateWithServiceProvidedName(apiVersion: string, resource: TResource): Azure.Core.(anonymous model) | TErrorResponse\n```\n\n##### Template Parameters\n\n| Name      | Description                                    |\n| --------- | ---------------------------------------------- |\n| TResource | Resource type.                                 |\n| Traits    | Object describing the traits of the operation. |\n\n#### `ResourceOperations.ResourceRead` {#Azure.Core.ResourceOperations.ResourceRead}\n\nResource read operation template.\n\n```typespec\nop Azure.Core.ResourceOperations.ResourceRead(apiVersion: string): {} | TErrorResponse\n```\n\n##### Template Parameters\n\n| Name      | Description                                    |\n| --------- | ---------------------------------------------- |\n| TResource | Resource type.                                 |\n| Traits    | Object describing the traits of the operation. |\n\n#### `ResourceOperations.ResourceDelete` {#Azure.Core.ResourceOperations.ResourceDelete}\n\nResource delete operation template.\n\n```typespec\nop Azure.Core.ResourceOperations.ResourceDelete(apiVersion: string): Azure.Core.(anonymous model) | TErrorResponse\n```\n\n##### Template Parameters\n\n| Name      | Description                                    |\n| --------- | ---------------------------------------------- |\n| TResource | Resource type.                                 |\n| Traits    | Object describing the traits of the operation. |\n\n#### `ResourceOperations.LongRunningResourceDelete` {#Azure.Core.ResourceOperations.LongRunningResourceDelete}\n\nLong-running resource delete operation template.\n\n```typespec\nop Azure.Core.ResourceOperations.LongRunningResourceDelete(apiVersion: string): (anonymous model) | TErrorResponse\n```\n\n##### Template Parameters\n\n| Name      | Description                                    |\n| --------- | ---------------------------------------------- |\n| TResource | Resource type.                                 |\n| Traits    | Object describing the traits of the operation. |\n\n#### `ResourceOperations.ResourceList` {#Azure.Core.ResourceOperations.ResourceList}\n\nResource list operation template.\n\n```typespec\nop Azure.Core.ResourceOperations.ResourceList(apiVersion: string): Azure.Core.Foundations.CustomPage<TResource, Traits> | TErrorResponse\n```\n\n##### Template Parameters\n\n| Name      | Description                                    |\n| --------- | ---------------------------------------------- |\n| TResource | Resource type.                                 |\n| Traits    | Object describing the traits of the operation. |\n\n#### `ResourceOperations.ResourceAction` {#Azure.Core.ResourceOperations.ResourceAction}\n\nResource action operation template.\n\n```typespec\nop Azure.Core.ResourceOperations.ResourceAction(apiVersion: string): {} | TErrorResponse\n```\n\n##### Template Parameters\n\n| Name      | Description                                        |\n| --------- | -------------------------------------------------- |\n| TResource | Resource type.                                     |\n| TParams   | Object describing the parameters of the operation. |\n| TResponse | Object describing the response of the operation.   |\n| Traits    | Object describing the traits of the operation.     |\n\n#### `ResourceOperations.ResourceCollectionAction` {#Azure.Core.ResourceOperations.ResourceCollectionAction}\n\nResource collection action operation template.\n\n```typespec\nop Azure.Core.ResourceOperations.ResourceCollectionAction(apiVersion: string): {} | TErrorResponse\n```\n\n##### Template Parameters\n\n| Name      | Description                                        |\n| --------- | -------------------------------------------------- |\n| TResource | Resource type.                                     |\n| TParams   | Object describing the parameters of the operation. |\n| TResponse | Object describing the response of the operation.   |\n| Traits    | Object describing the traits of the operation.     |\n\n#### `ResourceOperations.LongRunningResourceAction` {#Azure.Core.ResourceOperations.LongRunningResourceAction}\n\nLong-running resource action operation template.\n\n```typespec\nop Azure.Core.ResourceOperations.LongRunningResourceAction(apiVersion: string): Azure.Core.(anonymous model) | TErrorResponse\n```\n\n##### Template Parameters\n\n| Name          | Description                                           |\n| ------------- | ----------------------------------------------------- |\n| TResource     | Resource type.                                        |\n| TParams       | Object describing the parameters of the operation.    |\n| TStatusResult | Object describing the status result of the operation. |\n| TStatusError  | Object describing the status error of the operation.  |\n| Traits        | Object describing the traits of the operation.        |\n\n#### `ResourceOperations.LongRunningResourceCollectionAction` {#Azure.Core.ResourceOperations.LongRunningResourceCollectionAction}\n\nLong-running resource collection action operation template.\n\n```typespec\nop Azure.Core.ResourceOperations.LongRunningResourceCollectionAction(apiVersion: string): Azure.Core.(anonymous model) | TErrorResponse\n```\n\n##### Template Parameters\n\n| Name          | Description                                           |\n| ------------- | ----------------------------------------------------- |\n| TResource     | Resource type.                                        |\n| TParams       | Object describing the parameters of the operation.    |\n| TStatusResult | Object describing the status result of the operation. |\n| TStatusError  | Object describing the status error of the operation.  |\n| Traits        | Object describing the traits of the operation.        |\n\n#### `ResourceOperations.GetResourceOperationStatus` {#Azure.Core.ResourceOperations.GetResourceOperationStatus}\n\nResource operation status operation template.\n\n```typespec\nop Azure.Core.ResourceOperations.GetResourceOperationStatus(apiVersion: string, operationId: string): Azure.Core.ResourceOperationStatus<TResource, TStatusResult, TStatusError> | TErrorResponse\n```\n\n##### Template Parameters\n\n| Name          | Description                                           |\n| ------------- | ----------------------------------------------------- |\n| TResource     | Resource type.                                        |\n| TStatusResult | Object describing the status result of the operation. |\n| TStatusError  | Object describing the status error of the operation.  |\n| Traits        | Object describing the traits of the operation.        |\n\n### `GetResourceOperationStatus` {#Azure.Core.GetResourceOperationStatus}\n\nOperation signature to retrieve a resource operation status.\n\n```typespec\nop Azure.Core.GetResourceOperationStatus(apiVersion: string, operationId: string): Azure.Core.ResourceOperationStatus<TResource, TStatusResult, TStatusError> | Azure.Core.Foundations.ErrorResponse\n```\n\n#### Template Parameters\n\n| Name          | Description                                                                                           |\n| ------------- | ----------------------------------------------------------------------------------------------------- |\n| TResource     | The type of the resource.                                                                             |\n| TStatusResult | Object describing the result of the status operation.                                                 |\n| TStatusError  | Object describing the error of the status operation. If not provided, the default error type is used. |\n| Traits        | Traits to apply to the operation.                                                                     |\n\n### `LongRunningResourceAction` {#Azure.Core.LongRunningResourceAction}\n\nDEPRECATED: Use `LongRunningResourceAction` from a `ResourceOperations` interface instance.\nThis can be done by instantiating your own version with the traits you want `alias Operations = Azure.Core.ResourceOperations<ServiceTraits>;`.\nSee https://azure.github.io/typespec-azure/docs/getstarted/azure-core/step05#defining-the-operation-interface for details on how to use.\n\nLong-running operation signature for a resource action.\n\n```typespec\nop Azure.Core.LongRunningResourceAction(apiVersion: string): Azure.Core.(anonymous model) | Azure.Core.Foundations.ErrorResponse\n```\n\n#### Template Parameters\n\n| Name          | Description                                                                                           |\n| ------------- | ----------------------------------------------------------------------------------------------------- |\n| TResource     | The type of the resource.                                                                             |\n| TParams       | Object describing the request parameters.                                                             |\n| TStatusResult | Object describing the result of the status operation.                                                 |\n| TStatusError  | Object describing the error of the status operation. If not provided, the default error type is used. |\n| Traits        | Traits to apply to the operation.                                                                     |\n\n### `LongRunningResourceCollectionAction` {#Azure.Core.LongRunningResourceCollectionAction}\n\nDEPRECATED: Use `LongRunningResourceCollectionAction` from a `ResourceOperations` interface instance.\nThis can be done by instantiating your own version with the traits you want `alias Operations = Azure.Core.ResourceOperations<ServiceTraits>;`.\nSee https://azure.github.io/typespec-azure/docs/getstarted/azure-core/step05#defining-the-operation-interface for details on how to use.\n\nLong-running operation signature for an action that applies to a collection of resources.\n\n```typespec\nop Azure.Core.LongRunningResourceCollectionAction(apiVersion: string): Azure.Core.(anonymous model) | Azure.Core.Foundations.ErrorResponse\n```\n\n#### Template Parameters\n\n| Name          | Description                                                                                           |\n| ------------- | ----------------------------------------------------------------------------------------------------- |\n| TResource     | The type of the resource.                                                                             |\n| TParams       | Object describing the request parameters.                                                             |\n| TStatusResult | Object describing the result of the status operation.                                                 |\n| TStatusError  | Object describing the error of the status operation. If not provided, the default error type is used. |\n| Traits        | Traits to apply to the operation.                                                                     |\n\n### `LongRunningResourceCreateOrReplace` {#Azure.Core.LongRunningResourceCreateOrReplace}\n\nDEPRECATED: Use `LongRunningResourceCreateOrReplace` from a `ResourceOperations` interface instance.\nThis can be done by instantiating your own version with the traits you want `alias Operations = Azure.Core.ResourceOperations<ServiceTraits>;`.\nSee https://azure.github.io/typespec-azure/docs/getstarted/azure-core/step05#defining-the-operation-interface for details on how to use.\n\nLong-running operation signature to create or replace a resource.\n\n```typespec\nop Azure.Core.LongRunningResourceCreateOrReplace(apiVersion: string, resource: TResource): (anonymous model) | (anonymous model) | Azure.Core.Foundations.ErrorResponse\n```\n\n#### Template Parameters\n\n| Name      | Description                       |\n| --------- | --------------------------------- |\n| TResource | The type of the resource.         |\n| Traits    | Traits to apply to the operation. |\n\n### `LongRunningResourceCreateOrUpdate` {#Azure.Core.LongRunningResourceCreateOrUpdate}\n\nDEPRECATED: Use `LongRunningResourceCreateOrUpdate` from a `ResourceOperations` interface instance.\nThis can be done by instantiating your own version with the traits you want `alias Operations = Azure.Core.ResourceOperations<ServiceTraits>;`.\nSee https://azure.github.io/typespec-azure/docs/getstarted/azure-core/step05#defining-the-operation-interface for details on how to use.\n\nLong-running operation signature to create or update a resource.\n\n```typespec\nop Azure.Core.LongRunningResourceCreateOrUpdate(apiVersion: string, contentType: application/merge-patch+json, resource: TResource): (anonymous model) | (anonymous model) | Azure.Core.Foundations.ErrorResponse\n```\n\n#### Template Parameters\n\n| Name      | Description                       |\n| --------- | --------------------------------- |\n| TResource | The type of the resource.         |\n| Traits    | Traits to apply to the operation. |\n\n### `LongRunningResourceCreateWithServiceProvidedName` {#Azure.Core.LongRunningResourceCreateWithServiceProvidedName}\n\nDEPRECATED: Use `LongRunningResourceCreateWithServiceProvidedName` from a `ResourceOperations` interface instance.\nThis can be done by instantiating your own version with the traits you want `alias Operations = Azure.Core.ResourceOperations<ServiceTraits>;`.\nSee https://azure.github.io/typespec-azure/docs/getstarted/azure-core/step05#defining-the-operation-interface for details on how to use.\n\nLong-running operation signature to create a resource with a service-provided name.\n\n```typespec\nop Azure.Core.LongRunningResourceCreateWithServiceProvidedName(apiVersion: string, resource: TResource): Azure.Core.(anonymous model) | Azure.Core.Foundations.ErrorResponse\n```\n\n#### Template Parameters\n\n| Name      | Description                       |\n| --------- | --------------------------------- |\n| TResource | The type of the resource.         |\n| Traits    | Traits to apply to the operation. |\n\n### `LongRunningResourceDelete` {#Azure.Core.LongRunningResourceDelete}\n\nDEPRECATED: Use `LongRunningResourceDelete` from a `ResourceOperations` interface instance.\nThis can be done by instantiating your own version with the traits you want `alias Operations = Azure.Core.ResourceOperations<ServiceTraits>;`.\nSee https://azure.github.io/typespec-azure/docs/getstarted/azure-core/step05#defining-the-operation-interface for details on how to use.\n\nLong-running operation signature to delete a resource.\n\n```typespec\nop Azure.Core.LongRunningResourceDelete(apiVersion: string): (anonymous model) | Azure.Core.Foundations.ErrorResponse\n```\n\n#### Template Parameters\n\n| Name      | Description                       |\n| --------- | --------------------------------- |\n| TResource | The type of the resource.         |\n| Traits    | Traits to apply to the operation. |\n\n### `LongRunningRpcOperation` {#Azure.Core.LongRunningRpcOperation}\n\nA long-running remote procedure call (RPC) operation.\n\n```typespec\nop Azure.Core.LongRunningRpcOperation(apiVersion: string): Azure.Core.(anonymous model) | TErrorResponse\n```\n\n#### Template Parameters\n\n| Name           | Description                                                                                                                                                                              |\n| -------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| TParams        | Object describing the parameters of the operation.                                                                                                                                       |\n| TResponse      | Object describing the response of the operation.                                                                                                                                         |\n| TStatusResult  | Object describing the status result of the operation.                                                                                                                                    |\n| TStatusError   | Error response of the status operation. If not specified, the default error response is used.                                                                                            |\n| Traits         | Object describing the traits of the operation.                                                                                                                                           |\n| TErrorResponse | Error response of the operation. If not specified, the default error response is used.                                                                                                   |\n| TraitContexts  | Trait contexts applicable to the operation. Defaults to `TraitContext.Undefined` which means that only traits that always apply will appear. Can specify multiple using the \\| operator. |\n\n### `ResourceAction` {#Azure.Core.ResourceAction}\n\nDEPRECATED: Use `ResourceAction` from a `ResourceOperations` interface instance.\nThis can be done by instantiating your own version with the traits you want `alias Operations = Azure.Core.ResourceOperations<ServiceTraits>;`.\nSee https://azure.github.io/typespec-azure/docs/getstarted/azure-core/step05#defining-the-operation-interface for details on how to use.\n\nOperation signature for a resource action.\n\n```typespec\nop Azure.Core.ResourceAction(apiVersion: string): {} | Azure.Core.Foundations.ErrorResponse\n```\n\n#### Template Parameters\n\n| Name      | Description                                |\n| --------- | ------------------------------------------ |\n| TResource | The type of the resource.                  |\n| TParams   | Object describing the request parameters.  |\n| TResponse | Object describing the response parameters. |\n| Traits    | Traits to apply to the operation.          |\n\n### `ResourceCollectionAction` {#Azure.Core.ResourceCollectionAction}\n\nDEPRECATED: Use `ResourceCollectionAction` from a `ResourceOperations` interface instance.\nThis can be done by instantiating your own version with the traits you want `alias Operations = Azure.Core.ResourceOperations<ServiceTraits>;`.\nSee https://azure.github.io/typespec-azure/docs/getstarted/azure-core/step05#defining-the-operation-interface for details on how to use.\n\nOperation signature for an action that applies to a collection of resources.\n\n```typespec\nop Azure.Core.ResourceCollectionAction(apiVersion: string): {} | Azure.Core.Foundations.ErrorResponse\n```\n\n#### Template Parameters\n\n| Name      | Description                                |\n| --------- | ------------------------------------------ |\n| TResource | The type of the resource.                  |\n| TParams   | Object describing the request parameters.  |\n| TResponse | Object describing the response parameters. |\n| Traits    | Traits to apply to the operation.          |\n\n### `ResourceCreateOrReplace` {#Azure.Core.ResourceCreateOrReplace}\n\nDEPRECATED: Use `ResourceCreateOrReplace` from a `ResourceOperations` interface instance.\nThis can be done by instantiating your own version with the traits you want `alias Operations = Azure.Core.ResourceOperations<ServiceTraits>;`.\nSee https://azure.github.io/typespec-azure/docs/getstarted/azure-core/step05#defining-the-operation-interface for details on how to use.\n\nOperation signature to create or replace a resource.\n\n```typespec\nop Azure.Core.ResourceCreateOrReplace(apiVersion: string, resource: TResource): (anonymous model) | (anonymous model) | Azure.Core.Foundations.ErrorResponse\n```\n\n#### Template Parameters\n\n| Name      | Description                       |\n| --------- | --------------------------------- |\n| TResource | The type of the resource.         |\n| Traits    | Traits to apply to the operation. |\n\n### `ResourceCreateOrUpdate` {#Azure.Core.ResourceCreateOrUpdate}\n\nDEPRECATED: Use `ResourceCreateOrUpdate` from a `ResourceOperations` interface instance.\nThis can be done by instantiating your own version with the traits you want `alias Operations = Azure.Core.ResourceOperations<ServiceTraits>;`.\nSee https://azure.github.io/typespec-azure/docs/getstarted/azure-core/step05#defining-the-operation-interface for details on how to use.\n\nOperation signature to create or update a resource.\n\n```typespec\nop Azure.Core.ResourceCreateOrUpdate(apiVersion: string, contentType: application/merge-patch+json, resource: TResource): (anonymous model) | (anonymous model) | Azure.Core.Foundations.ErrorResponse\n```\n\n#### Template Parameters\n\n| Name      | Description                       |\n| --------- | --------------------------------- |\n| TResource | The type of the resource.         |\n| Traits    | Traits to apply to the operation. |\n\n### `ResourceCreateWithServiceProvidedName` {#Azure.Core.ResourceCreateWithServiceProvidedName}\n\nDEPRECATED: Use `ResourceCreateWithServiceProvidedName` from a `ResourceOperations` interface instance.\nThis can be done by instantiating your own version with the traits you want `alias Operations = Azure.Core.ResourceOperations<ServiceTraits>;`.\nSee https://azure.github.io/typespec-azure/docs/getstarted/azure-core/step05#defining-the-operation-interface for details on how to use.\n\nOperation signature to synchronously create a resource with a service-provided name.\n\n```typespec\nop Azure.Core.ResourceCreateWithServiceProvidedName(apiVersion: string, resource: TResource): Azure.Core.(anonymous model) | Azure.Core.Foundations.ErrorResponse\n```\n\n#### Template Parameters\n\n| Name      | Description                       |\n| --------- | --------------------------------- |\n| TResource | The type of the resource.         |\n| Traits    | Traits to apply to the operation. |\n\n### `ResourceDelete` {#Azure.Core.ResourceDelete}\n\nDEPRECATED: Use `ResourceDelete` from a `ResourceOperations` interface instance.\nThis can be done by instantiating your own version with the traits you want `alias Operations = Azure.Core.ResourceOperations<ServiceTraits>;`.\nSee https://azure.github.io/typespec-azure/docs/getstarted/azure-core/step05#defining-the-operation-interface for details on how to use.\n\nOperation signature to delete a resource.\n\n```typespec\nop Azure.Core.ResourceDelete(apiVersion: string): Azure.Core.(anonymous model) | Azure.Core.Foundations.ErrorResponse\n```\n\n#### Template Parameters\n\n| Name      | Description                       |\n| --------- | --------------------------------- |\n| TResource | The type of the resource.         |\n| Traits    | Traits to apply to the operation. |\n\n### `ResourceList` {#Azure.Core.ResourceList}\n\nDEPRECATED: Use `ResourceList` from a `ResourceOperations` interface instance.\nThis can be done by instantiating your own version with the traits you want `alias Operations = Azure.Core.ResourceOperations<ServiceTraits>;`.\nSee https://azure.github.io/typespec-azure/docs/getstarted/azure-core/step05#defining-the-operation-interface for details on how to use.\n\nOperation signature to list resources in a paginated way.\n\n```typespec\nop Azure.Core.ResourceList(apiVersion: string): Azure.Core.Foundations.CustomPage<TResource, Traits> | Azure.Core.Foundations.ErrorResponse\n```\n\n#### Template Parameters\n\n| Name      | Description                       |\n| --------- | --------------------------------- |\n| TResource | The type of the resource.         |\n| Traits    | Traits to apply to the operation. |\n\n### `ResourceRead` {#Azure.Core.ResourceRead}\n\nDEPRECATED: Use `ResourceRead` from a `ResourceOperations` interface instance.\nThis can be done by instantiating your own version with the traits you want `alias Operations = Azure.Core.ResourceOperations<ServiceTraits>;`.\nSee https://azure.github.io/typespec-azure/docs/getstarted/azure-core/step05#defining-the-operation-interface for details on how to use.\n\nOperation signature to retrieve a resource.\n\n```typespec\nop Azure.Core.ResourceRead(apiVersion: string): {} | Azure.Core.Foundations.ErrorResponse\n```\n\n#### Template Parameters\n\n| Name      | Description                       |\n| --------- | --------------------------------- |\n| TResource | The type of the resource.         |\n| Traits    | Traits to apply to the operation. |\n\n### `ResourceUpdate` {#Azure.Core.ResourceUpdate}\n\nDEPRECATED: Use `ResourceUpdate` from a `ResourceOperations` interface instance.\nThis can be done by instantiating your own version with the traits you want `alias Operations = Azure.Core.ResourceOperations<ServiceTraits>;`.\nSee https://azure.github.io/typespec-azure/docs/getstarted/azure-core/step05#defining-the-operation-interface for details on how to use.\nOperation signature to update a resource.\n\n```typespec\nop Azure.Core.ResourceUpdate(apiVersion: string, contentType: application/merge-patch+json, resource: TResource): (anonymous model) | Azure.Core.Foundations.ErrorResponse\n```\n\n#### Template Parameters\n\n| Name      | Description                       |\n| --------- | --------------------------------- |\n| TResource | The type of the resource.         |\n| Traits    | Traits to apply to the operation. |\n\n### `RpcOperation` {#Azure.Core.RpcOperation}\n\nA remote procedure call (RPC) operation.\n\n```typespec\nop Azure.Core.RpcOperation(apiVersion: string): {} | TErrorResponse\n```\n\n#### Template Parameters\n\n| Name           | Description                                                                                                                                                                              |\n| -------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| TParams        | Object describing the parameters of the operation.                                                                                                                                       |\n| TResponse      | Object describing the response of the operation.                                                                                                                                         |\n| Traits         | Object describing the traits of the operation.                                                                                                                                           |\n| TErrorResponse | Error response of the operation. If not specified, the default error response is used.                                                                                                   |\n| TraitContexts  | Trait contexts applicable to the operation. Defaults to `TraitContext.Undefined` which means that only traits that always apply will appear. Can specify multiple using the \\| operator. |\n\n## Azure.Core.Foundations\n\n### `GetOperationStatus` {#Azure.Core.Foundations.GetOperationStatus}\n\nOperation that returns the status of another operation.\n\n```typespec\nop Azure.Core.Foundations.GetOperationStatus(apiVersion: string, operationId: string): Azure.Core.Foundations.OperationStatus<TStatusResult, TStatusError> | TErrorResponse\n```\n\n#### Template Parameters\n\n| Name           | Description                                                                                    |\n| -------------- | ---------------------------------------------------------------------------------------------- |\n| TParams        | Object describing the request parameters of the operation.                                     |\n| TStatusResult  | The type of the operation status result.                                                       |\n| TStatusError   | The type of the operation status error.                                                        |\n| Traits         | Traits which apply to the operation.                                                           |\n| TErrorResponse | The type of the error response. If not provided, the default error response type will be used. |\n\n### `LongRunningOperation` {#Azure.Core.Foundations.LongRunningOperation}\n\nLong-running operation.\n\n```typespec\nop Azure.Core.Foundations.LongRunningOperation(apiVersion: string): Azure.Core.Foundations.(anonymous model) | TErrorResponse\n```\n\n#### Template Parameters\n\n| Name           | Description                                                                                                          |\n| -------------- | -------------------------------------------------------------------------------------------------------------------- |\n| TParams        | Object describing the request parameters of the operation.                                                           |\n| TResponse      | Object describing the response properties of the operation. If not provided, the AcceptedResponse type will be used. |\n| Traits         | Traits which apply to the operation.                                                                                 |\n| TErrorResponse | The type of the error response. If not provided, the default error response type will be used.                       |\n\n### `LongRunningResourceUpdate` {#Azure.Core.Foundations.LongRunningResourceUpdate}\n\nLong-running operation that updates a resource.\n\n```typespec\nop Azure.Core.Foundations.LongRunningResourceUpdate(apiVersion: string, contentType: application/merge-patch+json, resource: TResource): (anonymous model) | TErrorResponse\n```\n\n#### Template Parameters\n\n| Name           | Description                                                                                    |\n| -------------- | ---------------------------------------------------------------------------------------------- |\n| TResource      | The type of the resource.                                                                      |\n| Traits         | Traits which apply to the operation.                                                           |\n| TErrorResponse | The type of the error response. If not provided, the default error response type will be used. |\n\n### `NonPagedResourceList` {#Azure.Core.Foundations.NonPagedResourceList}\n\nOperation that lists resources in a non-paginated way.\n\n```typespec\nop Azure.Core.Foundations.NonPagedResourceList(apiVersion: string): Azure.Core.Foundations.(anonymous model) | TErrorResponse\n```\n\n#### Template Parameters\n\n| Name           | Description                                                                                    |\n| -------------- | ---------------------------------------------------------------------------------------------- |\n| TResource      | The type of the resource.                                                                      |\n| Traits         | Traits which apply to the operation.                                                           |\n| TErrorResponse | The type of the error response. If not provided, the default error response type will be used. |\n\n### `Operation` {#Azure.Core.Foundations.Operation}\n\nThe most basic operation.\n\n```typespec\nop Azure.Core.Foundations.Operation(apiVersion: string): TResponse | TErrorResponse\n```\n\n#### Template Parameters\n\n| Name           | Description                                                                                    |\n| -------------- | ---------------------------------------------------------------------------------------------- |\n| TParams        | Object describing the request parameters of the operation.                                     |\n| TResponse      | Object describing the response properties of the operation.                                    |\n| Traits         | Traits which apply to the operation.                                                           |\n| TErrorResponse | The type of the error response. If not provided, the default error response type will be used. |\n\n### `ResourceCollectionOperation` {#Azure.Core.Foundations.ResourceCollectionOperation}\n\nOperation that applies to a collection of resources.\n\n```typespec\nop Azure.Core.Foundations.ResourceCollectionOperation(apiVersion: string): TResponse | TErrorResponse\n```\n\n#### Template Parameters\n\n| Name           | Description                                                                                    |\n| -------------- | ---------------------------------------------------------------------------------------------- |\n| TResource      | The type of the resource.                                                                      |\n| TParams        | Object describing the request parameters of the operation.                                     |\n| TResponse      | Object describing the response properties of the operation.                                    |\n| Traits         | Traits which apply to the operation.                                                           |\n| TErrorResponse | The type of the error response. If not provided, the default error response type will be used. |\n\n### `ResourceList` {#Azure.Core.Foundations.ResourceList}\n\nOperation that lists resources in a paginated way.\n\n```typespec\nop Azure.Core.Foundations.ResourceList(apiVersion: string): TResponse | TErrorResponse\n```\n\n#### Template Parameters\n\n| Name           | Description                                                                                    |\n| -------------- | ---------------------------------------------------------------------------------------------- |\n| TResource      | The type of the resource.                                                                      |\n| TParams        | Object describing the request parameters of the operation.                                     |\n| TResponse      | Object describing the response properties of the operation.                                    |\n| Traits         | Traits which apply to the operation.                                                           |\n| TErrorResponse | The type of the error response. If not provided, the default error response type will be used. |\n\n### `ResourceOperation` {#Azure.Core.Foundations.ResourceOperation}\n\nThe most basic operation that applies to a resource.\n\n```typespec\nop Azure.Core.Foundations.ResourceOperation(apiVersion: string): TResponse | TErrorResponse\n```\n\n#### Template Parameters\n\n| Name           | Description                                                                                    |\n| -------------- | ---------------------------------------------------------------------------------------------- |\n| TResource      | The type of the resource.                                                                      |\n| TParams        | Object describing the request parameters of the operation.                                     |\n| TResponse      | Object describing the response properties of the operation.                                    |\n| Traits         | Traits which apply to the operation.                                                           |\n| TErrorResponse | The type of the error response. If not provided, the default error response type will be used. |\n", "file_path": "../../docs\\libraries\\azure-core\\reference\\interfaces.md", "link_to_file": "file://../../docs\\libraries\\azure-core\\reference\\interfaces.md"}, {"file_content": "---\ntitle: \"Data types\"\ntoc_min_heading_level: 2\ntoc_max_heading_level: 3\n---\n\n# Data types\n\n## Azure.ResourceManager\n\n### `ApiVersionParameter` {#Azure.ResourceManager.ApiVersionParameter}\n\nThe default api-version parameter type.\n\n```typespec\nmodel Azure.ResourceManager.ApiVersionParameter\n```\n\n### `ArmAcceptedLroResponse` {#Azure.ResourceManager.ArmAcceptedLroResponse}\n\nThe standard ARM response for asynchronous PATCH, POST, and DELETE operations\n\n```typespec\nmodel Azure.ResourceManager.ArmAcceptedLroResponse<TMessage>\n```\n\n#### Template Parameters\n\n| Name     | Description                                                                        |\n| -------- | ---------------------------------------------------------------------------------- |\n| TMessage | The description of the response status (defaults to `Resource operation accepted`) |\n\n### `ArmAcceptedResponse` {#Azure.ResourceManager.ArmAcceptedResponse}\n\nThe standard ACCEPTED response\n\n```typespec\nmodel Azure.ResourceManager.ArmAcceptedResponse<TMessage>\n```\n\n#### Template Parameters\n\n| Name     | Description                                                                        |\n| -------- | ---------------------------------------------------------------------------------- |\n| TMessage | The description of the response status (defaults to `Resource operation accepted`) |\n\n### `ArmCreatedResponse` {#Azure.ResourceManager.ArmCreatedResponse}\n\nThe ARM 201 response for a resource\n\n```typespec\nmodel Azure.ResourceManager.ArmCreatedResponse<T>\n```\n\n#### Template Parameters\n\n| Name | Description                       |\n| ---- | --------------------------------- |\n| T    | The contents of the response body |\n\n### `ArmDeleteAcceptedLroResponse` {#Azure.ResourceManager.ArmDeleteAcceptedLroResponse}\n\n```typespec\nmodel Azure.ResourceManager.ArmDeleteAcceptedLroResponse\n```\n\n### `ArmDeleteAcceptedResponse` {#Azure.ResourceManager.ArmDeleteAcceptedResponse}\n\n```typespec\nmodel Azure.ResourceManager.ArmDeleteAcceptedResponse\n```\n\n### `ArmDeletedNoContentResponse` {#Azure.ResourceManager.ArmDeletedNoContentResponse}\n\n```typespec\nmodel Azure.ResourceManager.ArmDeletedNoContentResponse\n```\n\n### `ArmDeletedResponse` {#Azure.ResourceManager.ArmDeletedResponse}\n\nThe response for synchronous delete of a resource\n\n```typespec\nmodel Azure.ResourceManager.ArmDeletedResponse\n```\n\n### `ArmNoContentResponse` {#Azure.ResourceManager.ArmNoContentResponse}\n\nStandard ARM NoContent (204) response\n\n```typespec\nmodel Azure.ResourceManager.ArmNoContentResponse<TMessage>\n```\n\n#### Template Parameters\n\n| Name     | Description                                                                             |\n| -------- | --------------------------------------------------------------------------------------- |\n| TMessage | The description of the response status (defaults to `Operation completed successfully`) |\n\n### `ArmResourceCreatedResponse` {#Azure.ResourceManager.ArmResourceCreatedResponse}\n\nResource create operation succeeded\n\n```typespec\nmodel Azure.ResourceManager.ArmResourceCreatedResponse<TResource>\n```\n\n#### Template Parameters\n\n| Name      | Description                |\n| --------- | -------------------------- |\n| TResource | The resource being updated |\n\n### `ArmResourceCreatedSyncResponse` {#Azure.ResourceManager.ArmResourceCreatedSyncResponse}\n\nResource synchronous create operation succeeded\n\n```typespec\nmodel Azure.ResourceManager.ArmResourceCreatedSyncResponse<TResource>\n```\n\n#### Template Parameters\n\n| Name      | Description                |\n| --------- | -------------------------- |\n| TResource | The resource being updated |\n\n### `ArmResourceUpdatedResponse` {#Azure.ResourceManager.ArmResourceUpdatedResponse}\n\nResource update operation succeeded\n\n```typespec\nmodel Azure.ResourceManager.ArmResourceUpdatedResponse<TResource>\n```\n\n#### Template Parameters\n\n| Name      | Description                |\n| --------- | -------------------------- |\n| TResource | The resource being updated |\n\n### `ArmResponse` {#Azure.ResourceManager.ArmResponse}\n\nThe ARM synchronous OK response\n\n```typespec\nmodel Azure.ResourceManager.ArmResponse<T>\n```\n\n#### Template Parameters\n\n| Name | Description                       |\n| ---- | --------------------------------- |\n| T    | The contents of the response body |\n\n### `CustomerManagedKeyEncryption` {#Azure.ResourceManager.CustomerManagedKeyEncryption}\n\nCustomer-managed key encryption properties for the resource.\n\n```typespec\nmodel Azure.ResourceManager.CustomerManagedKeyEncryption\n```\n\n### `DefaultProvisioningStateProperty` {#Azure.ResourceManager.DefaultProvisioningStateProperty}\n\nStandard resource provisioning state model. If you do not have any custom provisioning state,\nyou can spread this model directly into your resource property model.\n\n```typespec\nmodel Azure.ResourceManager.DefaultProvisioningStateProperty\n```\n\n#### Examples\n\n```typespec\nmodel FooProperties {\n  // Only have standard Succeeded, Failed, Cancelled states\n  ...DefaultProvisioningStateProperty;\n}\n```\n\n### `Encryption` {#Azure.ResourceManager.Encryption}\n\nModel used only to spread in the `encryption` envelope property for a resource.\n\n```typespec\nmodel Azure.ResourceManager.Encryption\n```\n\n#### Examples\n\n```typespec\nmodel Foo is TrackedResource<FooProperties> {\n  ...Encryption;\n}\n```\n\n### `EncryptionConfiguration` {#Azure.ResourceManager.EncryptionConfiguration}\n\nAll encryption configuration for a resource.\n\n```typespec\nmodel Azure.ResourceManager.EncryptionConfiguration\n```\n\n### `EntityTag` {#Azure.ResourceManager.EntityTag}\n\nModel used only to spread in the standard `eTag` envelope property for a resource\n\n```typespec\nmodel Azure.ResourceManager.EntityTag\n```\n\n#### Examples\n\n```typespec\nmodel Foo is TrackedResource<FooProperties> {\n  // Only have standard Succeeded, Failed, Cancelled states\n  ...EntityTag;\n}\n```\n\n### `ErrorResponse` {#Azure.ResourceManager.ErrorResponse}\n\nThe standard ARM error response\n\n```typespec\nmodel Azure.ResourceManager.ErrorResponse\n```\n\n### `ExtensionResource` {#Azure.ResourceManager.ExtensionResource}\n\nConcrete extension resource types can be created by aliasing this type using a specific property type.\n\nSee more details on [different ARM resource type here.](https://azure.github.io/typespec-azure/docs/howtos/ARM/resource-type)\n\n```typespec\nmodel Azure.ResourceManager.ExtensionResource<TProperties>\n```\n\n#### Template Parameters\n\n| Name        | Description                                                           |\n| ----------- | --------------------------------------------------------------------- |\n| TProperties | A model containing the provider-specific properties for this resource |\n\n### `KeysOf` {#Azure.ResourceManager.KeysOf}\n\nExtracts the key (path) parameters from a resource and its parents\n\n```typespec\nmodel Azure.ResourceManager.KeysOf<TResource>\n```\n\n#### Template Parameters\n\n| Name      | Description                             |\n| --------- | --------------------------------------- |\n| TResource | The resource to extract properties from |\n\n### `LocationParameter` {#Azure.ResourceManager.LocationParameter}\n\nThe default location parameter type.\n\n```typespec\nmodel Azure.ResourceManager.LocationParameter\n```\n\n### `ManagedBy` {#Azure.ResourceManager.ManagedBy}\n\nModel used only to spread in the standard `managedBy` envelope property for a resource\n\n```typespec\nmodel Azure.ResourceManager.ManagedBy\n```\n\n#### Examples\n\n```typespec\nmodel Foo is TrackedResource<FooProperties> {\n  // Only have standard Succeeded, Failed, Cancelled states\n  ...ManagedBy;\n}\n```\n\n### `ManagedServiceIdentity` {#Azure.ResourceManager.ManagedServiceIdentity}\n\nStandard ARM definition of ManagedServiceIdentity\n\n```typespec\nmodel Azure.ResourceManager.ManagedServiceIdentity\n```\n\n### `ManagedSystemAssignedIdentity` {#Azure.ResourceManager.ManagedSystemAssignedIdentity}\n\nStandard ARM definition of ManagedServiceIdentity for services\nthat only support system-defined identities\n\n```typespec\nmodel Azure.ResourceManager.ManagedSystemAssignedIdentity\n```\n\n### `ParentKeysOf` {#Azure.ResourceManager.ParentKeysOf}\n\nExtracts the key (path) parameters from the parent(s) of the given resource\n\n```typespec\nmodel Azure.ResourceManager.ParentKeysOf<TResource>\n```\n\n#### Template Parameters\n\n| Name      | Description                             |\n| --------- | --------------------------------------- |\n| TResource | The resource to extract properties from |\n\n### `PrivateEndpoint` {#Azure.ResourceManager.PrivateEndpoint}\n\nThe private endpoint resource\n\n```typespec\nmodel Azure.ResourceManager.PrivateEndpoint\n```\n\n### `PrivateEndpointConnection` {#Azure.ResourceManager.PrivateEndpointConnection}\n\nThe private endpoint connection resource\n\n```typespec\nmodel Azure.ResourceManager.PrivateEndpointConnection\n```\n\n### `PrivateEndpointConnectionParameter` {#Azure.ResourceManager.PrivateEndpointConnectionParameter}\n\nThe name of the private endpoint connection associated with the Azure resource.\n\n```typespec\nmodel Azure.ResourceManager.PrivateEndpointConnectionParameter<TSegment>\n```\n\n#### Template Parameters\n\n| Name     | Description                                                                                     |\n| -------- | ----------------------------------------------------------------------------------------------- |\n| TSegment | The resource type name for private endpoint connections (default is privateEndpointConnections) |\n\n### `PrivateEndpointConnectionProperties` {#Azure.ResourceManager.PrivateEndpointConnectionProperties}\n\nProperties of he private endpoint connection resource\n\n```typespec\nmodel Azure.ResourceManager.PrivateEndpointConnectionProperties\n```\n\n### `PrivateEndpointConnectionResourceListResult` {#Azure.ResourceManager.PrivateEndpointConnectionResourceListResult}\n\nList of private endpoint connections associated with the specified resource.\n\n```typespec\nmodel Azure.ResourceManager.PrivateEndpointConnectionResourceListResult\n```\n\n### `PrivateLinkResource` {#Azure.ResourceManager.PrivateLinkResource}\n\n```typespec\nmodel Azure.ResourceManager.PrivateLinkResource\n```\n\n### `PrivateLinkResourceListResult` {#Azure.ResourceManager.PrivateLinkResourceListResult}\n\nA list of private link resources.\n\n```typespec\nmodel Azure.ResourceManager.PrivateLinkResourceListResult\n```\n\n### `PrivateLinkResourceParameter` {#Azure.ResourceManager.PrivateLinkResourceParameter}\n\nThe name of the private link associated with the Azure resource.\n\n```typespec\nmodel Azure.ResourceManager.PrivateLinkResourceParameter<TSegment>\n```\n\n#### Template Parameters\n\n| Name     | Description                                                                |\n| -------- | -------------------------------------------------------------------------- |\n| TSegment | The resource type name for private links (default is privateLinkResources) |\n\n### `PrivateLinkResourceProperties` {#Azure.ResourceManager.PrivateLinkResourceProperties}\n\nProperties of a private link resource.\n\n```typespec\nmodel Azure.ResourceManager.PrivateLinkResourceProperties\n```\n\n### `PrivateLinkServiceConnectionState` {#Azure.ResourceManager.PrivateLinkServiceConnectionState}\n\nA collection of information about the state of the connection between service consumer and provider.\n\n```typespec\nmodel Azure.ResourceManager.PrivateLinkServiceConnectionState\n```\n\n### `ProviderNamespace` {#Azure.ResourceManager.ProviderNamespace}\n\nModel describing the provider namespace.\n\n```typespec\nmodel Azure.ResourceManager.ProviderNamespace<TResource>\n```\n\n#### Template Parameters\n\n| Name      | Description                             |\n| --------- | --------------------------------------- |\n| TResource | The resource provided by the namespace. |\n\n### `ProxyResource` {#Azure.ResourceManager.ProxyResource}\n\nConcrete proxy resource types can be created by aliasing this type using a specific property type.\n\nSee more details on [different ARM resource type here.](https://azure.github.io/typespec-azure/docs/howtos/ARM/resource-type)\n\n```typespec\nmodel Azure.ResourceManager.ProxyResource<TProperties>\n```\n\n#### Template Parameters\n\n| Name        | Description                                                           |\n| ----------- | --------------------------------------------------------------------- |\n| TProperties | A model containing the provider-specific properties for this resource |\n\n### `ResourceGroupParameter` {#Azure.ResourceManager.ResourceGroupParameter}\n\nThe default resource group parameter type.\n\n```typespec\nmodel Azure.ResourceManager.ResourceGroupParameter\n```\n\n### `ResourceIdentifierAllowedResource` {#Azure.ResourceManager.ResourceIdentifierAllowedResource}\n\nUsed in ResourceIdentifier definition to represent a particular type of ARM resource, enabling constraints based on resource type.\nSee [link](https://github.com/Azure/autorest/tree/main/docs/extensions#schema)\n\n```typespec\nmodel Azure.ResourceManager.ResourceIdentifierAllowedResource\n```\n\n### `ResourceInstanceParameters` {#Azure.ResourceManager.ResourceInstanceParameters}\n\nThe dynamic parameters of a resource instance - pass in the proper base type to indicate\nwhere the resource is based. The default is in a resource group\n\n```typespec\nmodel Azure.ResourceManager.ResourceInstanceParameters<TResource, TBaseParameters>\n```\n\n#### Template Parameters\n\n| Name            | Description                                              |\n| --------------- | -------------------------------------------------------- |\n| TResource       | The resource to get parameters for                       |\n| TBaseParameters | The parameters representing the base Uri of the resource |\n\n### `ResourceKind` {#Azure.ResourceManager.ResourceKind}\n\nModel used only to spread in the standard `kind` envelope property for a resource\n\n```typespec\nmodel Azure.ResourceManager.ResourceKind\n```\n\n#### Examples\n\n```typespec\nmodel Foo is TrackedResource<FooProperties> {\n  // Only have standard Succeeded, Failed, Cancelled states\n  ...ResourceKind;\n}\n```\n\n### `ResourceListResult` {#Azure.ResourceManager.ResourceListResult}\n\nPaged response containing resources\n\n```typespec\nmodel Azure.ResourceManager.ResourceListResult<TResource>\n```\n\n#### Template Parameters\n\n| Name      | Description                                                                |\n| --------- | -------------------------------------------------------------------------- |\n| TResource | The type of the values returned in the paged response (must be a resource) |\n\n### `ResourceParentParameters` {#Azure.ResourceManager.ResourceParentParameters}\n\nThe dynamic parameters of a list call for a resource instance - pass in the proper base type to indicate\nwhere the list should take place. The default is in a resource group\n\n```typespec\nmodel Azure.ResourceManager.ResourceParentParameters<TResource, TBaseParameters>\n```\n\n#### Template Parameters\n\n| Name            | Description                                              |\n| --------------- | -------------------------------------------------------- |\n| TResource       | The resource to get parameters for                       |\n| TBaseParameters | The parameters representing the base Uri of the resource |\n\n### `ResourcePlan` {#Azure.ResourceManager.ResourcePlan}\n\nModel used only to spread in the standard `plan` envelope property for a resource\n\n```typespec\nmodel Azure.ResourceManager.ResourcePlan\n```\n\n#### Examples\n\n```typespec\nmodel Foo is TrackedResource<FooProperties> {\n  // Only have standard Succeeded, Failed, Cancelled states\n  ...ResourcePlan;\n}\n```\n\n### `ResourceSku` {#Azure.ResourceManager.ResourceSku}\n\nModel used only to spread in the standard `sku` envelope property for a resource\n\n```typespec\nmodel Azure.ResourceManager.ResourceSku\n```\n\n#### Examples\n\n```typespec\nmodel Foo is TrackedResource<FooProperties> {\n  // Only have standard Succeeded, Failed, Cancelled states\n  ...ResourceSku;\n}\n```\n\n### `ResourceUriParameter` {#Azure.ResourceManager.ResourceUriParameter}\n\nThe default resourceUri parameter type.\n\n```typespec\nmodel Azure.ResourceManager.ResourceUriParameter\n```\n\n### `SubscriptionIdParameter` {#Azure.ResourceManager.SubscriptionIdParameter}\n\nThe default subscriptionId parameter type.\n\n```typespec\nmodel Azure.ResourceManager.SubscriptionIdParameter\n```\n\n### `TrackedResource` {#Azure.ResourceManager.TrackedResource}\n\nConcrete tracked resource types can be created by aliasing this type using a specific property type.\n\nSee more details on [different ARM resource type here.](https://azure.github.io/typespec-azure/docs/howtos/ARM/resource-type)\n\n```typespec\nmodel Azure.ResourceManager.TrackedResource<TProperties>\n```\n\n#### Template Parameters\n\n| Name        | Description                                                           |\n| ----------- | --------------------------------------------------------------------- |\n| TProperties | A model containing the provider-specific properties for this resource |\n\n### `InfrastructureEncryption` {#Azure.ResourceManager.InfrastructureEncryption}\n\n(Optional) Discouraged to include in resource definition. Only needed where it is possible to disable platform (AKA infrastructure) encryption. Azure SQL TDE is an example of this. Values are enabled and disabled.\n\n```typespec\nenum Azure.ResourceManager.InfrastructureEncryption\n```\n\n### `KeyEncryptionIdentity` {#Azure.ResourceManager.KeyEncryptionIdentity}\n\nThe type of identity to use.\n\n```typespec\nenum Azure.ResourceManager.KeyEncryptionIdentity\n```\n\n### `PrivateEndpointConnectionProvisioningState` {#Azure.ResourceManager.PrivateEndpointConnectionProvisioningState}\n\nThe provisioning state of the connection\n\n```typespec\nenum Azure.ResourceManager.PrivateEndpointConnectionProvisioningState\n```\n\n### `PrivateEndpointServiceConnectionStatus` {#Azure.ResourceManager.PrivateEndpointServiceConnectionStatus}\n\nThe private endpoint connection status\n\n```typespec\nenum Azure.ResourceManager.PrivateEndpointServiceConnectionStatus\n```\n\n### `ResourceProvisioningState` {#Azure.ResourceManager.ResourceProvisioningState}\n\nStandard terminal provisioning state of resource type. You can spread into your\ncustom provision state to avoid duplication and ensure consistency\n\n```typespec\nenum Azure.ResourceManager.ResourceProvisioningState\n```\n\n#### Examples\n\n```typespec\nenum FooProvisioningState {\n  ...ResourceProvisioningState, // include standard provisioning states\n  starting,\n  started,\n  stopping,\n  stopped,\n}\n```\n\n### `Versions` {#Azure.ResourceManager.Versions}\n\nSupported versions of Azure.ResourceManager building blocks.\n\n```typespec\nenum Azure.ResourceManager.Versions\n```\n\n### `ResourceIdentifier` {#Azure.ResourceManager.ResourceIdentifier}\n\nA type definition that refers the id to an ARM resource.\n\nSample usage:\notherArmId: ResourceIdentifier;\nnetworkId: ResourceIdentifier<[{type:\"\\\\Microsoft.Network\\\\vnet\"}]>\nvmIds: ResourceIdentifier<[{type:\"\\\\Microsoft.Compute\\\\vm\", scopes[\"*\"]}]>\n\n```typespec\nscalar Azure.ResourceManager.ResourceIdentifier\n```\n\n### `ResourceIdentifier` {#Azure.ResourceManager.ResourceIdentifier}\n\nA type definition that refers the id to an ARM resource.\n\nSample usage:\notherArmId: ResourceIdentifier;\nnetworkId: ResourceIdentifier<[{type:\"\\\\Microsoft.Network\\\\vnet\"}]>\nvmIds: ResourceIdentifier<[{type:\"\\\\Microsoft.Compute\\\\vm\", scopes[\"*\"]}]>\n\n```typespec\nscalar Azure.ResourceManager.ResourceIdentifier\n```\n\n### `ResourceIdentifier` {#Azure.ResourceManager.ResourceIdentifier}\n\nA type definition that refers the id to an ARM resource.\n\nSample usage:\notherArmId: ResourceIdentifier;\nnetworkId: ResourceIdentifier<[{type:\"\\\\Microsoft.Network\\\\vnet\"}]>\nvmIds: ResourceIdentifier<[{type:\"\\\\Microsoft.Compute\\\\vm\", scopes[\"*\"]}]>\n\n```typespec\nscalar Azure.ResourceManager.ResourceIdentifier\n```\n\n## Azure.ResourceManager.CommonTypes\n\n### `Versions` {#Azure.ResourceManager.CommonTypes.Versions}\n\nThe ARM common-types versions.\n\n```typespec\nenum Azure.ResourceManager.CommonTypes.Versions\n```\n\n## Azure.ResourceManager.Foundations\n\n### `ArmResource` {#Azure.ResourceManager.Foundations.ArmResource}\n\nBase model that defines common properties for all ARM resources.\n\n```typespec\nmodel Azure.ResourceManager.Foundations.ArmResource\n```\n\n### `ArmTagsProperty` {#Azure.ResourceManager.Foundations.ArmTagsProperty}\n\nStandard type definition for ARM Tags property.\n\nIt is included in the TrackedResource template definition.\n\n```typespec\nmodel Azure.ResourceManager.Foundations.ArmTagsProperty\n```\n\n### `BaseParameters` {#Azure.ResourceManager.Foundations.BaseParameters}\n\nBase parameters for a resource.\n\n```typespec\nmodel Azure.ResourceManager.Foundations.BaseParameters<TResource>\n```\n\n#### Template Parameters\n\n| Name      | Description               |\n| --------- | ------------------------- |\n| TResource | The type of the resource. |\n\n### `CheckNameAvailabilityRequest` {#Azure.ResourceManager.Foundations.CheckNameAvailabilityRequest}\n\nThe check availability request body.\n\n```typespec\nmodel Azure.ResourceManager.Foundations.CheckNameAvailabilityRequest\n```\n\n### `CheckNameAvailabilityResponse` {#Azure.ResourceManager.Foundations.CheckNameAvailabilityResponse}\n\nThe check availability result.\n\n```typespec\nmodel Azure.ResourceManager.Foundations.CheckNameAvailabilityResponse\n```\n\n### `ErrorAdditionalInfo` {#Azure.ResourceManager.Foundations.ErrorAdditionalInfo}\n\nThe resource management error additional info.\n\n```typespec\nmodel Azure.ResourceManager.Foundations.ErrorAdditionalInfo\n```\n\n### `ErrorDetail` {#Azure.ResourceManager.Foundations.ErrorDetail}\n\nThe error detail.\n\n```typespec\nmodel Azure.ResourceManager.Foundations.ErrorDetail\n```\n\n### `ExtensionBaseParameters` {#Azure.ResourceManager.Foundations.ExtensionBaseParameters}\n\nThe static parameters for an extension resource\n\n```typespec\nmodel Azure.ResourceManager.Foundations.ExtensionBaseParameters\n```\n\n### `ExtensionResourceBase` {#Azure.ResourceManager.Foundations.ExtensionResourceBase}\n\nThe base extension resource.\n\n```typespec\nmodel Azure.ResourceManager.Foundations.ExtensionResourceBase\n```\n\n### `ExtensionScope` {#Azure.ResourceManager.Foundations.ExtensionScope}\n\nParameter model for listing an extension resource\n\n```typespec\nmodel Azure.ResourceManager.Foundations.ExtensionScope<TResource>\n```\n\n#### Template Parameters\n\n| Name      | Description               |\n| --------- | ------------------------- |\n| TResource | The type of the resource. |\n\n### `LocationBaseParameters` {#Azure.ResourceManager.Foundations.LocationBaseParameters}\n\nThe static parameters for a location-based resource\n\n```typespec\nmodel Azure.ResourceManager.Foundations.LocationBaseParameters\n```\n\n### `LocationScope` {#Azure.ResourceManager.Foundations.LocationScope}\n\nParameter model for listing a resource at the location scope\n\n```typespec\nmodel Azure.ResourceManager.Foundations.LocationScope<TResource>\n```\n\n#### Template Parameters\n\n| Name      | Description               |\n| --------- | ------------------------- |\n| TResource | The type of the resource. |\n\n### `ManagedIdentityProperties` {#Azure.ResourceManager.Foundations.ManagedIdentityProperties}\n\nThe properties of the managed service identities assigned to this resource.\n\n```typespec\nmodel Azure.ResourceManager.Foundations.ManagedIdentityProperties\n```\n\n### `ManagedSystemIdentityProperties` {#Azure.ResourceManager.Foundations.ManagedSystemIdentityProperties}\n\nThe properties of the service-assigned identity associated with this resource.\n\n```typespec\nmodel Azure.ResourceManager.Foundations.ManagedSystemIdentityProperties\n```\n\n### `Operation` {#Azure.ResourceManager.Foundations.Operation}\n\nDetails of a REST API operation, returned from the Resource Provider Operations API\n\n```typespec\nmodel Azure.ResourceManager.Foundations.Operation\n```\n\n### `OperationDisplay` {#Azure.ResourceManager.Foundations.OperationDisplay}\n\nLocalized display information for and operation.\n\n```typespec\nmodel Azure.ResourceManager.Foundations.OperationDisplay\n```\n\n### `OperationIdParameter` {#Azure.ResourceManager.Foundations.OperationIdParameter}\n\nThe default operationId parameter type.\n\n```typespec\nmodel Azure.ResourceManager.Foundations.OperationIdParameter\n```\n\n### `OperationListResult` {#Azure.ResourceManager.Foundations.OperationListResult}\n\nA list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results.\n\n```typespec\nmodel Azure.ResourceManager.Foundations.OperationListResult\n```\n\n### `OperationStatusResult` {#Azure.ResourceManager.Foundations.OperationStatusResult}\n\nThe current status of an async operation.\n\n```typespec\nmodel Azure.ResourceManager.Foundations.OperationStatusResult\n```\n\n### `ProxyResourceBase` {#Azure.ResourceManager.Foundations.ProxyResourceBase}\n\nThe base proxy resource.\n\n```typespec\nmodel Azure.ResourceManager.Foundations.ProxyResourceBase\n```\n\n### `ProxyResourceUpdateModel` {#Azure.ResourceManager.Foundations.ProxyResourceUpdateModel}\n\nThe type used for update operations of the resource.\n\n```typespec\nmodel Azure.ResourceManager.Foundations.ProxyResourceUpdateModel<TResource, TProperties>\n```\n\n#### Template Parameters\n\n| Name        | Description                 |\n| ----------- | --------------------------- |\n| TResource   | The type of the resource.   |\n| TProperties | The type of the properties. |\n\n### `ResourceGroupBaseParameters` {#Azure.ResourceManager.Foundations.ResourceGroupBaseParameters}\n\nThe static parameters for a resource-group based resource\n\n```typespec\nmodel Azure.ResourceManager.Foundations.ResourceGroupBaseParameters\n```\n\n### `ResourceGroupScope` {#Azure.ResourceManager.Foundations.ResourceGroupScope}\n\nParameter model for listing a resource at the resource group scope\n\n```typespec\nmodel Azure.ResourceManager.Foundations.ResourceGroupScope<TResource>\n```\n\n#### Template Parameters\n\n| Name      | Description               |\n| --------- | ------------------------- |\n| TResource | The type of the resource. |\n\n### `ResourcePlanType` {#Azure.ResourceManager.Foundations.ResourcePlanType}\n\nDetails of the resource plan.\n\n```typespec\nmodel Azure.ResourceManager.Foundations.ResourcePlanType\n```\n\n### `ResourceSkuType` {#Azure.ResourceManager.Foundations.ResourceSkuType}\n\nThe SKU (Stock Keeping Unit) assigned to this resource.\n\n```typespec\nmodel Azure.ResourceManager.Foundations.ResourceSkuType\n```\n\n### `ResourceUpdateModel` {#Azure.ResourceManager.Foundations.ResourceUpdateModel}\n\nDefines a model type used to create named resource update models\ne.g. `model MyResourceUpdate is ResourceUpdate<MyResourceProperties> {}`\n\n```typespec\nmodel Azure.ResourceManager.Foundations.ResourceUpdateModel<TResource, TProperties>\n```\n\n#### Template Parameters\n\n| Name        | Description                 |\n| ----------- | --------------------------- |\n| TResource   | The type of the resource.   |\n| TProperties | The type of the properties. |\n\n### `ResourceUpdateModelProperties` {#Azure.ResourceManager.Foundations.ResourceUpdateModelProperties}\n\nDefines a properties type used to create named resource update models.\nThis type is not used directly, it is referenced by ResourceUpdateModel.\n\n```typespec\nmodel Azure.ResourceManager.Foundations.ResourceUpdateModelProperties<TResource, TProperties>\n```\n\n#### Template Parameters\n\n| Name        | Description                 |\n| ----------- | --------------------------- |\n| TResource   | The type of the resource.   |\n| TProperties | The type of the properties. |\n\n### `SubscriptionBaseParameters` {#Azure.ResourceManager.Foundations.SubscriptionBaseParameters}\n\nThe static parameters for a subscription based resource\n\n```typespec\nmodel Azure.ResourceManager.Foundations.SubscriptionBaseParameters\n```\n\n### `SubscriptionScope` {#Azure.ResourceManager.Foundations.SubscriptionScope}\n\nParameter model for listing a resource at the subscription scope\n\n```typespec\nmodel Azure.ResourceManager.Foundations.SubscriptionScope<TResource>\n```\n\n#### Template Parameters\n\n| Name      | Description               |\n| --------- | ------------------------- |\n| TResource | The type of the resource. |\n\n### `SystemData` {#Azure.ResourceManager.Foundations.SystemData}\n\nMetadata pertaining to creation and last modification of the resource.\n\n```typespec\nmodel Azure.ResourceManager.Foundations.SystemData\n```\n\n### `TagsUpdateModel` {#Azure.ResourceManager.Foundations.TagsUpdateModel}\n\nThe type used for updating tags in resources.\n\n```typespec\nmodel Azure.ResourceManager.Foundations.TagsUpdateModel<TResource>\n```\n\n#### Template Parameters\n\n| Name      | Description               |\n| --------- | ------------------------- |\n| TResource | The type of the resource. |\n\n### `TenantBaseParameters` {#Azure.ResourceManager.Foundations.TenantBaseParameters}\n\nThe static parameters for a tenant-based resource\n\n```typespec\nmodel Azure.ResourceManager.Foundations.TenantBaseParameters\n```\n\n### `TenantScope` {#Azure.ResourceManager.Foundations.TenantScope}\n\nParameter model for listing a resource at the tenant scope\n\n```typespec\nmodel Azure.ResourceManager.Foundations.TenantScope<TResource>\n```\n\n#### Template Parameters\n\n| Name      | Description               |\n| --------- | ------------------------- |\n| TResource | The type of the resource. |\n\n### `TrackedResourceBase` {#Azure.ResourceManager.Foundations.TrackedResourceBase}\n\nThe base tracked resource.\n\n```typespec\nmodel Azure.ResourceManager.Foundations.TrackedResourceBase\n```\n\n### `UserAssignedIdentity` {#Azure.ResourceManager.Foundations.UserAssignedIdentity}\n\nA managed identity assigned by the user.\n\n```typespec\nmodel Azure.ResourceManager.Foundations.UserAssignedIdentity\n```\n\n### `ActionType` {#Azure.ResourceManager.Foundations.ActionType}\n\nEnum. Indicates the action type. \"Internal\" refers to actions that are for internal only APIs.\n\n```typespec\nenum Azure.ResourceManager.Foundations.ActionType\n```\n\n### `CheckNameAvailabilityReason` {#Azure.ResourceManager.Foundations.CheckNameAvailabilityReason}\n\nPossible reasons for a name not being available.\n\n```typespec\nenum Azure.ResourceManager.Foundations.CheckNameAvailabilityReason\n```\n\n### `createdByType` {#Azure.ResourceManager.Foundations.createdByType}\n\nThe kind of entity that created the resource.\n\n```typespec\nenum Azure.ResourceManager.Foundations.createdByType\n```\n\n### `ManagedIdentityType` {#Azure.ResourceManager.Foundations.ManagedIdentityType}\n\nThe kind of managed identity assigned to this resource.\n\n```typespec\nenum Azure.ResourceManager.Foundations.ManagedIdentityType\n```\n\n### `ManagedSystemIdentityType` {#Azure.ResourceManager.Foundations.ManagedSystemIdentityType}\n\nThe kind of managemed identity assigned to this resource.\n\n```typespec\nenum Azure.ResourceManager.Foundations.ManagedSystemIdentityType\n```\n\n### `Origin` {#Azure.ResourceManager.Foundations.Origin}\n\nThe intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is \"user,system\"\n\n```typespec\nenum Azure.ResourceManager.Foundations.Origin\n```\n\n### `ResourceHome` {#Azure.ResourceManager.Foundations.ResourceHome}\n\nAn internal enum to indicate the resource support for various path types\n\n```typespec\nenum Azure.ResourceManager.Foundations.ResourceHome\n```\n\n### `SkuTier` {#Azure.ResourceManager.Foundations.SkuTier}\n\nAvailable service tiers for the SKU.\n\n```typespec\nenum Azure.ResourceManager.Foundations.SkuTier\n```\n", "file_path": "../../docs\\libraries\\azure-resource-manager\\reference\\data-types.md", "link_to_file": "file://../../docs\\libraries\\azure-resource-manager\\reference\\data-types.md"}, {"file_content": "---\ntitle: \"Decorators\"\ntoc_min_heading_level: 2\ntoc_max_heading_level: 3\n---\n\n# Decorators\n\n## Azure.ResourceManager\n\n### `@armCommonTypesVersion` {#@Azure.ResourceManager.armCommonTypesVersion}\n\nThis decorator is used either on a namespace or a version enum value to indicate\nthe version of the ARM common-types to use for refs in emitted Swagger files.\n\n```typespec\n@Azure.ResourceManager.armCommonTypesVersion(version: valueof string | EnumMember)\n```\n\n#### Target\n\n`union Namespace | EnumMember`\n\n#### Parameters\n\n| Name    | Type                                 | Description                                                                                                        |\n| ------- | ------------------------------------ | ------------------------------------------------------------------------------------------------------------------ |\n| version | `valueof union string \\| EnumMember` | The Azure.ResourceManager.CommonTypes.Versions for the desired common-types version or an equivalent string value. |\n\n### `@armLibraryNamespace` {#@Azure.ResourceManager.armLibraryNamespace}\n\n`@armLibraryNamespace` designates a namespace as containign ARM Provider information.\n\n```typespec\n@Azure.ResourceManager.armLibraryNamespace\n```\n\n#### Target\n\n`Namespace`\n\n#### Parameters\n\nNone\n\n#### Examples\n\n```typespec\n@armLibraryNamespace\nnamespace Microsoft.Contoso;\n```\n\n### `@armProviderNamespace` {#@Azure.ResourceManager.armProviderNamespace}\n\n`@armProviderNamespace` sets the ARM provider name. It will default to use the\nNamespace element value unless an override value is specified.\n\n```typespec\n@Azure.ResourceManager.armProviderNamespace(providerNamespace?: valueof string)\n```\n\n#### Target\n\n`Namespace`\n\n#### Parameters\n\n| Name              | Type                    | Description        |\n| ----------------- | ----------------------- | ------------------ |\n| providerNamespace | `valueof scalar string` | Provider namespace |\n\n#### Examples\n\n```typespec\n@armProviderNamespace\nnamespace Microsoft.Contoso;\n```\n\n```typespec\n@armProviderNamespace(\"Microsoft.Contoso\")\nnamespace Microsoft.ContosoService;\n```\n\n### `@armProviderNameValue` {#@Azure.ResourceManager.armProviderNameValue}\n\n`@armResourceType` sets the value fo the decorated string\nproperty to the type of the ARM resource.\n\n```typespec\n@Azure.ResourceManager.armProviderNameValue\n```\n\n#### Target\n\n`union Operation | Model`\n\n#### Parameters\n\nNone\n\n### `@armRenameListByOperation` {#@Azure.ResourceManager.armRenameListByOperation}\n\nMarks the operation as being a collection action\n\n```typespec\n@Azure.ResourceManager.armRenameListByOperation(resourceType: Model, parentTypeName?: valueof string, parentFriendlyTypeName?: valueof string)\n```\n\n#### Target\n\n`Operation`\n\n#### Parameters\n\n| Name                   | Type                    | Description               |\n| ---------------------- | ----------------------- | ------------------------- |\n| resourceType           | `Model`                 | Resource                  |\n| parentTypeName         | `valueof scalar string` | : Parent type name.       |\n| parentFriendlyTypeName | `valueof scalar string` | Friendly name for parent. |\n\n### `@armResourceAction` {#@Azure.ResourceManager.armResourceAction}\n\n```typespec\n@Azure.ResourceManager.armResourceAction(resourceType: Model)\n```\n\n#### Target\n\n`Operation`\n\n#### Parameters\n\n| Name         | Type    | Description    |\n| ------------ | ------- | -------------- |\n| resourceType | `Model` | Resource model |\n\n### `@armResourceCollectionAction` {#@Azure.ResourceManager.armResourceCollectionAction}\n\nMarks the operation as being a collection action\n\n```typespec\n@Azure.ResourceManager.armResourceCollectionAction\n```\n\n#### Target\n\n`Operation`\n\n#### Parameters\n\nNone\n\n### `@armResourceCreateOrUpdate` {#@Azure.ResourceManager.armResourceCreateOrUpdate}\n\n```typespec\n@Azure.ResourceManager.armResourceCreateOrUpdate(resourceType: Model)\n```\n\n#### Target\n\n`Operation`\n\n#### Parameters\n\n| Name         | Type    | Description    |\n| ------------ | ------- | -------------- |\n| resourceType | `Model` | Resource model |\n\n### `@armResourceDelete` {#@Azure.ResourceManager.armResourceDelete}\n\n```typespec\n@Azure.ResourceManager.armResourceDelete(resourceType: Model)\n```\n\n#### Target\n\n`Operation`\n\n#### Parameters\n\n| Name         | Type    | Description    |\n| ------------ | ------- | -------------- |\n| resourceType | `Model` | Resource model |\n\n### `@armResourceList` {#@Azure.ResourceManager.armResourceList}\n\n```typespec\n@Azure.ResourceManager.armResourceList(resourceType: Model)\n```\n\n#### Target\n\n`Operation`\n\n#### Parameters\n\n| Name         | Type    | Description    |\n| ------------ | ------- | -------------- |\n| resourceType | `Model` | Resource model |\n\n### `@armResourceOperations` {#@Azure.ResourceManager.armResourceOperations}\n\nThis decorator is used to identify interfaces containing resource operations.\nWhen applied, it marks the interface with the `@autoRoute` decorator so that\nall of its contained operations will have their routes generated\nautomatically.\n\nIt also adds a `@tag` decorator bearing the name of the interface so that all\nof the operations will be grouped based on the interface name in generated\nclients.\n\n```typespec\n@Azure.ResourceManager.armResourceOperations(_?: unknown)\n```\n\n#### Target\n\n`Interface`\n\n#### Parameters\n\n| Name | Type                  | Description |\n| ---- | --------------------- | ----------- |\n| \\_   | `(intrinsic) unknown` | DEPRECATED  |\n\n### `@armResourceRead` {#@Azure.ResourceManager.armResourceRead}\n\n```typespec\n@Azure.ResourceManager.armResourceRead(resourceType: Model)\n```\n\n#### Target\n\n`Operation`\n\n#### Parameters\n\n| Name         | Type    | Description    |\n| ------------ | ------- | -------------- |\n| resourceType | `Model` | Resource model |\n\n### `@armResourceUpdate` {#@Azure.ResourceManager.armResourceUpdate}\n\n```typespec\n@Azure.ResourceManager.armResourceUpdate(resourceType: Model)\n```\n\n#### Target\n\n`Operation`\n\n#### Parameters\n\n| Name         | Type    | Description    |\n| ------------ | ------- | -------------- |\n| resourceType | `Model` | Resource model |\n\n### `@extensionResource` {#@Azure.ResourceManager.extensionResource}\n\n`@extensionResource` marks an ARM resource model as an Extension resource.\nExtension resource extends other resource types. URL path is appended\nto another segment {scope} which refers to another Resource URL.\n\n`{resourceUri}/providers/Microsoft.Contoso/accessPermissions`\n\nSee more details on [different ARM resource type here.](https://azure.github.io/typespec-azure/docs/howtos/ARM/resource-type)\n\n```typespec\n@Azure.ResourceManager.extensionResource\n```\n\n#### Target\n\n`Model`\n\n#### Parameters\n\nNone\n\n### `@locationResource` {#@Azure.ResourceManager.locationResource}\n\n`@locationResource` marks an ARM resource model as a location based resource.\n\nLocation based resources have REST API paths like\n`/subscriptions/{subscriptionId}/locations/{location}/providers/Microsoft.Contoso/employees`\n\nSee more details on [different ARM resource type here.](https://azure.github.io/typespec-azure/docs/howtos/ARM/resource-type)\n\n```typespec\n@Azure.ResourceManager.locationResource\n```\n\n#### Target\n\n`Model`\n\n#### Parameters\n\nNone\n\n### `@resourceGroupResource` {#@Azure.ResourceManager.resourceGroupResource}\n\n`@resourceGroupResource` marks an ARM resource model as a resource group level resource.\nThis is the default option for ARM resources. It is provided for symmetry and clarity, and\nyou typically do not need to specify it.\n\n`/subscription/{id}/resourcegroups/{rg}/providers/Microsoft.Contoso/employees`\n\nSee more details on [different ARM resource type here.](https://azure.github.io/typespec-azure/docs/howtos/ARM/resource-type)\n\n```typespec\n@Azure.ResourceManager.resourceGroupResource\n```\n\n#### Target\n\n`Model`\n\n#### Parameters\n\nNone\n\n### `@singleton` {#@Azure.ResourceManager.singleton}\n\n`@singleton` marks an ARM resource model as a singleton resource.\n\nSingleton resources only have a single instance with a fixed key name.\n`.../providers/Microsoft.Contoso/monthlyReports/default`\n\nSee more details on [different ARM resource type here.](https://azure.github.io/typespec-azure/docs/howtos/ARM/resource-type)\n\n```typespec\n@Azure.ResourceManager.singleton(keyValue?: valueof string | default)\n```\n\n#### Target\n\n`Model`\n\n#### Parameters\n\n| Name     | Type                              | Description                                                    |\n| -------- | --------------------------------- | -------------------------------------------------------------- |\n| keyValue | `valueof union string \\| default` | The name of the singleton resource. Default name is \"default\". |\n\n### `@subscriptionResource` {#@Azure.ResourceManager.subscriptionResource}\n\n`@subscriptionResource` marks an ARM resource model as a subscription resource.\n\nSubscription resources have REST API paths like:\n`/subscription/{id}/providers/Microsoft.Contoso/employees`\n\nSee more details on [different ARM resource type here.](https://azure.github.io/typespec-azure/docs/howtos/ARM/resource-type)\n\n```typespec\n@Azure.ResourceManager.subscriptionResource\n```\n\n#### Target\n\n`Model`\n\n#### Parameters\n\nNone\n\n### `@tenantResource` {#@Azure.ResourceManager.tenantResource}\n\n`@tenantResource` marks an ARM resource model as a Tenant resource/Root resource/Top-Level resource.\n\nTenant resources have REST API paths like:\n`/provider/Microsoft.Contoso/FooResources`\n\nSee more details on [different ARM resource type here.](https://azure.github.io/typespec-azure/docs/howtos/ARM/resource-type)\n\n```typespec\n@Azure.ResourceManager.tenantResource\n```\n\n#### Target\n\n`Model`\n\n#### Parameters\n\nNone\n\n### `@useLibraryNamespace` {#@Azure.ResourceManager.useLibraryNamespace}\n\nDeclare the ARM library namespaces used in this provider.\nThis allows sharing ARM resource types across specifications\n\n```typespec\n@Azure.ResourceManager.useLibraryNamespace(...namespaces: Namespace[])\n```\n\n#### Target\n\n`Namespace`\n\n#### Parameters\n\n| Name       | Type                | Description                                           |\n| ---------- | ------------------- | ----------------------------------------------------- |\n| namespaces | `model Namespace[]` | The namespaces of arm libraries used in this provider |\n", "file_path": "../../docs\\libraries\\azure-resource-manager\\reference\\decorators.md", "link_to_file": "file://../../docs\\libraries\\azure-resource-manager\\reference\\decorators.md"}, {"file_content": "---\ntitle: Overview\nsidebar_position: 0\ntoc_min_heading_level: 2\ntoc_max_heading_level: 3\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n# Overview\n\nTypeSpec Azure Resource Manager library\n\n## Install\n\n<Tabs>\n<TabItem value=\"spec\" label=\"In a spec\" default>\n\n```bash\nnpm install @azure-tools/typespec-azure-resource-manager\n```\n\n</TabItem>\n<TabItem value=\"library\" label=\"In a library\" default>\n\n```bash\nnpm install --save-peer @azure-tools/typespec-azure-resource-manager\n```\n\n</TabItem>\n</Tabs>\n\n## Azure\n\n## Azure.ResourceManager\n\n### Decorators\n\n- [`@armCommonTypesVersion`](./decorators.md#@Azure.ResourceManager.armCommonTypesVersion)\n- [`@armLibraryNamespace`](./decorators.md#@Azure.ResourceManager.armLibraryNamespace)\n- [`@armProviderNamespace`](./decorators.md#@Azure.ResourceManager.armProviderNamespace)\n- [`@armProviderNameValue`](./decorators.md#@Azure.ResourceManager.armProviderNameValue)\n- [`@armRenameListByOperation`](./decorators.md#@Azure.ResourceManager.armRenameListByOperation)\n- [`@armResourceAction`](./decorators.md#@Azure.ResourceManager.armResourceAction)\n- [`@armResourceCollectionAction`](./decorators.md#@Azure.ResourceManager.armResourceCollectionAction)\n- [`@armResourceCreateOrUpdate`](./decorators.md#@Azure.ResourceManager.armResourceCreateOrUpdate)\n- [`@armResourceDelete`](./decorators.md#@Azure.ResourceManager.armResourceDelete)\n- [`@armResourceList`](./decorators.md#@Azure.ResourceManager.armResourceList)\n- [`@armResourceOperations`](./decorators.md#@Azure.ResourceManager.armResourceOperations)\n- [`@armResourceRead`](./decorators.md#@Azure.ResourceManager.armResourceRead)\n- [`@armResourceUpdate`](./decorators.md#@Azure.ResourceManager.armResourceUpdate)\n- [`@extensionResource`](./decorators.md#@Azure.ResourceManager.extensionResource)\n- [`@locationResource`](./decorators.md#@Azure.ResourceManager.locationResource)\n- [`@resourceGroupResource`](./decorators.md#@Azure.ResourceManager.resourceGroupResource)\n- [`@singleton`](./decorators.md#@Azure.ResourceManager.singleton)\n- [`@subscriptionResource`](./decorators.md#@Azure.ResourceManager.subscriptionResource)\n- [`@tenantResource`](./decorators.md#@Azure.ResourceManager.tenantResource)\n- [`@useLibraryNamespace`](./decorators.md#@Azure.ResourceManager.useLibraryNamespace)\n\n### Interfaces\n\n- [`ExtensionResourceCollectionOperations`](./interfaces.md#Azure.ResourceManager.ExtensionResourceCollectionOperations)\n- [`ExtensionResourceInstanceOperations`](./interfaces.md#Azure.ResourceManager.ExtensionResourceInstanceOperations)\n- [`ExtensionResourceOperations`](./interfaces.md#Azure.ResourceManager.ExtensionResourceOperations)\n- [`Operations`](./interfaces.md#Azure.ResourceManager.Operations)\n- [`ProxyResourceOperations`](./interfaces.md#Azure.ResourceManager.ProxyResourceOperations)\n- [`ResourceCollectionOperations`](./interfaces.md#Azure.ResourceManager.ResourceCollectionOperations)\n- [`ResourceCreateAsync`](./interfaces.md#Azure.ResourceManager.ResourceCreateAsync)\n- [`ResourceCreateSync`](./interfaces.md#Azure.ResourceManager.ResourceCreateSync)\n- [`ResourceDeleteAsync`](./interfaces.md#Azure.ResourceManager.ResourceDeleteAsync)\n- [`ResourceDeleteSync`](./interfaces.md#Azure.ResourceManager.ResourceDeleteSync)\n- [`ResourceDeleteWithoutOkAsync`](./interfaces.md#Azure.ResourceManager.ResourceDeleteWithoutOkAsync)\n- [`ResourceInstanceOperations`](./interfaces.md#Azure.ResourceManager.ResourceInstanceOperations)\n- [`ResourceListByParent`](./interfaces.md#Azure.ResourceManager.ResourceListByParent)\n- [`ResourceListBySubscription`](./interfaces.md#Azure.ResourceManager.ResourceListBySubscription)\n- [`ResourceOperations`](./interfaces.md#Azure.ResourceManager.ResourceOperations)\n- [`ResourceRead`](./interfaces.md#Azure.ResourceManager.ResourceRead)\n- [`ResourceUpdateAsync`](./interfaces.md#Azure.ResourceManager.ResourceUpdateAsync)\n- [`ResourceUpdateSync`](./interfaces.md#Azure.ResourceManager.ResourceUpdateSync)\n- [`TenantResourceOperations`](./interfaces.md#Azure.ResourceManager.TenantResourceOperations)\n- [`TrackedResourceOperations`](./interfaces.md#Azure.ResourceManager.TrackedResourceOperations)\n\n### Operations\n\n- [`ArmCustomPatchAsync`](./interfaces.md#Azure.ResourceManager.ArmCustomPatchAsync)\n- [`ArmCustomPatchSync`](./interfaces.md#Azure.ResourceManager.ArmCustomPatchSync)\n- [`ArmListBySubscription`](./interfaces.md#Azure.ResourceManager.ArmListBySubscription)\n- [`ArmResourceActionAsync`](./interfaces.md#Azure.ResourceManager.ArmResourceActionAsync)\n- [`ArmResourceActionAsyncBase`](./interfaces.md#Azure.ResourceManager.ArmResourceActionAsyncBase)\n- [`ArmResourceActionNoContentAsync`](./interfaces.md#Azure.ResourceManager.ArmResourceActionNoContentAsync)\n- [`ArmResourceActionNoContentSync`](./interfaces.md#Azure.ResourceManager.ArmResourceActionNoContentSync)\n- [`ArmResourceActionNoResponseContentAsync`](./interfaces.md#Azure.ResourceManager.ArmResourceActionNoResponseContentAsync)\n- [`ArmResourceActionSync`](./interfaces.md#Azure.ResourceManager.ArmResourceActionSync)\n- [`ArmResourceCreateOrReplaceSync`](./interfaces.md#Azure.ResourceManager.ArmResourceCreateOrReplaceSync)\n- [`ArmResourceCreateOrUpdateAsync`](./interfaces.md#Azure.ResourceManager.ArmResourceCreateOrUpdateAsync)\n- [`ArmResourceCreateOrUpdateSync`](./interfaces.md#Azure.ResourceManager.ArmResourceCreateOrUpdateSync)\n- [`ArmResourceDeleteAsync`](./interfaces.md#Azure.ResourceManager.ArmResourceDeleteAsync)\n- [`ArmResourceDeleteAsyncBase`](./interfaces.md#Azure.ResourceManager.ArmResourceDeleteAsyncBase)\n- [`ArmResourceDeleteSync`](./interfaces.md#Azure.ResourceManager.ArmResourceDeleteSync)\n- [`ArmResourceDeleteWithoutOkAsync`](./interfaces.md#Azure.ResourceManager.ArmResourceDeleteWithoutOkAsync)\n- [`ArmResourceListAtScope`](./interfaces.md#Azure.ResourceManager.ArmResourceListAtScope)\n- [`ArmResourceListByParent`](./interfaces.md#Azure.ResourceManager.ArmResourceListByParent)\n- [`ArmResourceRead`](./interfaces.md#Azure.ResourceManager.ArmResourceRead)\n- [`checkGlobalNameAvailability`](./interfaces.md#Azure.ResourceManager.checkGlobalNameAvailability)\n- [`checkLocalNameAvailability`](./interfaces.md#Azure.ResourceManager.checkLocalNameAvailability)\n\n### Models\n\n- [`ApiVersionParameter`](./data-types.md#Azure.ResourceManager.ApiVersionParameter)\n- [`ArmAcceptedLroResponse`](./data-types.md#Azure.ResourceManager.ArmAcceptedLroResponse)\n- [`ArmAcceptedResponse`](./data-types.md#Azure.ResourceManager.ArmAcceptedResponse)\n- [`ArmCreatedResponse`](./data-types.md#Azure.ResourceManager.ArmCreatedResponse)\n- [`ArmDeleteAcceptedLroResponse`](./data-types.md#Azure.ResourceManager.ArmDeleteAcceptedLroResponse)\n- [`ArmDeleteAcceptedResponse`](./data-types.md#Azure.ResourceManager.ArmDeleteAcceptedResponse)\n- [`ArmDeletedNoContentResponse`](./data-types.md#Azure.ResourceManager.ArmDeletedNoContentResponse)\n- [`ArmDeletedResponse`](./data-types.md#Azure.ResourceManager.ArmDeletedResponse)\n- [`ArmNoContentResponse`](./data-types.md#Azure.ResourceManager.ArmNoContentResponse)\n- [`ArmResourceCreatedResponse`](./data-types.md#Azure.ResourceManager.ArmResourceCreatedResponse)\n- [`ArmResourceCreatedSyncResponse`](./data-types.md#Azure.ResourceManager.ArmResourceCreatedSyncResponse)\n- [`ArmResourceUpdatedResponse`](./data-types.md#Azure.ResourceManager.ArmResourceUpdatedResponse)\n- [`ArmResponse`](./data-types.md#Azure.ResourceManager.ArmResponse)\n- [`CustomerManagedKeyEncryption`](./data-types.md#Azure.ResourceManager.CustomerManagedKeyEncryption)\n- [`DefaultProvisioningStateProperty`](./data-types.md#Azure.ResourceManager.DefaultProvisioningStateProperty)\n- [`Encryption`](./data-types.md#Azure.ResourceManager.Encryption)\n- [`EncryptionConfiguration`](./data-types.md#Azure.ResourceManager.EncryptionConfiguration)\n- [`EntityTag`](./data-types.md#Azure.ResourceManager.EntityTag)\n- [`ErrorResponse`](./data-types.md#Azure.ResourceManager.ErrorResponse)\n- [`ExtensionResource`](./data-types.md#Azure.ResourceManager.ExtensionResource)\n- [`KeysOf`](./data-types.md#Azure.ResourceManager.KeysOf)\n- [`LocationParameter`](./data-types.md#Azure.ResourceManager.LocationParameter)\n- [`ManagedBy`](./data-types.md#Azure.ResourceManager.ManagedBy)\n- [`ManagedServiceIdentity`](./data-types.md#Azure.ResourceManager.ManagedServiceIdentity)\n- [`ManagedSystemAssignedIdentity`](./data-types.md#Azure.ResourceManager.ManagedSystemAssignedIdentity)\n- [`ParentKeysOf`](./data-types.md#Azure.ResourceManager.ParentKeysOf)\n- [`PrivateEndpoint`](./data-types.md#Azure.ResourceManager.PrivateEndpoint)\n- [`PrivateEndpointConnection`](./data-types.md#Azure.ResourceManager.PrivateEndpointConnection)\n- [`PrivateEndpointConnectionParameter`](./data-types.md#Azure.ResourceManager.PrivateEndpointConnectionParameter)\n- [`PrivateEndpointConnectionProperties`](./data-types.md#Azure.ResourceManager.PrivateEndpointConnectionProperties)\n- [`PrivateEndpointConnectionResourceListResult`](./data-types.md#Azure.ResourceManager.PrivateEndpointConnectionResourceListResult)\n- [`PrivateLinkResource`](./data-types.md#Azure.ResourceManager.PrivateLinkResource)\n- [`PrivateLinkResourceListResult`](./data-types.md#Azure.ResourceManager.PrivateLinkResourceListResult)\n- [`PrivateLinkResourceParameter`](./data-types.md#Azure.ResourceManager.PrivateLinkResourceParameter)\n- [`PrivateLinkResourceProperties`](./data-types.md#Azure.ResourceManager.PrivateLinkResourceProperties)\n- [`PrivateLinkServiceConnectionState`](./data-types.md#Azure.ResourceManager.PrivateLinkServiceConnectionState)\n- [`ProviderNamespace`](./data-types.md#Azure.ResourceManager.ProviderNamespace)\n- [`ProxyResource`](./data-types.md#Azure.ResourceManager.ProxyResource)\n- [`ResourceGroupParameter`](./data-types.md#Azure.ResourceManager.ResourceGroupParameter)\n- [`ResourceIdentifierAllowedResource`](./data-types.md#Azure.ResourceManager.ResourceIdentifierAllowedResource)\n- [`ResourceInstanceParameters`](./data-types.md#Azure.ResourceManager.ResourceInstanceParameters)\n- [`ResourceKind`](./data-types.md#Azure.ResourceManager.ResourceKind)\n- [`ResourceListResult`](./data-types.md#Azure.ResourceManager.ResourceListResult)\n- [`ResourceParentParameters`](./data-types.md#Azure.ResourceManager.ResourceParentParameters)\n- [`ResourcePlan`](./data-types.md#Azure.ResourceManager.ResourcePlan)\n- [`ResourceSku`](./data-types.md#Azure.ResourceManager.ResourceSku)\n- [`ResourceUriParameter`](./data-types.md#Azure.ResourceManager.ResourceUriParameter)\n- [`SubscriptionIdParameter`](./data-types.md#Azure.ResourceManager.SubscriptionIdParameter)\n- [`TrackedResource`](./data-types.md#Azure.ResourceManager.TrackedResource)\n\n## Azure.ResourceManager.CommonTypes\n\n## Azure.ResourceManager.Foundations\n\n### Operations\n\n- [`checkNameAvailability`](./interfaces.md#Azure.ResourceManager.Foundations.checkNameAvailability)\n\n### Models\n\n- [`ArmResource`](./data-types.md#Azure.ResourceManager.Foundations.ArmResource)\n- [`ArmTagsProperty`](./data-types.md#Azure.ResourceManager.Foundations.ArmTagsProperty)\n- [`BaseParameters`](./data-types.md#Azure.ResourceManager.Foundations.BaseParameters)\n- [`CheckNameAvailabilityRequest`](./data-types.md#Azure.ResourceManager.Foundations.CheckNameAvailabilityRequest)\n- [`CheckNameAvailabilityResponse`](./data-types.md#Azure.ResourceManager.Foundations.CheckNameAvailabilityResponse)\n- [`ErrorAdditionalInfo`](./data-types.md#Azure.ResourceManager.Foundations.ErrorAdditionalInfo)\n- [`ErrorDetail`](./data-types.md#Azure.ResourceManager.Foundations.ErrorDetail)\n- [`ExtensionBaseParameters`](./data-types.md#Azure.ResourceManager.Foundations.ExtensionBaseParameters)\n- [`ExtensionResourceBase`](./data-types.md#Azure.ResourceManager.Foundations.ExtensionResourceBase)\n- [`ExtensionScope`](./data-types.md#Azure.ResourceManager.Foundations.ExtensionScope)\n- [`LocationBaseParameters`](./data-types.md#Azure.ResourceManager.Foundations.LocationBaseParameters)\n- [`LocationScope`](./data-types.md#Azure.ResourceManager.Foundations.LocationScope)\n- [`ManagedIdentityProperties`](./data-types.md#Azure.ResourceManager.Foundations.ManagedIdentityProperties)\n- [`ManagedSystemIdentityProperties`](./data-types.md#Azure.ResourceManager.Foundations.ManagedSystemIdentityProperties)\n- [`Operation`](./data-types.md#Azure.ResourceManager.Foundations.Operation)\n- [`OperationDisplay`](./data-types.md#Azure.ResourceManager.Foundations.OperationDisplay)\n- [`OperationIdParameter`](./data-types.md#Azure.ResourceManager.Foundations.OperationIdParameter)\n- [`OperationListResult`](./data-types.md#Azure.ResourceManager.Foundations.OperationListResult)\n- [`OperationStatusResult`](./data-types.md#Azure.ResourceManager.Foundations.OperationStatusResult)\n- [`ProxyResourceBase`](./data-types.md#Azure.ResourceManager.Foundations.ProxyResourceBase)\n- [`ProxyResourceUpdateModel`](./data-types.md#Azure.ResourceManager.Foundations.ProxyResourceUpdateModel)\n- [`ResourceGroupBaseParameters`](./data-types.md#Azure.ResourceManager.Foundations.ResourceGroupBaseParameters)\n- [`ResourceGroupScope`](./data-types.md#Azure.ResourceManager.Foundations.ResourceGroupScope)\n- [`ResourcePlanType`](./data-types.md#Azure.ResourceManager.Foundations.ResourcePlanType)\n- [`ResourceSkuType`](./data-types.md#Azure.ResourceManager.Foundations.ResourceSkuType)\n- [`ResourceUpdateModel`](./data-types.md#Azure.ResourceManager.Foundations.ResourceUpdateModel)\n- [`ResourceUpdateModelProperties`](./data-types.md#Azure.ResourceManager.Foundations.ResourceUpdateModelProperties)\n- [`SubscriptionBaseParameters`](./data-types.md#Azure.ResourceManager.Foundations.SubscriptionBaseParameters)\n- [`SubscriptionScope`](./data-types.md#Azure.ResourceManager.Foundations.SubscriptionScope)\n- [`SystemData`](./data-types.md#Azure.ResourceManager.Foundations.SystemData)\n- [`TagsUpdateModel`](./data-types.md#Azure.ResourceManager.Foundations.TagsUpdateModel)\n- [`TenantBaseParameters`](./data-types.md#Azure.ResourceManager.Foundations.TenantBaseParameters)\n- [`TenantScope`](./data-types.md#Azure.ResourceManager.Foundations.TenantScope)\n- [`TrackedResourceBase`](./data-types.md#Azure.ResourceManager.Foundations.TrackedResourceBase)\n- [`UserAssignedIdentity`](./data-types.md#Azure.ResourceManager.Foundations.UserAssignedIdentity)\n", "file_path": "../../docs\\libraries\\azure-resource-manager\\reference\\index.mdx", "link_to_file": "file://../../docs\\libraries\\azure-resource-manager\\reference\\index.mdx"}, {"file_content": "---\ntitle: \"Interfaces and Operations\"\ntoc_min_heading_level: 2\ntoc_max_heading_level: 3\n---\n\n# Interfaces and Operations\n\n## Azure.ResourceManager\n\n### `ExtensionResourceCollectionOperations` {#Azure.ResourceManager.ExtensionResourceCollectionOperations}\n\nA composite interface for resource collections that include a paginated list operation.\n\n```typespec\ninterface Azure.ResourceManager.ExtensionResourceCollectionOperations<TResource>\n```\n\n#### Template Parameters\n\n| Name      | Description                                    |\n| --------- | ---------------------------------------------- |\n| TResource | The ArmResource that provides these operations |\n\n#### `ExtensionResourceCollectionOperations.list` {#Azure.ResourceManager.ExtensionResourceCollectionOperations.list}\n\n```typespec\nop Azure.ResourceManager.ExtensionResourceCollectionOperations.list(apiVersion: string, resourceUri: string, provider: Microsoft.ThisWillBeReplaced): Azure.ResourceManager.ArmResponse<Azure.ResourceManager.ResourceListResult<TResource>> | Azure.ResourceManager.ErrorResponse\n```\n\n### `ExtensionResourceInstanceOperations` {#Azure.ResourceManager.ExtensionResourceInstanceOperations}\n\nA composite interface for resources that includes CRUD operations.\n\n```typespec\ninterface Azure.ResourceManager.ExtensionResourceInstanceOperations<TResource, TProperties>\n```\n\n#### Template Parameters\n\n| Name        | Description                                    |\n| ----------- | ---------------------------------------------- |\n| TResource   | The ArmResource that provides these operations |\n| TProperties | RP-specific property bag for the resource      |\n\n#### `ExtensionResourceInstanceOperations.get` {#Azure.ResourceManager.ExtensionResourceInstanceOperations.get}\n\n```typespec\nop Azure.ResourceManager.ExtensionResourceInstanceOperations.get(apiVersion: string, resourceUri: string, provider: Microsoft.ThisWillBeReplaced): Azure.ResourceManager.ArmResponse<T> | Azure.ResourceManager.ErrorResponse\n```\n\n#### `ExtensionResourceInstanceOperations.createOrUpdate` {#Azure.ResourceManager.ExtensionResourceInstanceOperations.createOrUpdate}\n\n```typespec\nop Azure.ResourceManager.ExtensionResourceInstanceOperations.createOrUpdate(apiVersion: string, resourceUri: string, provider: Microsoft.ThisWillBeReplaced, resource: TResource): Azure.ResourceManager.ArmResourceUpdatedResponse<TResource> | Azure.ResourceManager.ArmResourceCreatedResponse<TResource> | Azure.ResourceManager.ErrorResponse\n```\n\n#### `ExtensionResourceInstanceOperations.update` {#Azure.ResourceManager.ExtensionResourceInstanceOperations.update}\n\n```typespec\nop Azure.ResourceManager.ExtensionResourceInstanceOperations.update(apiVersion: string, resourceUri: string, provider: Microsoft.ThisWillBeReplaced, properties: Azure.ResourceManager.Foundations.ResourceUpdateModel<TResource, TProperties>): Azure.ResourceManager.ArmResponse<T> | Azure.ResourceManager.ErrorResponse\n```\n\n#### `ExtensionResourceInstanceOperations.delete` {#Azure.ResourceManager.ExtensionResourceInstanceOperations.delete}\n\n```typespec\nop Azure.ResourceManager.ExtensionResourceInstanceOperations.delete(apiVersion: string, resourceUri: string, provider: Microsoft.ThisWillBeReplaced): Azure.ResourceManager.ArmDeletedResponse | Azure.ResourceManager.ArmDeleteAcceptedLroResponse | Azure.ResourceManager.ArmDeletedNoContentResponse | Azure.ResourceManager.ErrorResponse\n```\n\n### `ExtensionResourceOperations` {#Azure.ResourceManager.ExtensionResourceOperations}\n\nA composite interface for resources that include CRUD and list operations.\n\n```typespec\ninterface Azure.ResourceManager.ExtensionResourceOperations<TResource, TProperties>\n```\n\n#### Template Parameters\n\n| Name        | Description                                    |\n| ----------- | ---------------------------------------------- |\n| TResource   | The ArmResource that provides these operations |\n| TProperties | RP-specific property bag for the resource      |\n\n#### `ExtensionResourceOperations.get` {#Azure.ResourceManager.ExtensionResourceOperations.get}\n\n```typespec\nop Azure.ResourceManager.ExtensionResourceOperations.get(apiVersion: string, resourceUri: string, provider: Microsoft.ThisWillBeReplaced): Azure.ResourceManager.ArmResponse<T> | Azure.ResourceManager.ErrorResponse\n```\n\n#### `ExtensionResourceOperations.createOrUpdate` {#Azure.ResourceManager.ExtensionResourceOperations.createOrUpdate}\n\n```typespec\nop Azure.ResourceManager.ExtensionResourceOperations.createOrUpdate(apiVersion: string, resourceUri: string, provider: Microsoft.ThisWillBeReplaced, resource: TResource): Azure.ResourceManager.ArmResourceUpdatedResponse<TResource> | Azure.ResourceManager.ArmResourceCreatedResponse<TResource> | Azure.ResourceManager.ErrorResponse\n```\n\n#### `ExtensionResourceOperations.update` {#Azure.ResourceManager.ExtensionResourceOperations.update}\n\n```typespec\nop Azure.ResourceManager.ExtensionResourceOperations.update(apiVersion: string, resourceUri: string, provider: Microsoft.ThisWillBeReplaced, properties: Azure.ResourceManager.Foundations.ResourceUpdateModel<TResource, TProperties>): Azure.ResourceManager.ArmResponse<T> | Azure.ResourceManager.ErrorResponse\n```\n\n#### `ExtensionResourceOperations.delete` {#Azure.ResourceManager.ExtensionResourceOperations.delete}\n\n```typespec\nop Azure.ResourceManager.ExtensionResourceOperations.delete(apiVersion: string, resourceUri: string, provider: Microsoft.ThisWillBeReplaced): Azure.ResourceManager.ArmDeletedResponse | Azure.ResourceManager.ArmDeleteAcceptedLroResponse | Azure.ResourceManager.ArmDeletedNoContentResponse | Azure.ResourceManager.ErrorResponse\n```\n\n#### `ExtensionResourceOperations.list` {#Azure.ResourceManager.ExtensionResourceOperations.list}\n\n```typespec\nop Azure.ResourceManager.ExtensionResourceOperations.list(apiVersion: string, resourceUri: string, provider: Microsoft.ThisWillBeReplaced): Azure.ResourceManager.ArmResponse<Azure.ResourceManager.ResourceListResult<TResource>> | Azure.ResourceManager.ErrorResponse\n```\n\n### `Operations` {#Azure.ResourceManager.Operations}\n\nThis is the interface that implements the standard ARM operation that returns\nall supported RP operations. You should have exactly one declaration for each\nARM service. It implements\nGET \"/providers/Microsoft.ContosoProviderHub/operations\"\n\n```typespec\ninterface Azure.ResourceManager.Operations<>\n```\n\n#### `Operations.list` {#Azure.ResourceManager.Operations.list}\n\nList the operations for the provider\n\n```typespec\nop Azure.ResourceManager.Operations.list(apiVersion: string, provider: Microsoft.ThisWillBeReplaced): Azure.ResourceManager.ArmResponse<Azure.ResourceManager.Foundations.OperationListResult> | Azure.ResourceManager.ErrorResponse\n```\n\n### `ProxyResourceOperations` {#Azure.ResourceManager.ProxyResourceOperations}\n\nA composite interface for Proxy resources that include `ResourceInstanceOperations<TResource, TProperties>`\nand `ResourceListByParent<TResource>`. It includes: `GET`, `PUT`, `PATCH`, `DELETE`, ListByParent operations.\n\nThe actual route depends on the resource model but would have started with\n`/subscriptions/{id}/resourcegroups/{rg}/providers/Microsoft.XXX/...`\n\nThis is the most common API pattern for Proxy Resources to use.\n\n```typespec\ninterface Azure.ResourceManager.ProxyResourceOperations<TResource, TBaseParameters>\n```\n\n#### Template Parameters\n\n| Name            | Description                                      |\n| --------------- | ------------------------------------------------ |\n| TResource       | the ArmResource that provides these operations   |\n| TBaseParameters | The http parameters that are part of the request |\n\n#### `ProxyResourceOperations.get` {#Azure.ResourceManager.ProxyResourceOperations.get}\n\n```typespec\nop Azure.ResourceManager.ProxyResourceOperations.get(provider: Microsoft.ThisWillBeReplaced): Azure.ResourceManager.ArmResponse<T> | Azure.ResourceManager.ErrorResponse\n```\n\n#### `ProxyResourceOperations.createOrUpdate` {#Azure.ResourceManager.ProxyResourceOperations.createOrUpdate}\n\n```typespec\nop Azure.ResourceManager.ProxyResourceOperations.createOrUpdate(provider: Microsoft.ThisWillBeReplaced, resource: TResource): Azure.ResourceManager.ArmResourceUpdatedResponse<TResource> | Azure.ResourceManager.ArmResourceCreatedResponse<TResource> | Azure.ResourceManager.ErrorResponse\n```\n\n#### `ProxyResourceOperations.delete` {#Azure.ResourceManager.ProxyResourceOperations.delete}\n\n```typespec\nop Azure.ResourceManager.ProxyResourceOperations.delete(provider: Microsoft.ThisWillBeReplaced): Azure.ResourceManager.ArmDeletedResponse | Azure.ResourceManager.ArmDeleteAcceptedLroResponse | Azure.ResourceManager.ArmDeletedNoContentResponse | Azure.ResourceManager.ErrorResponse\n```\n\n#### `ProxyResourceOperations.listByResourceGroup` {#Azure.ResourceManager.ProxyResourceOperations.listByResourceGroup}\n\n```typespec\nop Azure.ResourceManager.ProxyResourceOperations.listByResourceGroup(provider: Microsoft.ThisWillBeReplaced): Azure.ResourceManager.ArmResponse<Azure.ResourceManager.ResourceListResult<TResource>> | Azure.ResourceManager.ErrorResponse\n```\n\n### `ResourceCollectionOperations` {#Azure.ResourceManager.ResourceCollectionOperations}\n\nA composite interface for resource collections.\n\n```typespec\ninterface Azure.ResourceManager.ResourceCollectionOperations<TResource, TBaseParameters>\n```\n\n#### Template Parameters\n\n| Name            | Description                                      |\n| --------------- | ------------------------------------------------ |\n| TResource       | The ArmResource that provides these operations   |\n| TBaseParameters | The http parameters that are part of the request |\n\n#### `ResourceCollectionOperations.listByResourceGroup` {#Azure.ResourceManager.ResourceCollectionOperations.listByResourceGroup}\n\n```typespec\nop Azure.ResourceManager.ResourceCollectionOperations.listByResourceGroup(provider: Microsoft.ThisWillBeReplaced): Azure.ResourceManager.ArmResponse<Azure.ResourceManager.ResourceListResult<TResource>> | Azure.ResourceManager.ErrorResponse\n```\n\n#### `ResourceCollectionOperations.listBySubscription` {#Azure.ResourceManager.ResourceCollectionOperations.listBySubscription}\n\n```typespec\nop Azure.ResourceManager.ResourceCollectionOperations.listBySubscription(apiVersion: string, subscriptionId: string, provider: Microsoft.ThisWillBeReplaced): Azure.ResourceManager.ArmResponse<Azure.ResourceManager.ResourceListResult<TResource>> | Azure.ResourceManager.ErrorResponse\n```\n\n### `ResourceCreateAsync` {#Azure.ResourceManager.ResourceCreateAsync}\n\nA composite interface for resources that include a long-running create or update operation.\n\n```typespec\ninterface Azure.ResourceManager.ResourceCreateAsync<TResource, TBaseParameters>\n```\n\n#### Template Parameters\n\n| Name            | Description                                      |\n| --------------- | ------------------------------------------------ |\n| TResource       | The ArmResource that provides these operations   |\n| TBaseParameters | The http parameters that are part of the request |\n\n#### `ResourceCreateAsync.createOrUpdate` {#Azure.ResourceManager.ResourceCreateAsync.createOrUpdate}\n\n```typespec\nop Azure.ResourceManager.ResourceCreateAsync.createOrUpdate(provider: Microsoft.ThisWillBeReplaced, resource: TResource): Azure.ResourceManager.ArmResourceUpdatedResponse<TResource> | Azure.ResourceManager.ArmResourceCreatedResponse<TResource> | Azure.ResourceManager.ErrorResponse\n```\n\n### `ResourceCreateSync` {#Azure.ResourceManager.ResourceCreateSync}\n\nA composite interface for resources that include a synchronous create or update operation.\n\n```typespec\ninterface Azure.ResourceManager.ResourceCreateSync<TResource, TBaseParameters>\n```\n\n#### Template Parameters\n\n| Name            | Description                                      |\n| --------------- | ------------------------------------------------ |\n| TResource       | The ArmResource that provides these operations   |\n| TBaseParameters | The http parameters that are part of the request |\n\n#### `ResourceCreateSync.createOrUpdate` {#Azure.ResourceManager.ResourceCreateSync.createOrUpdate}\n\n```typespec\nop Azure.ResourceManager.ResourceCreateSync.createOrUpdate(provider: Microsoft.ThisWillBeReplaced, resource: TResource): Azure.ResourceManager.ArmResponse<T> | Azure.ResourceManager.ErrorResponse\n```\n\n### `ResourceDeleteAsync` {#Azure.ResourceManager.ResourceDeleteAsync}\n\n```typespec\ninterface Azure.ResourceManager.ResourceDeleteAsync<TResource, TBaseParameters>\n```\n\n#### Template Parameters\n\n| Name            | Description                                      |\n| --------------- | ------------------------------------------------ |\n| TResource       | The ArmResource that provides these operations   |\n| TBaseParameters | The http parameters that are part of the request |\n\n#### `ResourceDeleteAsync.delete` {#Azure.ResourceManager.ResourceDeleteAsync.delete}\n\n```typespec\nop Azure.ResourceManager.ResourceDeleteAsync.delete(provider: Microsoft.ThisWillBeReplaced): Azure.ResourceManager.ArmDeletedResponse | Azure.ResourceManager.ArmDeleteAcceptedLroResponse | Azure.ResourceManager.ArmDeletedNoContentResponse | Azure.ResourceManager.ErrorResponse\n```\n\n### `ResourceDeleteSync` {#Azure.ResourceManager.ResourceDeleteSync}\n\nA composite interface for resources that include a synchronous delete operation.\n\n```typespec\ninterface Azure.ResourceManager.ResourceDeleteSync<TResource, TBaseParameters>\n```\n\n#### Template Parameters\n\n| Name            | Description                                      |\n| --------------- | ------------------------------------------------ |\n| TResource       | The ArmResource that provides these operations   |\n| TBaseParameters | The http parameters that are part of the request |\n\n#### `ResourceDeleteSync.delete` {#Azure.ResourceManager.ResourceDeleteSync.delete}\n\n```typespec\nop Azure.ResourceManager.ResourceDeleteSync.delete(provider: Microsoft.ThisWillBeReplaced): Azure.ResourceManager.ArmDeletedResponse | Azure.ResourceManager.ArmDeletedNoContentResponse | Azure.ResourceManager.ErrorResponse\n```\n\n### `ResourceDeleteWithoutOkAsync` {#Azure.ResourceManager.ResourceDeleteWithoutOkAsync}\n\n```typespec\ninterface Azure.ResourceManager.ResourceDeleteWithoutOkAsync<TResource, TBaseParameters>\n```\n\n#### Template Parameters\n\n| Name            | Description                                      |\n| --------------- | ------------------------------------------------ |\n| TResource       | The ArmResource that provides these operations   |\n| TBaseParameters | The http parameters that are part of the request |\n\n#### `ResourceDeleteWithoutOkAsync.delete` {#Azure.ResourceManager.ResourceDeleteWithoutOkAsync.delete}\n\n```typespec\nop Azure.ResourceManager.ResourceDeleteWithoutOkAsync.delete(provider: Microsoft.ThisWillBeReplaced): Azure.ResourceManager.ArmDeleteAcceptedLroResponse | Azure.ResourceManager.ArmDeletedNoContentResponse | Azure.ResourceManager.ErrorResponse\n```\n\n### `ResourceInstanceOperations` {#Azure.ResourceManager.ResourceInstanceOperations}\n\nA composite interface for resources that have CRUD operations.\n\n```typespec\ninterface Azure.ResourceManager.ResourceInstanceOperations<TResource, TProperties, TBaseParameters, TPatchModel>\n```\n\n#### Template Parameters\n\n| Name            | Description                                      |\n| --------------- | ------------------------------------------------ |\n| TResource       | The ArmResource that provides these operations   |\n| TProperties     | RP-specific property bag for the resource        |\n| TBaseParameters | The http parameters that are part of the request |\n| TPatchModel     | The model used for PATCH operations              |\n\n#### `ResourceInstanceOperations.get` {#Azure.ResourceManager.ResourceInstanceOperations.get}\n\n```typespec\nop Azure.ResourceManager.ResourceInstanceOperations.get(provider: Microsoft.ThisWillBeReplaced): Azure.ResourceManager.ArmResponse<T> | Azure.ResourceManager.ErrorResponse\n```\n\n#### `ResourceInstanceOperations.createOrUpdate` {#Azure.ResourceManager.ResourceInstanceOperations.createOrUpdate}\n\n```typespec\nop Azure.ResourceManager.ResourceInstanceOperations.createOrUpdate(provider: Microsoft.ThisWillBeReplaced, resource: TResource): Azure.ResourceManager.ArmResourceUpdatedResponse<TResource> | Azure.ResourceManager.ArmResourceCreatedResponse<TResource> | Azure.ResourceManager.ErrorResponse\n```\n\n#### `ResourceInstanceOperations.update` {#Azure.ResourceManager.ResourceInstanceOperations.update}\n\n```typespec\nop Azure.ResourceManager.ResourceInstanceOperations.update(provider: Microsoft.ThisWillBeReplaced, properties: Azure.ResourceManager.Foundations.ResourceUpdateModel<TResource, TProperties>): Azure.ResourceManager.ArmResponse<T> | Azure.ResourceManager.ErrorResponse\n```\n\n#### `ResourceInstanceOperations.delete` {#Azure.ResourceManager.ResourceInstanceOperations.delete}\n\n```typespec\nop Azure.ResourceManager.ResourceInstanceOperations.delete(provider: Microsoft.ThisWillBeReplaced): Azure.ResourceManager.ArmDeletedResponse | Azure.ResourceManager.ArmDeleteAcceptedLroResponse | Azure.ResourceManager.ArmDeletedNoContentResponse | Azure.ResourceManager.ErrorResponse\n```\n\n### `ResourceListByParent` {#Azure.ResourceManager.ResourceListByParent}\n\nAn interface for resources which can be listed by parent.\n\n```typespec\ninterface Azure.ResourceManager.ResourceListByParent<TResource, TBaseParameters, TParentName, TParentFriendlyName>\n```\n\n#### Template Parameters\n\n| Name                | Description                                      |\n| ------------------- | ------------------------------------------------ |\n| TResource           | The ArmResource that provides these operations   |\n| TBaseParameters     | The http parameters that are part of the request |\n| TParentName         | The name of the parent resource                  |\n| TParentFriendlyName | The friendly name of the parent resource         |\n\n#### `ResourceListByParent.listByParent` {#Azure.ResourceManager.ResourceListByParent.listByParent}\n\n```typespec\nop Azure.ResourceManager.ResourceListByParent.listByParent(provider: Microsoft.ThisWillBeReplaced): Azure.ResourceManager.ArmResponse<Azure.ResourceManager.ResourceListResult<TResource>> | Azure.ResourceManager.ErrorResponse\n```\n\n### `ResourceListBySubscription` {#Azure.ResourceManager.ResourceListBySubscription}\n\nAn interface for resources with can be listed by subscription.\n\n```typespec\ninterface Azure.ResourceManager.ResourceListBySubscription<TResource>\n```\n\n#### Template Parameters\n\n| Name      | Description                                    |\n| --------- | ---------------------------------------------- |\n| TResource | The ArmResource that provides these operations |\n\n#### `ResourceListBySubscription.listBySubscription` {#Azure.ResourceManager.ResourceListBySubscription.listBySubscription}\n\n```typespec\nop Azure.ResourceManager.ResourceListBySubscription.listBySubscription(apiVersion: string, subscriptionId: string, provider: Microsoft.ThisWillBeReplaced): Azure.ResourceManager.ArmResponse<Azure.ResourceManager.ResourceListResult<TResource>> | Azure.ResourceManager.ErrorResponse\n```\n\n### `ResourceOperations` {#Azure.ResourceManager.ResourceOperations}\n\n```typespec\ninterface Azure.ResourceManager.ResourceOperations<TResource, TProperties, TBaseParameters>\n```\n\n#### Template Parameters\n\n| Name            | Description                                      |\n| --------------- | ------------------------------------------------ |\n| TResource       | the ArmResource that provides these operations   |\n| TProperties     | RP-specific property bag for the resource        |\n| TBaseParameters | The http parameters that are part of the request |\n\n#### `ResourceOperations.get` {#Azure.ResourceManager.ResourceOperations.get}\n\n```typespec\nop Azure.ResourceManager.ResourceOperations.get(provider: Microsoft.ThisWillBeReplaced): Azure.ResourceManager.ArmResponse<T> | Azure.ResourceManager.ErrorResponse\n```\n\n#### `ResourceOperations.createOrUpdate` {#Azure.ResourceManager.ResourceOperations.createOrUpdate}\n\n```typespec\nop Azure.ResourceManager.ResourceOperations.createOrUpdate(provider: Microsoft.ThisWillBeReplaced, resource: TResource): Azure.ResourceManager.ArmResourceUpdatedResponse<TResource> | Azure.ResourceManager.ArmResourceCreatedResponse<TResource> | Azure.ResourceManager.ErrorResponse\n```\n\n#### `ResourceOperations.update` {#Azure.ResourceManager.ResourceOperations.update}\n\n```typespec\nop Azure.ResourceManager.ResourceOperations.update(provider: Microsoft.ThisWillBeReplaced, properties: Azure.ResourceManager.Foundations.ResourceUpdateModel<TResource, TProperties>): Azure.ResourceManager.ArmResponse<T> | Azure.ResourceManager.ErrorResponse\n```\n\n#### `ResourceOperations.delete` {#Azure.ResourceManager.ResourceOperations.delete}\n\n```typespec\nop Azure.ResourceManager.ResourceOperations.delete(provider: Microsoft.ThisWillBeReplaced): Azure.ResourceManager.ArmDeletedResponse | Azure.ResourceManager.ArmDeleteAcceptedLroResponse | Azure.ResourceManager.ArmDeletedNoContentResponse | Azure.ResourceManager.ErrorResponse\n```\n\n#### `ResourceOperations.listByResourceGroup` {#Azure.ResourceManager.ResourceOperations.listByResourceGroup}\n\n```typespec\nop Azure.ResourceManager.ResourceOperations.listByResourceGroup(provider: Microsoft.ThisWillBeReplaced): Azure.ResourceManager.ArmResponse<Azure.ResourceManager.ResourceListResult<TResource>> | Azure.ResourceManager.ErrorResponse\n```\n\n#### `ResourceOperations.listBySubscription` {#Azure.ResourceManager.ResourceOperations.listBySubscription}\n\n```typespec\nop Azure.ResourceManager.ResourceOperations.listBySubscription(apiVersion: string, subscriptionId: string, provider: Microsoft.ThisWillBeReplaced): Azure.ResourceManager.ArmResponse<Azure.ResourceManager.ResourceListResult<TResource>> | Azure.ResourceManager.ErrorResponse\n```\n\n### `ResourceRead` {#Azure.ResourceManager.ResourceRead}\n\nA composite interface for resources that include a GET operation.\n\n```typespec\ninterface Azure.ResourceManager.ResourceRead<TResource, TBaseParameters>\n```\n\n#### Template Parameters\n\n| Name            | Description                                      |\n| --------------- | ------------------------------------------------ |\n| TResource       | The ArmResource that provides these operations   |\n| TBaseParameters | The http parameters that are part of the request |\n\n#### `ResourceRead.get` {#Azure.ResourceManager.ResourceRead.get}\n\n```typespec\nop Azure.ResourceManager.ResourceRead.get(provider: Microsoft.ThisWillBeReplaced): Azure.ResourceManager.ArmResponse<T> | Azure.ResourceManager.ErrorResponse\n```\n\n### `ResourceUpdateAsync` {#Azure.ResourceManager.ResourceUpdateAsync}\n\n```typespec\ninterface Azure.ResourceManager.ResourceUpdateAsync<TResource, TProperties, TBaseParameters>\n```\n\n#### Template Parameters\n\n| Name            | Description                                      |\n| --------------- | ------------------------------------------------ |\n| TResource       | The ArmResource that provides these operations   |\n| TProperties     | RP-specific property bag for the resource        |\n| TBaseParameters | The http parameters that are part of the request |\n\n#### `ResourceUpdateAsync.update` {#Azure.ResourceManager.ResourceUpdateAsync.update}\n\n```typespec\nop Azure.ResourceManager.ResourceUpdateAsync.update(provider: Microsoft.ThisWillBeReplaced, properties: Azure.ResourceManager.Foundations.ResourceUpdateModel<TResource, TProperties>): Azure.ResourceManager.ArmResponse<T> | Azure.ResourceManager.ArmAcceptedLroResponse<Resource update request accepted.> | Azure.ResourceManager.ErrorResponse\n```\n\n### `ResourceUpdateSync` {#Azure.ResourceManager.ResourceUpdateSync}\n\nA composite interface for resources that include a synchronous update operation.\n\n```typespec\ninterface Azure.ResourceManager.ResourceUpdateSync<TResource, TProperties, TBaseParameters>\n```\n\n#### Template Parameters\n\n| Name            | Description                                      |\n| --------------- | ------------------------------------------------ |\n| TResource       | The ArmResource that provides these operations   |\n| TProperties     | RP-specific property bag for the resource        |\n| TBaseParameters | The http parameters that are part of the request |\n\n#### `ResourceUpdateSync.update` {#Azure.ResourceManager.ResourceUpdateSync.update}\n\n```typespec\nop Azure.ResourceManager.ResourceUpdateSync.update(provider: Microsoft.ThisWillBeReplaced, properties: Azure.ResourceManager.Foundations.ResourceUpdateModel<TResource, TProperties>): Azure.ResourceManager.ArmResponse<T> | Azure.ResourceManager.ErrorResponse\n```\n\n### `TenantResourceOperations` {#Azure.ResourceManager.TenantResourceOperations}\n\nA composite interface for Tenant resources that include `ResourceInstanceOperations<TResource, TProperties>`\nand `ResourceListByParent<TResource>`. It includes: `GET`, `PUT`, `PATCH`, `DELETE`, ListByParent operations.\n\nThe routes are always start at root level:\n`/providers/Microsoft.XXX/...`\n\nThis is the most common API pattern for Tenant Resources to use.\n\n```typespec\ninterface Azure.ResourceManager.TenantResourceOperations<TResource, TProperties>\n```\n\n#### Template Parameters\n\n| Name        | Description                                    |\n| ----------- | ---------------------------------------------- |\n| TResource   | the ArmResource that provides these operations |\n| TProperties | RP-specific property bag for the resource      |\n\n#### `TenantResourceOperations.get` {#Azure.ResourceManager.TenantResourceOperations.get}\n\n```typespec\nop Azure.ResourceManager.TenantResourceOperations.get(apiVersion: string, provider: Microsoft.ThisWillBeReplaced): Azure.ResourceManager.ArmResponse<T> | Azure.ResourceManager.ErrorResponse\n```\n\n#### `TenantResourceOperations.createOrUpdate` {#Azure.ResourceManager.TenantResourceOperations.createOrUpdate}\n\n```typespec\nop Azure.ResourceManager.TenantResourceOperations.createOrUpdate(apiVersion: string, provider: Microsoft.ThisWillBeReplaced, resource: TResource): Azure.ResourceManager.ArmResourceUpdatedResponse<TResource> | Azure.ResourceManager.ArmResourceCreatedResponse<TResource> | Azure.ResourceManager.ErrorResponse\n```\n\n#### `TenantResourceOperations.update` {#Azure.ResourceManager.TenantResourceOperations.update}\n\n```typespec\nop Azure.ResourceManager.TenantResourceOperations.update(apiVersion: string, provider: Microsoft.ThisWillBeReplaced, properties: Azure.ResourceManager.Foundations.ResourceUpdateModel<TResource, TProperties>): Azure.ResourceManager.ArmResponse<T> | Azure.ResourceManager.ErrorResponse\n```\n\n#### `TenantResourceOperations.delete` {#Azure.ResourceManager.TenantResourceOperations.delete}\n\n```typespec\nop Azure.ResourceManager.TenantResourceOperations.delete(apiVersion: string, provider: Microsoft.ThisWillBeReplaced): Azure.ResourceManager.ArmDeletedResponse | Azure.ResourceManager.ArmDeleteAcceptedLroResponse | Azure.ResourceManager.ArmDeletedNoContentResponse | Azure.ResourceManager.ErrorResponse\n```\n\n#### `TenantResourceOperations.listByTenant` {#Azure.ResourceManager.TenantResourceOperations.listByTenant}\n\n```typespec\nop Azure.ResourceManager.TenantResourceOperations.listByTenant(apiVersion: string, provider: Microsoft.ThisWillBeReplaced): Azure.ResourceManager.ArmResponse<Azure.ResourceManager.ResourceListResult<TResource>> | Azure.ResourceManager.ErrorResponse\n```\n\n### `TrackedResourceOperations` {#Azure.ResourceManager.TrackedResourceOperations}\n\nA composite interface for resources that include `ResourceInstanceOperations<TResource, TProperties>`\nand `ResourceCollectionOperations<TResource>`. It includes: `GET`, `PUT`, `PATCH`, `DELETE`, ListByParent,\nListBySubscription operations. The actual route depends on the resource model.\nThis is the most common API pattern for Tracked Resources to use.\n\n```typespec\ninterface Azure.ResourceManager.TrackedResourceOperations<TResource, TProperties, TBaseParameters>\n```\n\n#### Template Parameters\n\n| Name            | Description                                      |\n| --------------- | ------------------------------------------------ |\n| TResource       | the ArmResource that provides these operations   |\n| TProperties     | RP-specific property bag for the resource        |\n| TBaseParameters | The http parameters that are part of the request |\n\n#### `TrackedResourceOperations.get` {#Azure.ResourceManager.TrackedResourceOperations.get}\n\n```typespec\nop Azure.ResourceManager.TrackedResourceOperations.get(provider: Microsoft.ThisWillBeReplaced): Azure.ResourceManager.ArmResponse<T> | Azure.ResourceManager.ErrorResponse\n```\n\n#### `TrackedResourceOperations.createOrUpdate` {#Azure.ResourceManager.TrackedResourceOperations.createOrUpdate}\n\n```typespec\nop Azure.ResourceManager.TrackedResourceOperations.createOrUpdate(provider: Microsoft.ThisWillBeReplaced, resource: TResource): Azure.ResourceManager.ArmResourceUpdatedResponse<TResource> | Azure.ResourceManager.ArmResourceCreatedResponse<TResource> | Azure.ResourceManager.ErrorResponse\n```\n\n#### `TrackedResourceOperations.update` {#Azure.ResourceManager.TrackedResourceOperations.update}\n\n```typespec\nop Azure.ResourceManager.TrackedResourceOperations.update(provider: Microsoft.ThisWillBeReplaced, properties: Azure.ResourceManager.Foundations.ResourceUpdateModel<TResource, TProperties>): Azure.ResourceManager.ArmResponse<T> | Azure.ResourceManager.ErrorResponse\n```\n\n#### `TrackedResourceOperations.delete` {#Azure.ResourceManager.TrackedResourceOperations.delete}\n\n```typespec\nop Azure.ResourceManager.TrackedResourceOperations.delete(provider: Microsoft.ThisWillBeReplaced): Azure.ResourceManager.ArmDeletedResponse | Azure.ResourceManager.ArmDeleteAcceptedLroResponse | Azure.ResourceManager.ArmDeletedNoContentResponse | Azure.ResourceManager.ErrorResponse\n```\n\n#### `TrackedResourceOperations.listByResourceGroup` {#Azure.ResourceManager.TrackedResourceOperations.listByResourceGroup}\n\n```typespec\nop Azure.ResourceManager.TrackedResourceOperations.listByResourceGroup(provider: Microsoft.ThisWillBeReplaced): Azure.ResourceManager.ArmResponse<Azure.ResourceManager.ResourceListResult<TResource>> | Azure.ResourceManager.ErrorResponse\n```\n\n#### `TrackedResourceOperations.listBySubscription` {#Azure.ResourceManager.TrackedResourceOperations.listBySubscription}\n\n```typespec\nop Azure.ResourceManager.TrackedResourceOperations.listBySubscription(apiVersion: string, subscriptionId: string, provider: Microsoft.ThisWillBeReplaced): Azure.ResourceManager.ArmResponse<Azure.ResourceManager.ResourceListResult<TResource>> | Azure.ResourceManager.ErrorResponse\n```\n\n### `ArmCustomPatchAsync` {#Azure.ResourceManager.ArmCustomPatchAsync}\n\nA long-running resource update using a custom PATCH payload (Asynchronous)\n\n```typespec\nop Azure.ResourceManager.ArmCustomPatchAsync(provider: Microsoft.ThisWillBeReplaced, properties: TPatchModel): Azure.ResourceManager.ArmResponse<T> | Azure.ResourceManager.ArmAcceptedLroResponse<Resource update request accepted.> | Azure.ResourceManager.ErrorResponse\n```\n\n#### Template Parameters\n\n| Name            | Description                                          |\n| --------------- | ---------------------------------------------------- |\n| TResource       | the resource being patched                           |\n| TPatchModel     | The input model for the PATCH request                |\n| TBaseParameters | Optional. Allows overriding the operation parameters |\n\n### `ArmCustomPatchSync` {#Azure.ResourceManager.ArmCustomPatchSync}\n\nA resource update using a custom PATCH payload (synchronous)\n\n```typespec\nop Azure.ResourceManager.ArmCustomPatchSync(provider: Microsoft.ThisWillBeReplaced, properties: TPatchModel): Azure.ResourceManager.ArmResponse<T> | Azure.ResourceManager.ErrorResponse\n```\n\n#### Template Parameters\n\n| Name            | Description                                          |\n| --------------- | ---------------------------------------------------- |\n| TResource       | the resource being patched                           |\n| TPatchModel     | The input model for the PATCH request                |\n| TBaseParameters | Optional. Allows overriding the operation parameters |\n\n### `ArmListBySubscription` {#Azure.ResourceManager.ArmListBySubscription}\n\nA resource list operation, at the subscription scope\n\n```typespec\nop Azure.ResourceManager.ArmListBySubscription(apiVersion: string, subscriptionId: string, provider: Microsoft.ThisWillBeReplaced): Azure.ResourceManager.ArmResponse<Azure.ResourceManager.ResourceListResult<TResource>> | Azure.ResourceManager.ErrorResponse\n```\n\n#### Template Parameters\n\n| Name      | Description                |\n| --------- | -------------------------- |\n| TResource | the resource being patched |\n\n### `ArmResourceActionAsync` {#Azure.ResourceManager.ArmResourceActionAsync}\n\nA long-running resource action.\n\n```typespec\nop Azure.ResourceManager.ArmResourceActionAsync(provider: Microsoft.ThisWillBeReplaced, body: TRequest): Azure.ResourceManager.ArmAcceptedLroResponse<Resource operation accepted.> | Azure.ResourceManager.ArmResponse<T> | Azure.ResourceManager.ErrorResponse\n```\n\n#### Template Parameters\n\n| Name            | Description                                                  |\n| --------------- | ------------------------------------------------------------ |\n| TResource       | The resource being acted upon                                |\n| TRequest        | The request model for the action                             |\n| TResponse       | The response model for the action                            |\n| TBaseParameters | Optional. Allows overriding the parameters for the operation |\n\n### `ArmResourceActionAsyncBase` {#Azure.ResourceManager.ArmResourceActionAsyncBase}\n\nA long-running resource action.\n\n```typespec\nop Azure.ResourceManager.ArmResourceActionAsyncBase(provider: Microsoft.ThisWillBeReplaced, body: TRequest): TResponse | Azure.ResourceManager.ErrorResponse\n```\n\n#### Template Parameters\n\n| Name            | Description                                                  |\n| --------------- | ------------------------------------------------------------ |\n| TResource       | The resource being acted upon                                |\n| TRequest        | The request model for the action                             |\n| TResponse       | The response type for the action                             |\n| TBaseParameters | Optional. Allows overriding the parameters for the operation |\n\n### `ArmResourceActionNoContentAsync` {#Azure.ResourceManager.ArmResourceActionNoContentAsync}\n\nA long-running resource action that returns no content. DEPRECATED: Use 'ArmResourceActionNoResponseContentAsync' instead\n\n```typespec\nop Azure.ResourceManager.ArmResourceActionNoContentAsync(provider: Microsoft.ThisWillBeReplaced, body: TRequest): Azure.ResourceManager.ArmAcceptedLroResponse<Resource operation accepted.> | Azure.ResourceManager.ArmNoContentResponse<Action completed successfully.> | Azure.ResourceManager.ErrorResponse\n```\n\n#### Template Parameters\n\n| Name            | Description                                                  |\n| --------------- | ------------------------------------------------------------ |\n| TResource       | The resource being acted upon                                |\n| TRequest        | The request model for the action                             |\n| TBaseParameters | Optional. Allows overriding the parameters for the operation |\n\n### `ArmResourceActionNoContentSync` {#Azure.ResourceManager.ArmResourceActionNoContentSync}\n\nA synchronous resource action that returns no content.\n\n```typespec\nop Azure.ResourceManager.ArmResourceActionNoContentSync(provider: Microsoft.ThisWillBeReplaced, body: TRequest): Azure.ResourceManager.ArmNoContentResponse<Action completed successfully.> | Azure.ResourceManager.ErrorResponse\n```\n\n#### Template Parameters\n\n| Name            | Description                                                  |\n| --------------- | ------------------------------------------------------------ |\n| TResource       | The resource being acted upon                                |\n| TRequest        | The request model for the action                             |\n| TBaseParameters | Optional. Allows overriding the parameters for the operation |\n\n### `ArmResourceActionNoResponseContentAsync` {#Azure.ResourceManager.ArmResourceActionNoResponseContentAsync}\n\nA long-running resource action that returns no content.\n\n```typespec\nop Azure.ResourceManager.ArmResourceActionNoResponseContentAsync(provider: Microsoft.ThisWillBeReplaced, body: TRequest): Azure.ResourceManager.ArmAcceptedLroResponse<Resource operation accepted.> | Azure.ResourceManager.ErrorResponse\n```\n\n#### Template Parameters\n\n| Name            | Description                                                  |\n| --------------- | ------------------------------------------------------------ |\n| TResource       | The resource being acted upon                                |\n| TRequest        | The request model for the action                             |\n| TBaseParameters | Optional. Allows overriding the parameters for the operation |\n\n### `ArmResourceActionSync` {#Azure.ResourceManager.ArmResourceActionSync}\n\nA synchronous resource action.\n\n```typespec\nop Azure.ResourceManager.ArmResourceActionSync(provider: Microsoft.ThisWillBeReplaced, body: TRequest): Azure.ResourceManager.ArmResponse<T> | Azure.ResourceManager.ErrorResponse\n```\n\n#### Template Parameters\n\n| Name            | Description                                                  |\n| --------------- | ------------------------------------------------------------ |\n| TResource       | The resource being acted upon                                |\n| TRequest        | The request model for the action                             |\n| TResponse       | The response model for the action                            |\n| TBaseParameters | Optional. Allows overriding the parameters for the operation |\n\n### `ArmResourceCreateOrReplaceSync` {#Azure.ResourceManager.ArmResourceCreateOrReplaceSync}\n\nSynchronous PUT operation for ARM resources\n\n```typespec\nop Azure.ResourceManager.ArmResourceCreateOrReplaceSync(provider: Microsoft.ThisWillBeReplaced, resource: TResource): Azure.ResourceManager.ArmResourceUpdatedResponse<TResource> | Azure.ResourceManager.ArmResourceCreatedSyncResponse<TResource> | Azure.ResourceManager.ErrorResponse\n```\n\n#### Template Parameters\n\n| Name            | Description                                          |\n| --------------- | ---------------------------------------------------- |\n| TResource       | the resource being patched                           |\n| TBaseParameters | Optional. Allows overriding the operation parameters |\n\n### `ArmResourceCreateOrUpdateAsync` {#Azure.ResourceManager.ArmResourceCreateOrUpdateAsync}\n\nA long-running resource CreateOrUpdate (PUT)\n\n```typespec\nop Azure.ResourceManager.ArmResourceCreateOrUpdateAsync(provider: Microsoft.ThisWillBeReplaced, resource: TResource): Azure.ResourceManager.ArmResourceUpdatedResponse<TResource> | Azure.ResourceManager.ArmResourceCreatedResponse<TResource> | Azure.ResourceManager.ErrorResponse\n```\n\n#### Template Parameters\n\n| Name            | Description                                          |\n| --------------- | ---------------------------------------------------- |\n| TResource       | the resource being patched                           |\n| TBaseParameters | Optional. Allows overriding the operation parameters |\n\n### `ArmResourceCreateOrUpdateSync` {#Azure.ResourceManager.ArmResourceCreateOrUpdateSync}\n\nDEPRECATED: Please use ArmResourceCreateOrReplaceSync instead\n\n```typespec\nop Azure.ResourceManager.ArmResourceCreateOrUpdateSync(provider: Microsoft.ThisWillBeReplaced, resource: TResource): Azure.ResourceManager.ArmResponse<T> | Azure.ResourceManager.ErrorResponse\n```\n\n#### Template Parameters\n\n| Name            | Description                                          |\n| --------------- | ---------------------------------------------------- |\n| TResource       | the resource being patched                           |\n| TBaseParameters | Optional. Allows overriding the operation parameters |\n\n### `ArmResourceDeleteAsync` {#Azure.ResourceManager.ArmResourceDeleteAsync}\n\n```typespec\nop Azure.ResourceManager.ArmResourceDeleteAsync(provider: Microsoft.ThisWillBeReplaced): Azure.ResourceManager.ArmDeletedResponse | Azure.ResourceManager.ArmDeleteAcceptedLroResponse | Azure.ResourceManager.ArmDeletedNoContentResponse | Azure.ResourceManager.ErrorResponse\n```\n\n#### Template Parameters\n\n| Name            | Description                                                  |\n| --------------- | ------------------------------------------------------------ |\n| TResource       | The resource being deleted                                   |\n| TBaseParameters | Optional. Allows overriding the parameters for the operation |\n\n### `ArmResourceDeleteAsyncBase` {#Azure.ResourceManager.ArmResourceDeleteAsyncBase}\n\n```typespec\nop Azure.ResourceManager.ArmResourceDeleteAsyncBase(provider: Microsoft.ThisWillBeReplaced): TResponse | Azure.ResourceManager.ErrorResponse\n```\n\n#### Template Parameters\n\n| Name            | Description                                                  |\n| --------------- | ------------------------------------------------------------ |\n| TResource       | The resource being deleted                                   |\n| TResponse       | The response type for the operation                          |\n| TBaseParameters | Optional. Allows overriding the parameters for the operation |\n\n### `ArmResourceDeleteSync` {#Azure.ResourceManager.ArmResourceDeleteSync}\n\nDelete a resource synchronously\n\n```typespec\nop Azure.ResourceManager.ArmResourceDeleteSync(provider: Microsoft.ThisWillBeReplaced): Azure.ResourceManager.ArmDeletedResponse | Azure.ResourceManager.ArmDeletedNoContentResponse | Azure.ResourceManager.ErrorResponse\n```\n\n#### Template Parameters\n\n| Name            | Description                                                  |\n| --------------- | ------------------------------------------------------------ |\n| TResource       | The resource being deleted                                   |\n| TBaseParameters | Optional. Allows overriding the parameters for the operation |\n\n### `ArmResourceDeleteWithoutOkAsync` {#Azure.ResourceManager.ArmResourceDeleteWithoutOkAsync}\n\n```typespec\nop Azure.ResourceManager.ArmResourceDeleteWithoutOkAsync(provider: Microsoft.ThisWillBeReplaced): Azure.ResourceManager.ArmDeleteAcceptedLroResponse | Azure.ResourceManager.ArmDeletedNoContentResponse | Azure.ResourceManager.ErrorResponse\n```\n\n#### Template Parameters\n\n| Name            | Description                                                  |\n| --------------- | ------------------------------------------------------------ |\n| TResource       | The resource being deleted                                   |\n| TBaseParameters | Optional. Allows overriding the parameters for the operation |\n\n### `ArmResourceListAtScope` {#Azure.ResourceManager.ArmResourceListAtScope}\n\nA resource list operation, with scope determined by TBaseParameters\n\n```typespec\nop Azure.ResourceManager.ArmResourceListAtScope(provider: Microsoft.ThisWillBeReplaced): Azure.ResourceManager.ArmResponse<Azure.ResourceManager.ResourceListResult<TResource>> | Azure.ResourceManager.ErrorResponse\n```\n\n#### Template Parameters\n\n| Name            | Description                                          |\n| --------------- | ---------------------------------------------------- |\n| TResource       | the resource being patched                           |\n| TBaseParameters | Optional. Allows overriding the operation parameters |\n\n### `ArmResourceListByParent` {#Azure.ResourceManager.ArmResourceListByParent}\n\nA resource list operation, at the scope of the resource's parent\n\n```typespec\nop Azure.ResourceManager.ArmResourceListByParent(provider: Microsoft.ThisWillBeReplaced): Azure.ResourceManager.ArmResponse<Azure.ResourceManager.ResourceListResult<TResource>> | Azure.ResourceManager.ErrorResponse\n```\n\n#### Template Parameters\n\n| Name                | Description                                          |\n| ------------------- | ---------------------------------------------------- |\n| TResource           | the resource being patched                           |\n| TBaseParameters     | Optional. Allows overriding the operation parameters |\n| TParentName         | Optional. The name of the parent resource            |\n| TParentFriendlyName | Optional. The friendly name of the parent resource   |\n\n### `ArmResourceRead` {#Azure.ResourceManager.ArmResourceRead}\n\nA resource GET operation\n\n```typespec\nop Azure.ResourceManager.ArmResourceRead(provider: Microsoft.ThisWillBeReplaced): Azure.ResourceManager.ArmResponse<T> | Azure.ResourceManager.ErrorResponse\n```\n\n#### Template Parameters\n\n| Name            | Description                                          |\n| --------------- | ---------------------------------------------------- |\n| TResource       | the resource being patched                           |\n| TBaseParameters | Optional. Allows overriding the operation parameters |\n\n### `checkGlobalNameAvailability` {#Azure.ResourceManager.checkGlobalNameAvailability}\n\nAdds check global name availability operation, normally used if\na resource name must be globally unique (for example, if the resource\nexposes and endpoint that uses the resource name in the url)\n\n```typespec\nop Azure.ResourceManager.checkGlobalNameAvailability(apiVersion: string, subscriptionId: string, provider: Microsoft.ThisWillBeReplaced, body: TRequest): TResponse | Azure.ResourceManager.ErrorResponse\n```\n\n#### Template Parameters\n\n| Name              | Description                                                                                   |\n| ----------------- | --------------------------------------------------------------------------------------------- |\n| TRequest          | the availability request, defaults to the standard request, containing name and resource type |\n| TResponse         | the availability response, default to the standard response                                   |\n| TAdditionalParams | A model specifying additional non-path parameters to the availability request                 |\n\n### `checkLocalNameAvailability` {#Azure.ResourceManager.checkLocalNameAvailability}\n\nAdds check location-specific name availability operation, normally used if\na resource name must be globally unique (for example, if the resource\nexposes and endpoint that uses the resource name in the url)\n\n```typespec\nop Azure.ResourceManager.checkLocalNameAvailability(apiVersion: string, subscriptionId: string, provider: Microsoft.ThisWillBeReplaced, location: string, body: TRequest): TResponse | Azure.ResourceManager.ErrorResponse\n```\n\n#### Template Parameters\n\n| Name              | Description                                                                                   |\n| ----------------- | --------------------------------------------------------------------------------------------- |\n| TRequest          | the availability request, defaults to the standard request, containing name and resource type |\n| TResponse         | the availability response, default to the standard response                                   |\n| TAdditionalParams | A model specifying additional non-path parameters to the availability request                 |\n\n## Azure.ResourceManager.Foundations\n\n### `checkNameAvailability` {#Azure.ResourceManager.Foundations.checkNameAvailability}\n\nAdds check name availability operation, normally used if\na resource name must be globally unique (for example, if the resource\nexposes an endpoint that uses the resource name in the url)\n\n```typespec\nop Azure.ResourceManager.Foundations.checkNameAvailability(apiVersion: string, body: TRequest): TResponse | Azure.ResourceManager.ErrorResponse\n```\n\n#### Template Parameters\n\n| Name              | Description                                                              |\n| ----------------- | ------------------------------------------------------------------------ |\n| TScopeParameters  | A parameter model with properties representing the scope of the resource |\n| TRequest          | The operation request body                                               |\n| TResponse         | The operation response                                                   |\n| TAdditionalParams | A parameter model with properties representing non-path parameters       |\n", "file_path": "../../docs\\libraries\\azure-resource-manager\\reference\\interfaces.md", "link_to_file": "file://../../docs\\libraries\\azure-resource-manager\\reference\\interfaces.md"}, {"file_content": "---\ntitle: \"Decorators\"\ntoc_min_heading_level: 2\ntoc_max_heading_level: 3\n---\n\n# Decorators\n\n## Azure.ClientGenerator.Core\n\n### `@access` {#@Azure.ClientGenerator.Core.access}\n\nSet access for operations, models and enums. All models that are only used in operations with access \"internal\" will be implicitly set to access \"internal\".\n\n```typespec\n@Azure.ClientGenerator.Core.access(value: EnumMember, scope?: valueof string)\n```\n\n#### Target\n\n`union Model | Operation | Enum`\n\n#### Parameters\n\n| Name  | Type                    | Description                                                                                                   |\n| ----- | ----------------------- | ------------------------------------------------------------------------------------------------------------- |\n| value | `EnumMember`            | The access info you want to set for this model or operation.                                                  |\n| scope | `valueof scalar string` | The language scope you want this decorator to apply to. If not specified, will apply to all language emitters |\n\n#### Examples\n\n```typespec\n@access(Access.internal)\nmodel ModelToHide {\nprop: valueof string\n}\n@access(Access.internal)\nop test: void;\n```\n\n### `@client` {#@Azure.ClientGenerator.Core.client}\n\nCreate a ClientGenerator.Core client out of a namespace or interface\n\n```typespec\n@Azure.ClientGenerator.Core.client(value?: {})\n```\n\n#### Target\n\n`union Namespace | Interface`\n\n#### Parameters\n\n| Name  | Type       | Description                             |\n| ----- | ---------- | --------------------------------------- |\n| value | `model {}` | Optional configuration for the service. |\n\n#### Examples\n\n##### Basic client setting\n\n```typespec\n@client\nnamespace MyService {\n\n}\n```\n\n##### Setting with other service\n\n```typespec\nnamespace MyService {\n\n}\n\n@client({\n  service: MyService,\n})\ninterface MyInterface {}\n```\n\n##### Changing client name if you don't want <Interface/Namespace>Client\n\n```typespec\n@client({\n  client: MySpecialClient,\n})\ninterface MyInterface {}\n```\n\n### `@clientFormat` {#@Azure.ClientGenerator.Core.clientFormat}\n\nCan be used to explain the client type that the current TYPESPEC\ntype should map to.\n\n```typespec\n@Azure.ClientGenerator.Core.clientFormat(value: valueof unixtime | iso8601 | rfc1123 | seconds)\n```\n\n#### Target\n\n`ModelProperty`\n\n#### Parameters\n\n| Name  | Type                                                      | Description                 |\n| ----- | --------------------------------------------------------- | --------------------------- |\n| value | `valueof union unixtime \\| iso8601 \\| rfc1123 \\| seconds` | The client format to apply. |\n\n#### Examples\n\n```typespec\nmodel MyModel {\n  @clientFormat(\"unixtime\")\n  created_at?: int64;\n}\n```\n\n### `@convenientAPI` {#@Azure.ClientGenerator.Core.convenientAPI}\n\nWhether you want to generate an operation as a convenient operation.\n\n```typespec\n@Azure.ClientGenerator.Core.convenientAPI(value?: valueof boolean)\n```\n\n#### Target\n\n`Operation`\n\n#### Parameters\n\n| Name  | Type                     | Description                                                     |\n| ----- | ------------------------ | --------------------------------------------------------------- |\n| value | `valueof scalar boolean` | Whether to generate the operation as convenience method or not. |\n\n#### Examples\n\n```typespec\n@convenientAPI\nop test: void;\n```\n\n### `@exclude` {#@Azure.ClientGenerator.Core.exclude}\n\nWhether to exclude a model from generation for specific languages. By default we generate\nall models that are included in operations.\n\n```typespec\n@Azure.ClientGenerator.Core.exclude(scope?: valueof string)\n```\n\n#### Target\n\n`Model`\n\n#### Parameters\n\n| Name  | Type                    | Description                                                                                                   |\n| ----- | ----------------------- | ------------------------------------------------------------------------------------------------------------- |\n| scope | `valueof scalar string` | The language scope you want this decorator to apply to. If not specified, will apply to all language emitters |\n\n#### Examples\n\n```typespec\n@exclude(\"python\")\nmodel ModelToExclude {\n  prop: valueof string;\n}\n```\n\n### `@include` {#@Azure.ClientGenerator.Core.include}\n\nWhether to include a model in generation for specific languages. By default we generate\nall models that are included in operations.\n\n```typespec\n@Azure.ClientGenerator.Core.include(scope?: valueof string)\n```\n\n#### Target\n\n`Model`\n\n#### Parameters\n\n| Name  | Type                    | Description                                                                                                   |\n| ----- | ----------------------- | ------------------------------------------------------------------------------------------------------------- |\n| scope | `valueof scalar string` | The language scope you want this decorator to apply to. If not specified, will apply to all language emitters |\n\n#### Examples\n\n```typespec\n@include(\"python\")\nmodel ModelToInclude {\n  prop: valueof string;\n}\n```\n\n### `@internal` {#@Azure.ClientGenerator.Core.internal}\n\nWhether to mark an operation as internal for specific languages,\nmeaning it should not be exposed to end SDK users\n\n```typespec\n@Azure.ClientGenerator.Core.internal(scope?: valueof string)\n```\n\n#### Target\n\n`Operation`\n\n#### Parameters\n\n| Name  | Type                    | Description                                                                                                   |\n| ----- | ----------------------- | ------------------------------------------------------------------------------------------------------------- |\n| scope | `valueof scalar string` | The language scope you want this decorator to apply to. If not specified, will apply to all language emitters |\n\n#### Examples\n\n```typespec\n@internal(\"python\")\nop test: void;\n```\n\n### `@operationGroup` {#@Azure.ClientGenerator.Core.operationGroup}\n\nCreate a ClientGenerator.Core operation group out of a namespace or interface\n\n```typespec\n@Azure.ClientGenerator.Core.operationGroup\n```\n\n#### Target\n\n`union Namespace | Interface`\n\n#### Parameters\n\nNone\n\n#### Examples\n\n```typespec\n@operationGroup\ninterface MyInterface {}\n```\n\n### `@protocolAPI` {#@Azure.ClientGenerator.Core.protocolAPI}\n\nWhether you want to generate an operation as a protocol operation.\n\n```typespec\n@Azure.ClientGenerator.Core.protocolAPI(value?: valueof boolean)\n```\n\n#### Target\n\n`Operation`\n\n#### Parameters\n\n| Name  | Type                     | Description                                           |\n| ----- | ------------------------ | ----------------------------------------------------- |\n| value | `valueof scalar boolean` | Whether to generate the operation as protocol or not. |\n\n#### Examples\n\n```typespec\n@protocolAPI\nop test: void;\n```\n\n### `@usage` {#@Azure.ClientGenerator.Core.usage}\n\nExpand usage for models/enums. A model's default usage info is always calculated by the operations that use it.\nYou could use this decorator to expand the default usage info. (e.g. append Usage.input by\n\n```typespec\n@Azure.ClientGenerator.Core.usage(value: EnumMember | Union, scope?: valueof string)\n```\n\n#### Target\n\n`union Model | Enum`\n\n#### Parameters\n\n| Name  | Type                        | Description                                                                                                   |\n| ----- | --------------------------- | ------------------------------------------------------------------------------------------------------------- |\n| value | `union EnumMember \\| Union` | The usage info you want to set for this model.                                                                |\n| scope | `valueof scalar string`     | The language scope you want this decorator to apply to. If not specified, will apply to all language emitters |\n\n#### Examples\n\n```typespec\n@usage(Usage.input | Usage.output)\nmodel InputAndOutPutModel {\n  prop: string;\n}\n```\n", "file_path": "../../docs\\libraries\\typespec-client-generator-core\\reference\\decorators.md", "link_to_file": "file://../../docs\\libraries\\typespec-client-generator-core\\reference\\decorators.md"}, {"file_content": "---\ntitle: Overview\nsidebar_position: 0\ntoc_min_heading_level: 2\ntoc_max_heading_level: 3\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n# Overview\n\nTypeSpec Data Plane Generation library\n\n## Install\n\n<Tabs>\n<TabItem value=\"spec\" label=\"In a spec\" default>\n\n```bash\nnpm install @azure-tools/typespec-client-generator-core\n```\n\n</TabItem>\n<TabItem value=\"library\" label=\"In a library\" default>\n\n```bash\nnpm install --save-peer @azure-tools/typespec-client-generator-core\n```\n\n</TabItem>\n</Tabs>\n\n## Azure\n\n## Azure.ClientGenerator\n\n## Azure.ClientGenerator.Core\n\n### Decorators\n\n- [`@access`](./decorators.md#@Azure.ClientGenerator.Core.access)\n- [`@client`](./decorators.md#@Azure.ClientGenerator.Core.client)\n- [`@clientFormat`](./decorators.md#@Azure.ClientGenerator.Core.clientFormat)\n- [`@convenientAPI`](./decorators.md#@Azure.ClientGenerator.Core.convenientAPI)\n- [`@exclude`](./decorators.md#@Azure.ClientGenerator.Core.exclude)\n- [`@include`](./decorators.md#@Azure.ClientGenerator.Core.include)\n- [`@internal`](./decorators.md#@Azure.ClientGenerator.Core.internal)\n- [`@operationGroup`](./decorators.md#@Azure.ClientGenerator.Core.operationGroup)\n- [`@protocolAPI`](./decorators.md#@Azure.ClientGenerator.Core.protocolAPI)\n- [`@usage`](./decorators.md#@Azure.ClientGenerator.Core.usage)\n", "file_path": "../../docs\\libraries\\typespec-client-generator-core\\reference\\index.mdx", "link_to_file": "file://../../docs\\libraries\\typespec-client-generator-core\\reference\\index.mdx"}, {"file_content": "# Azure TypeSpec Style Guide\n\n## History\n\n| Date        | Notes            |\n| ----------- | ---------------- |\n| 2022-Oct-28 | Initial version. |\n\n## Introduction\n\nThis document contains guidelines that complement and extend the\n[Microsoft Azure REST API Guidelines](https://github.com/microsoft/api-guidelines/blob/vNext/azure/Guidelines.md) for describing an Azure API with a TypeSpec API design document.\nThe goal of these guidelines is to establish the requirements for complete and consistent API designs\nthat will ensure high quality in generated documentation and client libraries.\n\n## Use the Azure.Core library\n\nThe [Azure.Core](azure.core/index.md) library enforces many of the requirements for complete and consistent API designs.\nIf your TypeSpec definition imports the Azure.Core library and compiles without linter errors, this ensures\ncompliance with the most important Azure API style guidelines.\n\n```typespec\nimport \"@azure-tools/typespec-azure-core\";\n```\n\n## Use the Versioning library\n\nAll TypeSpec API designs for Azure must import the typespec-lang/versioning library, define their api-versions,\nand the versions of all imported libraries.\n\n```typespec\nimport \"@typespec/versioning\";\n\n@versioned(Contoso.WidgetManager.Versions)\nnamespace Contoso.WidgetManager;\n\nenum Versions {\n  @useDependency(Azure.Core.Versions.v1_0_Preview_2)\n  v2022_08_31: \"2022-08-31\",\n}\n```\n\n## Decorators\n\nCertain decorators from the TypeSpec standard library or common extension libaries must not be used\nin Azure TypeSpec definitions.\n\n- `@operationId` -- the operationId is derived from the operation name.\n- `@format` -- not recommended for use in Azure specs because this is an open-ended string and the interpretation is open to each emitter.\n  Instead, we recommend using supported scalars. Azure-specific scalars include: `eTag`, `ipV4Address`, `ipV6Address` and `uuid`. General\n  TypeSpec scalars include: `bytes`, `numeric`, `integer`, `float`, `int64`, `int32`, `int16`, `int8`, `uint64`, `uint32`, `uint16`, `uint8`,\n  `safeint`, `float64`, `float32`, `decimal`, `decimal128`, `string`, `plainDate`, `plainTime`, `utcDateTime`, `offsetDateTime`, `duration`,\n  `boolean`, and `url`. For more information, see the document on [Types Relations](https://microsoft.github.io/typespec/language-basics/type-relations)\n\n## Operation Groups\n\nOperations should be grouped within an interface or namespace. The name of the interface or namespace\nshould be a plural noun, and for ARM apis it should match the resource type name in the path segment.\nThis name will be prepended to the operation name to form the operationId.\n\nFor example, the interface that groups the operations for the 'Microsoft.Compute/virtualMachines'\nresource type should be named 'VirtualMachines'.\n\n## Operation Names\n\nOperation names should follow a consistent pattern\n\n| operation template                    | name should contain    | notes |\n| ------------------------------------- | ---------------------- | ----- |\n| ResourceCreateOrUpdate                | \"Create\" and \"Update\"  |       |\n| ResourceCreateOrReplace               | \"Create\" and \"Replace\" |       |\n| ResourceCreateWithServiceProvidedName | \"Create\"               |       |\n| ResourceRead                          | \"Get\"                  |       |\n| ResourceDelete                        | \"Delete\"               |       |\n| ResourceList                          | \"List\"                 |       |\n| LongRunningResourceCreateOrReplace    | \"Create\" and \"Replace\" |       |\n| LongRunningResourceDelete             | \"Delete\"               |       |\n\n## Parameters\n\nWhen a path parameter specifies the identifier of a resource being created, it should\n\n- use the `@maxLength` decorator to specify the maximum length allowed for the identifier, and\n- use the `@pattern` decorator to specify the characters that can be used in the identifier.\n\n## Support for pagination\n\nIf the operation accepts a `top`, `skip`, `maxpagesize`, `filter`, `orderby`, `select`, or `expand` parameter,\nuse the appropriate parameter description in the Azure.Core library.\n\n```typespec\ninterface Widgets {\n  @doc(\"List Widget resources\")\n  listWidgets is ResourceList<\n    Widget,\n    {\n      parameters: {\n        ...TopQueryParameter;\n        ...SkipQueryParameter;\n        ...MaxPageSizeQueryParameter;\n        ...FilterQueryParameter;\n        ...OrderByQueryParameter;\n        ...SelectQueryParameter;\n        ...ExpandQueryParameter;\n      };\n    }\n  >;\n}\n```\n\n## Security Definitions\n\nEvery TypeSpec definition must define at least one valid security scheme.\n\nManagement plane services only need to import the Azure.ResourceManager library\nto define the standard ARM security definitions.\n\nData plane services must explicitly define their security scheme(s) with the Azure.Core `@useAuth` decorator.\n\nEach security scheme must have a `type` of \"oauth2\" or \"apiKey\" with `in` \"header\".\n\nEach security scheme must have a `description` with a plain English explanation of the security scheme.\n\nFor \"oauth2\" security schemes, `scopes` must contain at least one entry.\n\nThe key of each entry in `scopes` must be of the form `<resource URI>/scope name`, where \"scope name\" is typically \".default\" for Azure services.\n\n### Examples\n\nThe following example shows how to define a security scheme for Azure Active Directory authentication:\n\n```typespec\n@useAuth(AADToken)\nnamespace Contoso.WidgetManager;\n\n@doc(\"The Azure Active Directory OAuth2 Flow\")\nmodel AADToken\n  is OAuth2Auth<[\n    {\n      type: OAuth2FlowType.authorizationCode;\n      authorizationUrl: \"https://api.example.com/oauth2/authorize\";\n      tokenUrl: \"https://api.example.com/oauth2/token\";\n      scopes: [\"https://management.azure.com/read\", \"https://management.azure.com/write\"];\n    }\n  ]>;\n```\n\nNote that the name \"AADToken\" has no significance, and \"https://resource.azure.com/\" is meant to signify the URI of the public cloud resource.\n\nThe \"type\" is not particularly relevant but the \"implicit\" oauth2 flow is now considered insecure so another choice like \"authorizationCode\" is preferable.\n\nThe following example defines an apikey security scheme:\n\n```typespec\n@useAuth(AzureKey)\nnamespace Contoso.WidgetManager;\n\n@doc(\"The secret key for your Azure Cognitive Services subscription.\")\nmodel AzureKey is ApiKeyAuth<ApiKeyLocation.header, \"Ocp-Apim-Subscription-Key\">;\n```\n\nHere also, the name \"AzureKey\" has no significance.\n\nAll operations for the service should accept the security defined for the service.\n", "file_path": "../../docs\\reference\\azure-style-guide.md", "link_to_file": "file://../../docs\\reference\\azure-style-guide.md"}, {"file_content": "# Library Tour\n\nThe `@azure-tools/typespec-azure-resource-manager` library defines the following artifacts:\n\n- TypeSpec Azure Resource Manager Library\n  - [Models](#models)\n  - [Operations](#operations)\n  - [Decorators](#decorators)\n  - [API](#api)\n\n## Models\n\nThe `@azure-tools/typespec-azure-resource-manager` library defines the following models:\n\n### ARM Resource Models\n\nThe following table shows the list of ARM resource base model definitions. For the details of these different resource types, please consult [ARMWiki on resources.](https://armwiki.azurewebsites.net/introduction/concepts/resources.html)\n\n| Model                           | Notes                             |\n| ------------------------------- | --------------------------------- |\n| TrackedResource<TProperties\\>   | Defines an ARM tracked resource.  |\n| ProxyResource<TProperties\\>     | Defines an ARM proxy resource     |\n| ExtensionResource<TProperties\\> | Defines an ARM extension resource |\n\n### Other Support Models\n\nThe following models are used for different purposes:\n\n- Base: Base models used for defining other models\n- Common: Common definition models that can be spread(`...`) into resources\n- Response: Common response models can be used in custom action operation return types.\n- Parameter: Common parameter models can be used to define custom action operation APIs and formulate the REST path.\n- Helper: Helper models for tasks such as extract model properties or transformations.\n\n| Model                                  | Category  | Notes                                                                                                                                                                                                                                                    |\n| -------------------------------------- | --------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| ArmResource                            | Base      | Defines the base model with common properties for all ARM resources.                                                                                                                                                                                     |\n| ResourceIdentifier<T\\>                 | Common    | A type definition that refers the id to an ARM resource. Sample usage: ` otherArmId: ResourceIdentifier; networkId: ResourceIdentifier<[{type:\"\\\\Microsoft.Network\\\\vnet\"}]> vmIds: ResourceIdentifier<[{type:\"\\\\Microsoft.Compute\\\\vm\", scopes[\"*\"]}]>` |\n| DefaultProvisioningStateProperty       | Common    | Contains a default provisioningState property to be spread into resource property types. Available values: `Succeeded`, `Failed`, and `Cancelled`                                                                                                        |\n| ManagedServiceIdentity                 | Common    | The managed service identities envelope.                                                                                                                                                                                                                 |\n| EntityTag                              | Common    | The eTag property envelope.                                                                                                                                                                                                                              |\n| ManagedBy                              | Common    | The managedBy property envelope.                                                                                                                                                                                                                         |\n| ResourceKind                           | Common    | The resource kind property envelope.                                                                                                                                                                                                                     |\n| ResourcePlan                           | Common    | The resource plan property envelope.                                                                                                                                                                                                                     |\n| ResourceSku                            | Common    | The SKU (Stock Keeping Unit) assigned to this resource.                                                                                                                                                                                                  |\n| ArmResponse<T\\>                        | Response  | Response model for ARM operation completed successfully. Status code: 200                                                                                                                                                                                |\n| ArmCreatedResponse                     | Response  | Response model for ARM create operation completed successfully. Status code: 201                                                                                                                                                                         |\n| ArmDeletedResponse                     | Response  | Response model for ARM resource deleted successfully. Status code: 200                                                                                                                                                                                   |\n| ArmDeleteAcceptedResponse              | Response  | Response model for ARM resource deletion accepted. Status code: 202                                                                                                                                                                                      |\n| ArmDeletedNoContentResponse            | Response  | Response model for ARM delete operation completed successfully. Status code: 204                                                                                                                                                                         |\n| ArmNoContentResponse<TMessage\\>        | Response  | Response model for ARM operation completed with status code 204.                                                                                                                                                                                         |\n| ErrorResponse                          | Response  | Common error response for all Azure Resource Manager APIs to return error details for failed operations.                                                                                                                                                 |\n| ApiVersionParameter                    | Parameter | The default api-version parameter type.                                                                                                                                                                                                                  |\n| SubscriptionIdParameter                | Parameter | The default subscriptionId parameter type.                                                                                                                                                                                                               |\n| ResourceGroupParameter                 | Parameter | The default resource group parameter type.                                                                                                                                                                                                               |\n| ProviderNamespace<TResource\\>          | Parameter | The provider namespace parameter type.                                                                                                                                                                                                                   |\n| ResourceInstanceParameters<TResource\\> | Parameter | A composite parameter model that includes `ResourceCommonParameters` and the key of `KeyOf<TResource>`.                                                                                                                                                  |\n| SubscriptionScope<TResource\\>          | Parameter | A composite parameter for subscription level operations. It includes `ApiVersionParameter`, `SubscriptionIdParameter`, `ProviderNamespace<TResource>`, and `ParentKeysOf<TResource>`                                                                     |\n| ResourceGroupScope<TResource\\>         | Parameter | A composite parameter for resource group level operations. It includes `ApiVersionParameter`, `SubscriptionIdParameter`,`ResourceGroupParameter`,`ProviderNamespace<TResource>`, and `ParentKeysOf<TResource>`                                           |\n| TenantParentScope<TResource\\>          | Parameter | A composite parameter for tenante level operations. It includes `CommonTenantScope<TResource\\>`, `ParentKeysOf<TResource>`.                                                                                                                              |\n| TenantInstanceParameters<TResource\\>   | Parameter | A composite parameter for tenante level operations. It includes `CommonTenantScope<TResource\\>`, `KeysOf<TResource>`.                                                                                                                                    |\n| ResourceUriParameter                   | Parameter | The default resourceUri parameter type that refers to a fully qualified Azure Resource manager identifier of the resource. It sets `x-ms-skip-url-encoding` to true for this route segment.                                                              |\n| OperationIdParameter                   | Parameter | The default operationId parameter type.                                                                                                                                                                                                                  |\n| KeysOf<TResource\\>                     | Helper    | The model extract the ARM resource name key.                                                                                                                                                                                                             |\n| ParentKeysOf<TResource\\>               | Helper    | The model extract the ARM resource's immediate parent's name key.                                                                                                                                                                                        |\n\n## Interfaces\n\nThe `@azure-tools/typespec-azure-resource-manager` library defines these standard interfaces as basic building blocks that you can expose. You can use `extends` to compose the operations to meet the exact needs of your APIs.\n\nFor tracked resources, it is expected to implement the full `ResourceOperations` interface.\nFor other resource types, you can use these basic interfaces to compose desired APIs. Certain linting rules may apply.\n\n```typespec\nmodel Employee is TrackedResource<EmployeeProperties>\n...\n\n@armResourceOperations\ninterface Employees extends TrackedResourceOperations<Employee, EmployeeProperties> {}\n\n------\nmodel Widget is ProxyResource<WidgetProperties>\n...\n\n@armResourceOperations\ninterface Widgets extends extends ResourceRead<Widget>,\n ResourceCreate<Widget>,\n ResourceDelete<Widget> {}\n\n```\n\n| Interface                                                    | Notes                                                                                                                                                                                                                                                      |\n| ------------------------------------------------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Operations                                                   | Standard interface that provides ARM required Operation API. Each service should have exact ONE definition with following line. `interface Operations extends Azure.ResourceManager.Operations {}`                                                         |\n| TenantResourceOperations<TResource, TProperties\\>            | A composite interface for Tenant resource that include `TenantResourceRead<TResource>`, `TenantResourceCreate<TResource>`, `TenantResourceUpdate<TResource, TProperties>`, `TenantResourceDelete<TResource>`, and `TenantResourceListByParent<TResource>`. |\n| TenantResourceRead<TResource\\>                               | A interface definition for Tenant resource Read operation.                                                                                                                                                                                                 |\n| TenantResourceCreate<TResource\\>                             | A interface definition for Tenant resource CreateOrUpdate operation.                                                                                                                                                                                       |\n| TenantResourceUpdate<TResource, TProperties\\>                | A interface definition for Tenant resource Update operation.                                                                                                                                                                                               |\n| TenantResourceDelete<TResource\\>                             | A interface definition for Tenant resource Delete operation.                                                                                                                                                                                               |                                    |\n| TenantResourceListByParent<TResource\\>                       | A interface definition for Tenant resource ListByParent operation.                                                                                                                                                                                         |\n| ResourceOperations<TResource, TProperties\\>                  | A composite interface for resources that include `ResourceInstanceOperations<TResource, TProperties>`, `ResourceCollectionOperations<TResource>`.                                                                                                          |\n| ResourceInstanceOperations<TResource, TProperties\\>          | A composite interface for resources that include `ResourceRead<TResource>`,`ResourceCreate<TResource>`,`ResourceUpdate<TResource, TProperties>`,`ResourceDelete<TResource>`.                                                                               |\n| ResourceCollectionOperations<TResource\\>                     | A composite interface for resources that include `ResourceListByParent<TResource>`,`ResourceListBySubscription<TResource>`.                                                                                                                                |\n| ResourceRead<TResource\\>                                     | A interface definition for resource Read operation.                                                                                                                                                                                                        |\n| ResourceCreate<TResource\\>                                   | A interface definition for resource CreateOrUpdate operation.                                                                                                                                                                                              |\n| ResourceUpdate<TResource, TProperties\\>                      | A interface definition for resource Update operation.                                                                                                                                                                                                      |\n| ResourceDelete<TResource\\>                                   | A interface definition for resource Delete operation.                                                                                                                                                                                                      |\n| ResourceListBySubscription<TResource\\>                       | A interface definition for resource ListBySubscription operation.                                                                                                                                                                                          |\n| ResourceListByParent<TResource\\>                             | A interface definition for resource ListByParent operation.                                                                                                                                                                                                |\n| ProxyResourceOperations                                      | A composite interface for Proxy resource that include `ResourceRead<TResource>`,`ResourceCreate<TResource>`,`ResourceDelete<TResource>`,`ResourceListByParent<TResource>`.                                                                                 |\n| ProxyResourceUpdate<TResource, TProperties\\>                 | A interface definition for Proxy resource Update operation.                                                                                                                                                                                                |\n| ExtensionResourceOperations<TResource, TProperties\\>         | A composite interface for Extension resources that include `ExtensionResourceInstanceOperations<TResource, TProperties>`, `ExtensionResourceCollectionOperations<TResource>`.                                                                              |\n| ExtensionResourceInstanceOperations<TResource, TProperties\\> | A composite interface for Extension resources that include `ExtensionResourceRead<TResource>`,`ExtensionResourceCreate<TResource>`,`ExtensionResourceUpdate<TResource, TProperties>`,`ExtensionResourceDelete<TResource>`.                                 |\n| ExtensionResourceCollectionOperations<TResource\\>            | A composite interface for Extension resources that include `ExtensionResourceList<TResource>`.                                                                                                                                                             |\n| ExtensionResourceRead<TResource\\>                            | A interface definition for Extension resource Read operation.                                                                                                                                                                                              |\n| ExtensionResourceCreate<TResource\\>                          | A interface definition for Extension resource CreateOrUpdate operation.                                                                                                                                                                                    |\n| ExtensionResourceUpdate<TResource, TProperties\\>             | A interface definition for Extension resource Update operation.                                                                                                                                                                                            |\n| ExtensionResourceDelete<TResource\\>                          | A interface definition for Extension resource Delete operation.                                                                                                                                                                                            |\n| ExtensionResourceList<TResource\\>                            | A interface definition for Extension resource List operation.                                                                                                                                                                                              |\n\n## Decorators\n\nThe `@azure-tools/typespec-azure-resource-manager` library defines the following decorators:\n\n| Declarator             | Scope      | Usage                                                                                           |\n| ---------------------- | ---------- | ----------------------------------------------------------------------------------------------- |\n| @armProviderNamespace  | namespace  | sets the ARM provider namespace.                                                                |\n| @armResourceOperations | interfaces | This decorator is used to identify interfaces containing resource operations.                   |\n| @singleton             | models     | This decorator is used to mark a resource type as a \"singleton\", a type with only one instance. |\n\n## API\n\nThe `@azure-tools/typespec-azure-resource-manager` library defines the following API functions that emitter authors can use for development:\n\n| Name                    | Entity                     | Returns                      | Description                                                                                                                    |\n| ----------------------- | -------------------------- | ---------------------------- | ------------------------------------------------------------------------------------------------------------------------------ |\n| isArmCommonType         | models and modelProperties | boolean                      | Check if a given model or model property is an ARM common type.                                                                |\n| isSingletonResource     | models                     | boolean                      | Check if a given model or model property is a singleton resource.                                                              |\n| getArmProviderNamespace | namespace and models       | string or undefined          | Get the ARM provider namespace for a given entity                                                                              |\n| getArmResources         | -                          | ArmResourceDetails[]         | Returns fully-resolved details about all ARM resources registered in the TypeSpec document including operations and their details. |\n| getArmResourceInfo      | models                     | ArmResourceDetails           | Returns fully-resolved details about a given ARM resource model.                                                               |\n| getArmResourceKind      | models                     | ArmResourceKind or undefined | Returns resource type for a given ARM resource model. Return values: `TrackedResource`, `ProxyResource`, `ExtensionResource`   |\n| getSingletonResourceKey | models                     | string or undefined          | Returns the name/key of a singleton resource or `undefined` for non-singleton resources.                                       |\n", "file_path": "../../docs\\reference\\arm\\index.md", "link_to_file": "file://../../docs\\reference\\arm\\index.md"}, {"file_content": "# Library Tour\n\nThe `@azure-tools/typespec-azure-core` library defines the following artifacts:\n\n- TypeSpec Azure Core Library\n  - [Models](#models)\n  - [Operations](#operations)\n  - [Decorators](#decorators)\n  - [API](#api)\n\n### Models\n\nThe `@azure-tools/typespec-azure-core` library defines the following models:\n\n| Model                 | Notes                                                                                                                                                                                             |\n| --------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Page<TResource\\>      | Model for a paged resource. `<TResource>` is the model description of the item.                                                                                                                   |\n| PagedResultMetadata   | Contains the metadata associated with a `Page<TResource>`.                                                                                                                                        |\n| RequestParameter<T\\>  | For long-running operations, identifies that a continuation operation request parameter is pulled from the original request. `<T>` is the property name on the original request.                  |\n| ResponseProperty<T\\>  | For long-running operations, identifies that a continuation operation request parameter is pulled from the response of the previous request. `<T>` is the property name on the previous response. |\n| LongRunningStates     | Identifies the long-running states associated with a long-running operation.                                                                                                                      |\n| OperationLinkMetadata | Contains the metadata associated with an operation link.                                                                                                                                          |\n\n### Operations\n\nThe `@azure-tools/typespec-azure-core` library defines these standard operation templates as basic building blocks that you can expose. You can use `is` to compose the operations to meet the exact needs of your APIs.\n\nFor all of these operation templates, `TResource` is the resource model and `TCustom` allows customization of the operation parameters or response. `TCustom`, if provided, must extend the `Azure.Core.Foundations.CustomizationFields` model, which looks like:\n\n```typespec\n@doc(\"The expected shape of model types passed to the TCustom parameter of operation signatures.\")\nmodel CustomizationFields {\n  @doc(\"An object containing custom parameters that will be included in the operation.\")\n  parameters?: object;\n\n  @doc(\"An object containing custom properties that will be included in the response.\")\n  response?: object;\n}\n```\n\n| Operation                                                            | Notes                                                 |\n| -------------------------------------------------------------------- | ----------------------------------------------------- |\n| ResourceCreateOrUpdate<TResource, TCustom>                           | Resource PATCH operation.                             |\n| ResourceCreateOrReplace<TResource, TCustom>                          | Resource PUT operation.                               |\n| ResourceCreateWithServiceProvidedName<TResource, TCustom>            | Resource POST operation.                              |\n| ResourceRead<TResource, TCustom>                                     | Resource GET operation.                               |\n| ResourceDelete<TResource, TCustom>                                   | Resource DELETE operation.                            |\n| ResourceList<TResource, TCustom>                                     | Resource LIST operation with server-driven paging.    |\n| NonPagedResourceList<TResource, TCustom>                             | Resource LIST operation without paging.               |\n| ResourceAction<TResource, TParams, TResponse>                        | Perform a custom action on a specific resource.       |\n| ResourceCollectionAction<TResource, TParams, TResponse>              | Perform a custom action on a collection of resources. |\n| LongRunningResourceCreateOrReplace<TResource, TCustom>               | Long-running resource PUT operation.                  |\n| LongRunningResourceCreateOrUpdate<TResource, TCustom>                | Long-running resource PATCH operation.                |\n| LongRunningResourceCreateWithServiceProvidedName<TResource, TCustom> | Long-running resource POST operation.                 |\n| LongRunningResourceDelete<TResource, TCustom>                        | Long-running resource DELETE operation.               |\n\n### Decorators\n\nThe `@azure-tools/typespec-azure-core` library defines the following decorators:\n\n| Declarator         | Scope                      | Usage                                                                                                   |\n| ------------------ | -------------------------- | ------------------------------------------------------------------------------------------------------- |\n| @pagedResult       | models                     | indicates model describes a paged result.                                                               |\n| @items             | model properties           | indicates model property that stores the items within a paged result.                                   |\n| @nextLink          | model properties           | indicates model property that contains the continuation information for the next page.                  |\n| @nextPageOperation | operations                 | indicates operation that will be called for subsequent page requests.                                   |\n| @lroStatus         | enums and model properties | indicates model or model property that represents long-running operation status.                        |\n| @lroSucceeded      | enum members               | indicates enum member that corresponds to the long-running operation succeeded status.                  |\n| @lroCanceled       | enum members               | indicates enum member that corresponds to the long-running operation canceled status.                   |\n| @lroFailed         | enum members               | indicates enum member that corresponds to the long-running operation failed status.                     |\n| @pollingLocation   | model properties           | indicates model property that contains the location to poll for operation state.                        |\n| @finalLocation     | model properties           | indicates model property that contains the final location for the operation result.                     |\n| @operationLink     | operations                 | indicates operation that is linked to the decorated operation by virtue of its `linkType`.              |\n| @pollingOperation  | operations                 | indicates an operation is a polling operation for a long-running operation.                             |\n| @finalOperation    | operations                 | indicates an operation is the final operation for a long-running operation.                             |\n\n### API\n\nThe `@azure-tools/typespec-azure-core` library defines the following API functions that emitter authors can use for development:\n\n| Name                 | Entity                             | Returns                             | Description                                                                                          |\n| -------------------- | ---------------------------------- | ----------------------------------- | ---------------------------------------------------------------------------------------------------- |\n| getPagedResult       | models and operations              | PagedResultMetadata?                | Returns the `PagedResultMetadata` if associated with a model or operation return type.               |\n| getItems             | model properties                   | boolean                             | Returns `true` if the model property is annotated with `@items`.                                     |\n| getNextLink          | model properties                   | boolean                             | Returns `true` if the model property is annotated with `@nextLink`.                                  |\n| getLongRunningStates | enums, models and model properties | LongRunningStates?                  | Returns the `LongRunningStates` associated with an entity.                                           |\n| isLroSucceededState  | enum members                       | boolean                             | Returns `true` if the enum member represents a \"succeeded\" state.                                    |\n| isLroCanceledState   | enum members                       | boolean                             | Returns `true` if the enum member represents a \"canceled\" state.                                     |\n| isLroFailedState     | enum members                       | boolean                             | Returns `true` if the enum member represents a \"failed\" state.                                       |\n| isPollingLocation    | model properties                   | boolean                             | Returns `true` if the model property is annotated with `@pollingLocation`.                           |\n| isFinalLocation      | model properties                   | boolean                             | Returns `true` if the model property is annotated with `@finalLocation`.                             |\n| getOperationLink     | operations                         | OperationLinkMetadata?              | Returns the `OperationLinkMetadata` for an operation with a specific `linkType`.                     |\n| getOperationLinks    | operations                         | Map<string, OperationLinkMetadata>? | Returns a `Map` of `OperationLinkMetadata` objects for an Operation where the key is the `linkType`. |\n", "file_path": "../../docs\\reference\\azure.core\\index.md", "link_to_file": "file://../../docs\\reference\\azure.core\\index.md"}, {"file_content": "# Cadl to TypeSpec rename completed in March 2023 release\n\nAs you may recall from our previous email to partners, we are renaming the product as it becomes more mature, stable and one step closer to release.\n\nWith the 2023-03-13 release, We are pleased to announce that we have completed the process of changing the name of our product from **Cadl** to **TypeSpec**. This marks another important milestone. The new name better aligns with the functionality and benefits of the product, and we believe it will make it easier for our customers to understand and remember.\n\nWe understand that change can be challenging, and we appreciate your patience and support during this process.\n\n## Name Changes\n\n- Packages:\n\n  - NPM package scope:\n\n    - @cadl-lang/[xx] -> @typespec/[xx]\n    - @azure-tools/ unchanged.\n\n  - Package names\n\n| Old Package Name                         | Old Namespace                | New Package Name                             | New Namespace                     |\n| ---------------------------------------- | ---------------------------- | -------------------------------------------- | --------------------------------- |\n| @cadl-lang/compiler                      | using Cadl;                  | @typespec/compiler                           | using TypeSpec;                   |\n| @cadl-lang/rest                          | using Cadl.Http;             | @typespec/http;                              | using TypeSpec.Http;              |\n| @cadl-lang/rest                          | using Cadl.Rest;             | @typespec/rest                               | using TypeSpec.Rest;              |\n| @cadl-lang/openapi                       | using Cadl.OpenApi;          | @typespec/openapi                            | using TypeSpec.OpenApi;           |\n| @cadl-lang/openapi3                      | using Cadl.OpenApi3;         | @typespec/openapi3                           | using TypeSpec.OpenApi3;          |\n|                                          |                              |                                              |                                   |\n| @azure-tools/cadl-autorest               | using Cadl.AutoRest;         | @azure-tools/typespec-autorest               | using TypeSpec.AutoRest;          |\n| @azure-tools/cadl-azure-core             | using Azure.Core;            | @azure-tools/typespec-azure-core             | using Azure.Core;                 |\n| @azure-tools/cadl-azure-resource-manager | using Azure.ResourceManager; | @azure-tools/typespec-azure-resource-manager | using Azure.ResourceManager;      |\n| @azure-tools/cadl-dpg                    | using Azure.DPG;             | @azure-tools/typespec-client-generator-core  | using Azure.ClientGenerator.Core; |\n| @azure-tools/cadl-providerhub            | using Azure.ProviderHub;     | @azure-tools/typespec-providerhub            | using Azure.ProviderHub;          |\n| @azure-tools/cadl-providerhub-controller | - (emitter only)             | @azure-tools/typespec-providerhub-controller | -                                 |\n\n- File extension:\n\n  - `.cadl` -> `.tsp`\n\n- Configuration file:\n\n  - `cadl-project.yaml` -> `tspconfig.yaml`\n\n- CLI\n\n  - `npx cadl compile .` -> `npx tsp compile .`\n\n- Compiler JS APIs\n  - All artifacts with `*Cadl*` in the name have been updated to `*TypeSpec*`. However, aliases have been created with older `*Cadl*` name with `@deprecated` flag.\n- Noteable changes:\n\n  - @cadl-lang/rest was split into two packages, @typespec/rest and @typespec/http\n  - `@azure-tools/cadl-dpg` has been renamed to `@azure-tools/typespec-client-generator-core`. See above table for details.\n\n- Back-compatibility\n  - `.cadl` files are continue be recognized by compiler.\n  - `cadl-project.yaml` is still supported if `tspconfig.yaml` not found\n\n## Migration tool\n\nAn experimental migration tool has been introduced to take care of many of the manual migration steps. Just execute following command in your TypeSpec folder.\n\n```bash\n    npx @typespec/migrate\n```\n\nIf you would like execute from a different folder or don't have a `package.json` that indicates compiler package versions, please see command line options:\n\n```bash\n     npx @typespec/migrate --help\n```\n\nThe migration tool will perform following steps:\n\n- Rename `cadl-project.yaml` to `tspconfig.yaml`.\n- Update `tspconfig.yaml` format to new `emit` schema if necessary.\n- Rename `.cadl` files to `.tsp`.\n- Update `import` and `using` statements in any `.tsp` files\n- Update `package.json` with new package name and versions.\n\n## Deprecate older Cadl packages\n\nYou can follow this easy EngSys instructions to deprecate older Cadl\\* packages.\n\nhttps://dev.azure.com/azure-sdk/internal/_wiki/wikis/internal.wiki/354/NPM-Admin-Tasks-Pipeline\n", "file_path": "../../docs\\release-notes\\cadl-typespec-migration.md", "link_to_file": "file://../../docs\\release-notes\\cadl-typespec-migration.md"}, {"file_content": "---\ntitle: July 2022\n---\n\n# Release Notes July 2022 (2022-07-08)\n\nThis release contains **breaking changes**\n\n- Emitter options normalized to use kebab-case instead of camelCase.\n- `@serviceHost` decorator replaced by `@server` decorator\n- Versioning decorators now use enumerated values instead of strings\n\n## Impact on ARM specifications\n\n- Scripts that call typespec from the command line must be updated to use the new emitter option caseing, as described in the [migration guide](#migrating-command-line-scripts).\n- Visual studio projects that use the `<TypeSpec>` element will need to be updated to use the new emitter option casing, as described in the [migration guide](#migrating-projects).\n\n## Emitter options\n\nThis release brings a stricter option definition for emitters and requires usage of those options to be specified with the fully qualified name to prevent conflicts.\nAll options have also been renamed to match `kebab-case` naming.\nThe options can also be specified via the `tspconfig.yaml` file.\n\n### Migrating Command Line Scripts\n\nIf you had for example `--option operationPollingLocation=tenant`\n\n1. Use `tspconfig.yaml` project file **Recommended**\n\n   If you don't have that file yet, create it next to `package.json`, this file can be used to configure the emitters.\n\n   ```yaml\n   emitters:\n     @azure-tools/typespec-providerhub-controller:\n         <optionName>: <optionValue>\n\n   # For example\n   emitters:\n     @azure-tools/typespec-providerhub-controller:\n       operation-polling-location: tenant\n   ```\n\n2. Via the `--option` flag\n\n   You can still use the `--option` flag but you'll need to specify the fully qualified name of the option.\n\n   ```bash\n   --option @azure-tools/typespec-providerhub-controller.<optionName>=<optionValue>\n\n   # For example\n   --option @azure-tools/typespec-providerhub-controller.operation-polling-location=tenant\n   ```\n\n#### Renamed Emitter Options\n\n| Before                                           | Now                          |\n| ------------------------------------------------ | ---------------------------- |\n| **@azure-tools/typespec-autorest**               |\n| `outputFile`                                     | `output-file`                |\n| `examples-directory`                             | `examples-directory`         |\n| **@azure-tools/typespec-providerhub-controller** |\n| `serviceCodePath`                                | `service-code-path`          |\n| `operationPollingLocation`                       | `operation-polling-location` |\n| `controllerHost`                                 | `controller-host`            |\n| `registrationOutputPath`                         | `registration-output-path`   |\n\n### Migrating Projects\n\nTo migrate the project, you will need to update package.json, then update the `.csproj` file to use the new emitter options.\n\n#### Updating `package.json`\n\nThe TypeSpec project used the `~` option to protect your project from breaking changes when installing or updating dependencies via npm. To upgrade the project to use the new version of typespec, you must update the package.json file to use the new dependencies. Update the `dependencies` section of the package.json (in `typespec\\package.json`) as follows:\n\n```json\n\"dependencies\": {\n    \"@typespec/compiler\": \"~0.33.0\",\n    \"@typespec/openapi\": \"~0.10.1\",\n    \"@typespec/rest\": \"~0.15.1\",\n    \"@azure-tools/typespec-autorest\": \"~0.18.0\",\n    \"@azure-tools/typespec-azure-core\": \"~0.5.0\",\n    \"@azure-tools/typespec-providerhub\": \"~0.19.0\",\n    \"@azure-tools/typespec-providerhub-controller\": \"~0.14.0\",\n    \"@azure-tools/typespec-azure-resource-manager\": \"~0.8.0\"\n  }\n```\n\nOnce this is done and package.json is saved, navigate to the typespec directory (`.\\typespec\\`) and install the new packages using npm.\n\n```bash\nc:/my-project/typespec/> npm install\n```\n\n#### Updating emitter options in the `.csproj` file\n\nAs described above, the emitter option names have changed, if you created a TypeSpec project using the typespec-providerhub template, the option names used by the TypeSpec project during compilation appear in the 'Options' property of the `<TypeSpecCompile>` element, as a semicolon-separated string:\n\n```xml\n<TypeSpecCompile Include=\"typespec\\main.tsp\"\n    OutputDir=\"$(MSBuildProjectDirectory)\"\n    Options=\"registrationOutputPath=$(MSBuildProjectDirectory)/onebox/registrations;azure-resource-provider-folder=swagger/Contoso/resource-manager;arm-types-path=../../../../../common-types/resource-management/v3/types.json;examplesDirectory=$(MSBuildProjectDirectory)/typespec/examples\" />\n```\n\nEach of the setting names need to be changed to include the emitter name and to switch from camelCase to kebab-case. The settings that may appear in your csproj file and the changes that are needed include:\n\n| Before                           | Now                                                                     |\n| -------------------------------- | ----------------------------------------------------------------------- |\n| `azure-resource-provider-folder` | `@azure-tools/typespec-autorest.azure-resource-provider-folder`         |\n| `examples-directory`             | `@azure-tools/typespec-autorest.examples-directory`                     |\n| `registrationOutputPath`         | `@azure-tools/typespec-providerhub-controller.registration-output-path` |\n| **Optional Settings**            |\n| `outputFile`                     | `@azure-tools/typespec-autorest.output-file`                            |\n\nThe above `<TypeSpecCompile>` element would be rewritten as follows:\n\n```xml\n<TypeSpecCompile Include=\"typespec\\main.tsp\"\n    OutputDir=\"$(MSBuildProjectDirectory)\"\n    Options=\"@azure-tools/typespec-providerhub-controller.registration-output-path=$(MSBuildProjectDirectory)/onebox/registrations;@azure-tools/typespec-autorest.azure-resource-provider-folder=swagger/Contoso/resource-manager;arm-types-path=../../../../../common-types/resource-management/v3/types.json;@azure-tools/typespec-autorest.examples-directory=$(MSBuildProjectDirectory)/typespec/examples\" />\n```\n\n### Migrating a 'monorepo' project\n\nIf you are not using the project template, but are simply using a local package.json to manage your typespec dependencies, you can upgrade the project to use the new version of typespec by updating the package.json file to use the new dependencies. Update the `dependencies` section of the package.json as follows:\n\n```json\n\"dependencies\": {\n    \"@typespec/compiler\": \"~0.33.0\",\n    \"@typespec/openapi\": \"~0.10.1\",\n    \"@typespec/rest\": \"~0.15.1\",\n    \"@azure-tools/typespec-autorest\": \"~0.18.0\",\n    \"@azure-tools/typespec-azure-core\": \"~0.5.0\",\n    \"@azure-tools/typespec-providerhub\": \"~0.19.0\",\n    \"@azure-tools/typespec-providerhub-controller\": \"~0.14.0\",\n    \"@azure-tools/typespec-azure-resource-manager\": \"~0.8.0\"\n  }\n```\n\nOnce this is complete and package.json is saved, navigate to the typespec directory and install the new packages using npm.\n\n```bash\nc:/my-typespec-project/ npm install\n```\n\n## `@serviceHost` decorator replaced with `@server` decorator\n\nNote that **it is unlikely that this change has any impact on existing ARM specs**. The `@serviceHost` decorator that decorated the root namespace was used to specify the domain name of the base service endpoint. This functionality has been replaced by the `@server` decorator, which allows specifying full and parametrized Uris for the service endpoint, as described [here](https://github.com/microsoft/typespec/tree/main/docs/tutorial.md#service-definition-and-metadata)\n\n### Before\n\n```JavaScript\n@serviceHost(\"example.com\")\nnamespace MyService;\n\n```\n\n### After\n\n```JavaScript\n@server(\"https://example.com\", \"The endpoint for my service\")\nnamespace MyService;\n\n```\n\n## Versioning uses enums instead of strings\n\nNote that **it is unlikely that this change has any impact on existing ARM specs**. Versions must now be specified using string-valued enumerations, and each of the versioning decorators must reference an enum value rather than using the version string directly.\n\n```JavaScript\n// Before\n@versioned(\"2021-01-12\" | \"2022-01-15-preview\")\nnamespace Api;\n\n// After\n@versioned(Versions)\nnamespace Api;\n\nenum Versions { v2021_01_12: \"2021-01-12\", v2022_01_15_preview: \"2022-01-15-preview\" }\n```\n\n```JavaScript\n// Before\n@added(\"2022-01-15-preview\")\nmodel Foo {}\n\n// After\n@added(Versions.v2022_01_15_preview)\nmodel Foo {}\n\n```\n", "file_path": "../../docs\\release-notes\\release-2022-07-08.md", "link_to_file": "file://../../docs\\release-notes\\release-2022-07-08.md"}, {"file_content": "---\ntitle: August 2022\n---\n\n# Release Notes August 2022 (2022-08-10)\n\nThis release contains **breaking changes**\n\n- typespec-azure-core library requires a versioned dependency\n- typespec-azure-resource-manager requires a versioned dependency\n- Operation parameters without decorators\n- OkResponse is no longer a template\n- Route resolution changes\n- Remove `Map` type\n- `@path` may not decorate optional properties or parameters without a default value\n\n## typespec-azure-core library requires a versioned dependency\n\nThe typespec-azure-core library is now versioned, so each spec using it must specify the version to ensure no breaking changes.\n\n### Unversioned dependency to typespec-azure-core will now emit an error\n\n```typespec\nimport \"@azure-tools/typespec-azure-core\";\n\nnamespace MyService;\nusing Azure.Core;\n```\n\n### Resolve by adding an `@versionedDependency` to typespec-azure-core to the service namespace\n\n```typespec\nimport \"@azure-tools/typespec-azure-core\";\nimport \"@typespec/versioning\";\n\nusing Azure.Core;\nusing Versioning;\n\n@versionedDependency(Azure.Core.Versions.v1_0_Preview_1)\nnamespace MyService;\n```\n\n## typespec-azure-resource-manager library requires a versioned dependency\n\nThe typespec-azure-resource-manager library is now versioned, so each spec using it must specify the version to ensure no breaking changes.\n\n### Unversioned dependency to typespec-azure-resource-manager will now emit an error\n\n```typespec\nimport \"@azure-tools/typespec-azure-resource-manager\";\n\nnamespace Microsoft.MyService;\nusing Azure.ResourceManager;\n```\n\n### Resolve by adding an `@versionedDependency` to typespec-azure-resource-manager to the service namespace\n\n```typespec\nimport \"@azure-tools/typespec-azure-resource-manager\";\nimport \"@typespec/versioning\";\n\nusing Azure.ResourceManager;\nusing Versioning;\n\n@versionedDependency(Azure.ResourceManager.Versions.v1_0_Preview_1)\nnamespace Microsoft.MyService;\n```\n\n## Operation parameters without decorators\n\nA single undecorated (not marked `@query`, `@header`, `@body` or `@path`) operation parameter will now become a property of the request body rather than have its type define the request body. This allows defining the body with multiple unannotated parameters, which can include unannotated properties that are spread into parameters. (Previously, more than one unannotated parameter was an error.)\n\nFor example, the following used to define a request body of type `string`, but now defines a request body that is an object with a property named `body` of type string.\n\n```typespec\nop create(body: string): void;\n```\n\nTo get the previous behavior, the parameter now needs to be explicitly marked with `@body`:\n\n```typespec\nop create(@body body: string): void;\n```\n\n## OkResponse is no longer a template\n\nPreviously, OkResponse took an argument for the body type. Now it is a simple model like the other XxxResponse types. Alone, it implies a status code of 200 with no body.\n\nSince 200 is the default status code for non-empty bodies, you can usually replace `OkResponse<T>` with simply `T`.\n\n```typespec\nop get(id: string): OkResponse<Pet>;\n```\n\nCan be:\n\n```typespec\nop get(id: string): Pet;\n```\n\nIn certain situations where the body type is not (necessarily) a model, you will need to use the new `Body<T>` type. For example.\n\n```typespec\nop list(): OkResponse<Pet[]>;\n```\n\nCan become:\n\n```typespec\nop list(): OkResponse & Body<Pet[]>;\n```\n\nSince 200 status code is used by default, this could also be:\n\n```typespec\nop list(): Pet[];\n```\n\nGeneric models based on `OkResponse<T>` may also require `Body<T>`. For example:\n\n```typespec\nmodel MyResponse<T> {\n  ...OkResponse<T>;\n  @header example: string;\n}\n```\n\nSince T is not constrainted to be a model, it might be an intrinsic type, an array, or the like, the template should be changed to use `Body<T>`:\n\n```typespec\nmodel MyResponse<T> {\n  ...OkResponse;\n  ...Body<T>;\n  @header example: string;\n}\n```\n\nIn general, the prior `OkResponse<T>` is equivalent to `OkResponse & Body<T>` now or, equivalently, `{ ...OkResponse, ...Body<T> }`. In practice there are many situations where you can leave out OkResponse altogether and use plain `T` rather than `Body<T>`.\n\nSee also https://github.com/microsoft/typespec/blob/main/docs/tutorial.md#request--response-bodies\n\n## Route resolution changes\n\nResolving operation routes now follows the following logic:\n\n- if there is a service namespace specified\n  - only emit the operations and interfaces under that namespace(recursively)\n- if not:\n  - only emit the operations and interfaces defined at the root (DO NOT look into namespaces)\n\n### Action if applicable\n\n- If a typespec specused a service namespace without `@serviceTitle` add the `@serviceTitle` decorator to the service namespace, otherwise no routes will be emitted.\n- If a typespec spec contains service namespaces that are not child namespaces of the service namespace, move these namespaces under the service namespace.\n\n### Cases\n\n#### Operation at the root\n\n```typespec\nop test(): void;\n```\n\n\u2705 Stay the same\n\n| Before  | After   |\n| ------- | ------- |\n| `[\"/\"]` | `[\"/\"]` |\n\n#### Operation in namespace (not service namespace)\n\n```typespec\nnamespace DemoService;\n\nop test(): void;\n```\n\n\u26a0\ufe0f Output stays the same but add warning that no routes are emitted\n\n| Before | After |\n| ------ | ----- |\n| `[]`   | `[]`  |\n\n#### Operation in namespace (not service namespace) with @route\n\n```typespec\nnamespace DemoService;\n\n@route(\"/\")\nop test(): void;\n```\n\n\u26a0\ufe0f Now the same as previous case, no routes emitted and emit warning\n\n| Before  | After |\n| ------- | ----- |\n| `[\"/\"]` | `[]`  |\n\n##### Resolve by adding the `@serviceTitle` decorator\n\nAdd `@serviceTitle` to the namespace\n\n```typespec\n@serviceTitle(\"DemoService\")\nnamespace DemoService;\n\n@route(\"/\")\nop test(): void;\n```\n\n#### Operation in service namespace\n\n```typespec\n@serviceTitle(\"My Service\")\nnamespace Foo;\n\nop test(): void;\n```\n\n\u2705 Stay the same\n\n| Before  | After   |\n| ------- | ------- |\n| `[\"/\"]` | `[\"/\"]` |\n\n#### Operation in namespaces other than the service namespace\n\n```typespec\nimport \"@typespec/rest\";\n\nusing TypeSpec.Http;\n\n@serviceTitle(\"My Service\")\nnamespace Foo {\n  @route(\"in-service\")\n  op test(): void;\n}\n\nnamespace MyLib {\n  @route(\"my-lib\")\n  op test(): void;\n}\n```\n\n\u26a0\ufe0f Other namespace routes are not included anymore\n\n| Before                      | After             |\n| --------------------------- | ----------------- |\n| `[\"/in-service\", \"my-lib\"]` | `[\"/in-service\"]` |\n\n##### Resolve by making additional namespaces children of the service namespace\n\nMake any added namespaces children of the service namespace\n\n```typespec\nimport \"@typespec/rest\";\n\nusing TypeSpec.Http;\n\n@serviceTitle(\"My Service\")\nnamespace Foo {\n  @route(\"in-service\")\n  op test(): void;\n}\n\nnamespace Foo.MyLib {\n  @route(\"my-lib\")\n  op test(): void;\n}\n```\n\n## Remove Map type\n\n`Map` type was removed. Usages of `Map<string, T>` can be replaced with new type `Record<T>`. Other usages of `Map` may be replaced with `object`.\n\n### Map using string key type\n\n```typespec\nmodel Foo {\n  options: Map<string, string>;\n}\n```\n\n#### Replace with `Record<T>`\n\n```typespec\nmodel Foo {\n  options: Record<string>;\n}\n```\n\n### Map using non-string key type\n\n```typespec\nmodel Foo {\n  options: Map<int32, string>;\n}\n```\n\n#### Replace with `object`\n\n```typespec\nmodel Foo {\n  options: object;\n}\n```\n\n## `@path` may not decorate optional properties or parameters without a default\n\nProperties and parameters marked with the `@path` decorator should be required, but may be optional if they have a default value\n\n### optional path parameters\n\n```typespec\nmodel Foo {\n  @path\n  name?: string;\n}\n```\n\nWas a bad practice, but was allowed in previous versions. This will not throw an error diagnostic.\n\n### Resolve by making the property required\n\n```typespec\nmodel Foo {\n  @path\n  name: string;\n}\n```\n\n### Resolve by adding a default value\n\n```typespec\nmodel Foo {\n  @path\n  name?: string = \"singleton\";\n}\n```\n", "file_path": "../../docs\\release-notes\\release-2022-08-10.md", "link_to_file": "file://../../docs\\release-notes\\release-2022-08-10.md"}, {"file_content": "---\ntitle: September 2022\n---\n\n# Release Notes September 2022 (2022-09-07)\n\nThis release contains **breaking changes**\n\nChange to compiler, rest libraries [See TypeSpec Core release notes](https://github.com/microsoft/typespec/blob/main/docs/release/release-2022-09-07.md)\n\n- **`Api`**: Remove `Type` suffix\n- **`TypeSpec`**: Rename `Page` to `CollectionWithNextLink`\n- **`Api`**: `Enum.members` change typed from `EnumMember[]` to `Map<string, EnumMember>`\n- **`TypeSpec`** **`Api`**: **Deprecation** of `@consumes` `@produces` decorators\n\nChange to Azure libraries:\n\n- **[TypeSpec]** `Azure.Core` Changes to standard operation signatures\n\n## **[TypeSpec]** `Azure.Core` Changes to standard operation signatures\n\nThere have been a few changes to the standard operation signatures\nprovided by the `Azure.Core` namespace:\n\n### The use of standard operation signatures is now enforced\n\nThe `use-standard-operations` diagnostic will now be raised for any operation\nthat is not based on the standard operation signatures in the `Azure.Core`\nnamespace. This diagnostic is a warning that can be suppressed when there is a\nlegitimate case where a standard signature cannot be used.\n\nFor example:\n\n```\n#suppress \"@azure-tools/typespec-azure-core/use-standard-operations\" \"This is a top-level operation without a resource type.\"\n@get\n@route(\"languages\")\nop getSupportedLanguages is Foundations.Operation<ListQueryParams, SupportedLanguages>;\n```\n\n### New low-level building block signatures have been added\n\nWe have added new low-level operation signatures to `Azure.Core.Foundations`\nwhich encode the most fundamental parts of the Azure REST API Guidelines. You\nmay use these when you need to define custom operations that are not covered by\nthe standard signatures in `Azure.Core`.\n\n- `Operation<TParams, TResponse>` - The fundamental operation shape which\n  contains the `api-version` parameter and the standard `ErrorResponse`.\n- `LongRunningOperation<TParams, TResponse>` - Similar to `Operation` but adds a\n  long-running operation header to the response.\n- `ResourceOperation<TResource, TParams, TResponse>` - The fundamental operation\n  shape for all resource operations. Adds the `@autoRoute` decorator and\n  inserts the key properties for the `TResource` type and its parents.\n- `ResourceCollectionOperation<TResource, TParams, TResponse>` - The fundamental\n  operation shape for all resource collection operations. Adds the `@autoRoute`\n  decorator key properties for the parent type(s) of `TResource`.\n\n### The success response type for the `ResourceRead` operation is now the resource type\n\nThere was previously an issue with the `ResourceRead` signature that caused the\nresource type in the response to be treated as an anonymous schema. This has\nnow been corrected.\n", "file_path": "../../docs\\release-notes\\release-2022-09-07.md", "link_to_file": "file://../../docs\\release-notes\\release-2022-09-07.md"}, {"file_content": "---\ntitle: October 2022\n---\n\n# Release Notes October 2022 (2022-10-12)\n\nThis release contains **breaking changes**\n\nChange to compiler, rest libraries [See TypeSpec Core release notes](https://microsoft.github.io/typespec/docs/release-notes/release-2022-10-12/)\n\n- **`TypeSpec`**: Cannot `extends` or `is` a model expression via alias\n- **`Api`**: Removed `createProgram` and changed `compile` parameter order\n- **`TypeSpec`** **Deprecation** `@service` decorator replacing `@serviceTitle` and `@serviceVersion`\n- **`TypeSpec`** **`Api`**: Move `@discriminator` to compiler\n\nChange to Azure libraries:\n\n- **`TypeSpec`** `Azure.ResourceManager` Operations Interface explicitly required\n- **`Emitter`** `typespec-provider-hub-controller` Deprecate `service-code-path`\n\n## **`TypeSpec`** `Azure.ResourceManager` Operations Interface explicitly required\n\nPrevious version of the Azure.ResourceManager depended on a weird behavior of the operation resolution which automatically included the `Operations` interface.\nYou now have to explicitly include this interface in your Arm spec.\n\n```typespec\n// Add this to your spec.\ninterface Operations extends Azure.ResourceManager.Operations {}\n```\n\n## **`Emitter`** `typespec-provider-hub-controller` Deprecate `service-code-path`\n\n`service-code-path` option has been replaced by `output-dir`\nBefore\n\n```yaml\nemitters:\n  \"@azure-tools/typespec-providerhub-controller\":\n    service-code-path: ./my-controllers\n```\n\nAfter\n\n```yaml\nemitters:\n  \"@azure-tools/typespec-providerhub-controller\":\n    output-dir: ./my-controllers\n```\n", "file_path": "../../docs\\release-notes\\release-2022-10-12.md", "link_to_file": "file://../../docs\\release-notes\\release-2022-10-12.md"}, {"file_content": "---\ntitle: November 2022\n---\n\n# Release Notes for November 2022 (2022-11-11)\n\n## **[TypeSpec]** `Azure.Core` and `Azure.ResourceManager` updated `TResource` template parameter constraint\n\nMost of the `interface` types in these packages(e.g. `Page`, `ResourceCreateOrUpdate`, `GetResourceOperationStatus` , etc.) have been updated to have a constraint on the `TResource` template parameter. It must now be an `object`. This was already validated by the requirement for presence of `@resource` but this means that it is a built in complier validation.\n\nIn most cases this shouldn't affect you as you will already be passing an object to one of those templates. However if you defined your own template expecting a TResource that would be referencing one of those updated templates you will get an error. This can be resolved by defining the same constraint on your own parameter by adding `extends object`\n\nBefore\n\n```typespec\nmodel MyCustomPage<T> is Page<T>;\n```\n\nAfter\n\n```typespec\nmodel MyCustomPage<T extends object> is Page<T>;\n```\n\n## **[TypeSpec]** `Azure.ResourceManager` added lint rules to enforce consistent response schema and `@armResource<Operation>` decorators' usage\n\n### `@armResource<Operation>` decorators' usage\n\nFor ARM resource operations definition, the `op` must be decorated with `@armResource<Operation>`. More specifically,\n\n- `put`: `@armResourceCreateOrUpdate`\n- `get`: `@armResourceRead` or `@armResourceList`\n- `patch`: `@armResourceUpdate`\n- `delete`: `@armResourceDelete`\n- `post`: `@armResourceAction`\n\nBefore\n\n```typespec\n  @post\n  GiveRaise(...ResourceInstanceParameters<Employee>): ArmResponse<Employee> | ErrorResponse;\n```\n\nAfter\n\n```typespec\n  @post\n  @armResourceAction(Employee)\n  GiveRaise(...ResourceInstanceParameters<Employee>): ArmResponse<Employee> | ErrorResponse;\n```\n\n### [ARM RPC008 rule](https://armwiki.azurewebsites.net/api_contracts/guidelines/rpc.html#rpc008-put-get-patch--list-must-return-the-same-resource-schema)\n\nThe response model of `put`, `get`, `patch`, `list` is enforced to be same with resource model.\n\nBefore\n\n```typespec\n  @get @armResourceRead(FooResource) read(...ResourceInstanceParameters<FooResource>): ArmResponse<AnotherFooResource> | ErrorResponse;\n```\n\nAfter\n\n```typespec\n  @get @armResourceRead(FooResource) read(...ResourceInstanceParameters<FooResource>): ArmResponse<FooResource> | ErrorResponse;\n```\n\nTo resolve the lint issues, you can add the missing decorators or use the same resource model in response. However, the recommended way is to extend ARM operation templates on `interface`, for example:\n\n```typespec\nusing Azure.ResourceManager;\n\n@armResourceOperations\ninterface FooResourcess extends ResourceOperations<FooResource, FooProperties> {}\n```\n", "file_path": "../../docs\\release-notes\\release-2022-11-11.md", "link_to_file": "file://../../docs\\release-notes\\release-2022-11-11.md"}, {"file_content": "---\ntitle: December 2022\n---\n\n# Release Notes December 2022 (2022-12-07)\n\n:::danger\nThis release contains **breaking changes**\n:::\n\nSee TypeSpec Core [release notes](https://microsoft.github.io/typespec/release-notes/release-2022-12-07)\n\n## Breaking change\n\nSee TypeSpec Core breaking changes in [release notes](https://microsoft.github.io/typespec/release-notes/release-2022-12-07)\n\n### `TypeSpec > @azure-tools/typespec-azure-core` - change in handling of extensible enums\n\nAll Azure emitters (DPG, Autorest) will migrate to treating raw TypeSpec enums as extensible, without using the `@knownValues` decorator. Azure emitters that want to suppress this behavior and model raw enums as closed must use the new `@fixed` decorator.\n\n### `@azure-tools/typespec-providerhub-controller` - Change to output-dir logic in compiler changed some logic in `typespec-providerhub-controller`\n\nThe `typespec-providerhub-controller` was automatically putting generated artifact in \"{output-dir}/generated\" now it will be `{output-dir}/@azure-tools/typespec-providerhub-controller` by default. To revert to the previous behavior add this to your `tspconfig.yaml`\n\n```\n\"@azure-tools/typespec-providerhub-controller\":\n    emitter-output-dir: \"{output-dir}/generated\"\n```\n\nFor the `typespec-providerhub-template` project you can update the `tspconfig.yaml` config file to be:\n\n```yaml\noutput-dir: \"{project-root}/../\"\nemitters:\n  \"@azure-tools/typespec-autorest\":\n    emitter-output-dir: \"{output-dir}\"\n    azure-resource-provider-folder: ./swagger/Contoso/resource-manager\n    examples-directory: ./examples\n    new-line: lf\n  \"@azure-tools/typespec-providerhub-controller\":\n    emitter-output-dir: \"{output-dir}/generated\"\n    code-kind: model\n```\n\n### `typespec-azure-core` becomes more strict on camelCase/PascalCase check\n\n- PascalCase must be applied to model/interface/namespace name\n- camelCase must be applied to property name\n- To customize query/header/query parameter name on the wire, set in `@query`, `@header` or `@path` decorator arguments, for example:\n\n```\nmodel ContentTypeParameter{\n  @header(\"Content-type\")\n  contentType: string;\n}\n```\n\n- `@projectedName(\"json\", \"Content-type\")` doesn't work any more on `@query`, `@header` and `@path` parameters (still work on `@body` parameter)\n\nTo suppress the case style check warning, use `#suppress \"@azure-tools/typespec-azure-core/casing-style\" \"reason\"`\n\n## Deprecations\n\n:::caution\nDeprecated items will be removed in 2 release cycle.\n:::\n\n### `TypeSpec > @azure-tools/typespec-azure-core` Deprecation of clients decorator\n\nThe following decorators have been deprecated\n\n- `@client`\n- `@clientDefinition`\n- (internal) `@returnsClient`\n\nNew `@client` decorators with a different semantic are in `@azure-tools/typespec-client-generator-core` using the `Azure.ClientGenerator.Core` namespace\n", "file_path": "../../docs\\release-notes\\release-2022-12-07.md", "link_to_file": "file://../../docs\\release-notes\\release-2022-12-07.md"}, {"file_content": "---\ntitle: January 2023\n---\n\n# Release Notes January 2023 (2023-01-12)\n\n:::danger\nThis release contains **breaking changes**\n:::\n\nSee TypeSpec Core [release notes](https://microsoft.github.io/typespec/release-notes/release-2023-01-12)\n\n## Breaking Changes\n\n### `Azure.Core` operation customization has changed\n\nPrior to the January 2023 release, `Azure.Core` lifecycle operations were customized using a `TCustom` template parameter which expected a `parameters` and/or `response` property which indicates the customizations to be applied for that operation.\n\nIn this release, we have changed to a new Service Traits design which is more flexible and enables customizations for individual operations as well as all operations across an entire service specification.\n\nDocumentation and additional details can be found in this page of the `Azure.Core` documentation:\n\nhttps://azure.github.io/typespec-azure/docs/getstarted/azure-core/step09\n\n#### Migrating to the new model\n\nIf you have previously been customizing operation parameters using the `parameters` field of `TCustom`, you should now use either `QueryParametersTrait` or `RequestHeadersTrait`. If you were customizing response headers with the `response` field of `TCustom`, you should now use `ResponseHeadersTrait` for customization.\n\nThe documentation link above explains how to use these trait types.\n\n## Deprecations\n\n:::caution\nDeprecated items will be removed in 2 release cycles.\n:::\n\n### `@collectionFormat` decorator is deprecated\n\nThe `@collectionFormat` decorator in `@azure-tools/typespec-autorest` is deprecated in favor of a new 'format' option in the `@query` and `@header` decorators. Note that \"csv\" is the new default format for representing array types in headers, while \"multi\" is the default format for representing array types in query parameters.\n\nFor example\n\n```typespec\nmodel Widget {\n  @collectionFormat(\"multi\")\n  @query\n  colors: string[];\n\n  @collectionFormat(\"csv\")\n  @header(\"x-ms-flanges\")\n  flanges: string[];\n}\n```\n\nshould be changed to\n\n```typespec\nmodel Widget {\n  @query({\n    format: \"multi\",\n  })\n  colors: string[];\n\n  @header({\n    name: \"x-ms-flanges\",\n    format: \"csv\",\n  })\n  flanges: string[];\n}\n```\n\nor, taking advantage of the default format for headers and query parameters\n\n```typespec\nmodel Widget {\n  @query colors: string[];\n  @header(\"x-ms-flanges\") flanges: string[];\n}\n```\n", "file_path": "../../docs\\release-notes\\release-2023-01-12.md", "link_to_file": "file://../../docs\\release-notes\\release-2023-01-12.md"}, {"file_content": "---\ntitle: February 2023\n---\n\n# Release Notes February 2023 (2023-02-07)\n\n:::danger\nThis release contains **breaking changes**\n:::\n\nSee TypeSpec Core [release notes](https://microsoft.github.io/typespec/release-notes/release-2023-02-07)\n\n## New Features\n\n### typespec-autorest\n\n- Added reference docs for `typespec-autorest` emitter to the website\n\n### typespec-azure-core\n\n- Allow customization of error types in the second parameter to the `Azure.Core.ResourceOperations` interface.\n- Added documentation to the website\n\n### typespec-client-generator-core\n\n- Add abstractions for client and json naming `getClientName` and `getJsonName`\n- Add `@include` and `exclude` decorators to control type emission\n- Use `DPGContext` instead of `Program`\n- Add usage and reference documentation to the website\n\n### Microsoft.TypeSpec.Providerhub.Controller\n\n- Add new serialization types to correctly serialize enumerations\n\n### typespec-providerhub-controller\n\n- Fix serialization issue with optional value types\n\n## Breaking Changes\n\n### typespec-autorest breaking changes\n\n- Removed deprecated `@pageable` decorator, use `Azure.Core.Page<T>` instead\n- Removed deprecated `@asyncOperationOptions` decorator. Use `@extension(\"x-ms-long-running-operation-options\", {options})` directly instead\n\n### typespec-azure-core breaking changes\n\n#### Client sidecar types and decortors move to `typespec-client-generator-core` library\n\n- Removed `@client`, `@clientDefinition` and `@returnsSubclient` decorators. Use `@client` from the `typespec-client-generator-core` library instead.\n- Removed `getClientItems`, `getClientDefinition`, `getClientDefinitions`, `getReturnedSubclient`, `gatherOperations` and `getClientOperations` functions. Use the `getClient` operation from `typespec-client-generator-core` instead\n- Removed `ClientDefinition` interface.\n- Removed `Subclient` operation template.\n\n### typespec-azure-resource-maneger breaking changes\n\n- Removed deprecated `@armNamespace` decorator. Use `@armProviderNamespace` instead.\n- Removed deprecated `TenantResourceList` model. Use `ResourceListByParent` or `ResourceListAtScope` instead.\n- Removed deprecated `ResourceCommonParameters` model. Use `BaseParameters<TResource>` instead.\n- Removed `ExtensionResourceCommonParameters` model. Use `ExtensionBaseParameters` or `Baseparameters<TResource>` instead.\n- Removed `CommonTenantScope` model. Use `TenantBaseParameters` or `BaseParameters<TResource>` instead.\n\n### typespec-client-generator-core breaking changes\n\n- Removed `@convenienceAPI` decorator. Use `@convenientAPI` and `@protocolAPI` instead.\n- Removed `getConvenienceAPIName` function. Use `shouldGenerateProtocol` and `shouldGenerateConvenient` functions instead.\n\n### TypeSpec-Providerhub-Controller breaking changes\n\n- Removed `service-code-path` emitter option. Use `emitter-output-dir` instead.\n- Now generates nullable valuable types for optional value type parameters\n\n## Deprecations\n\n### typespec-azure-resource-manager deprecations\n\n#### `Azure.ResourceManager` ResourceOperations interface will be changed to TrackedResourceOperations\n\nThe standard interface template for resource operations was called `ResourceOperations<T, TProperties>`. This has changed to\n`TrackedResourceOperations<T, TProperties>` to avoid name clashes with similar resource operations interfaces in `@typespec/rest` and `@azure-tools/typespec-azure-core`.\n\n##### Migrating to the new model\n\nChange references to `ResourceOperations<T, TProperties>` to `TrackedResourceOperations<T, TProperties>`:\n\n```typespec\ninterface Widgets extends ResourceOperations<Widget, WidgetProperties> {}\n```\n\nshould be changed to:\n\n```typespec\ninterface Widgets extends TrackedResourceOperations<Widget, WidgetProperties> {}\n```\n", "file_path": "../../docs\\release-notes\\release-2023-02-07.md", "link_to_file": "file://../../docs\\release-notes\\release-2023-02-07.md"}, {"file_content": "---\ntitle: March 2023\n---\n\n# Release Notes March 2023 (2023-03-13)\n\n:::danger\nThis release contains **breaking changes**\n:::\n\nSee TypeSpec Core [release notes](https://microsoft.github.io/typespec/release-notes/release-2023-03-13)\n\nSee [Cadl to TypeSpec rename and migration FAQ](./cadl-typespec-migration.md)\n\n## New Features\n\n### typespec-azure-core\n\n- Added `getLroMetadata` helper for resolving LROs in client generation code\n- Added documentation of semantic models for LROs\n- Fixed issues with OperationStatus templates\n\n### typespec-azure-resource-manager\n\n- Update operation templates to conform with new ARM RPC requirements\n\n### typespec-client-generator-core\n\n- Export embedded models in Array/List/Model for `getAllModels`.\n- fix getAllModels when there are no models\n\n### Microsoft.TypeSpec.Providerhub.Controller\n\n- Fix serialization issues and add support for paging\n\n### typespec-providerhub-controller\n\n- Add new known types and fix produces types for actions and accepted responses\n- Add support for empty and asynchronous produces types for actions in the controller\n\n## Breaking Changes\n\n### Package Renaming (Cadl -> TypeSpec)\n\nPackages now use `typespec` instead of `cadl` in package names.\n\n| Old Package Name                         | New Package Name                             |\n| ---------------------------------------- | -------------------------------------------- |\n| @azure-tools/cadl-autorest               | @azure-tools/typespec-autorest               |\n| @azure-tools/cadl-azure-core             | @azure-tools/typespec-azure-core             |\n| @azure-tools/cadl-azure-resource-manager | @azure-tools/typespec-azure-resource-manager |\n| @azure-tools/cadl-DPG                    | @azure-tools/typespec-client-generator-core  |\n| @azure-tools/cadl-diff                   | @azure-tools/typespec-diff                   |\n| @azure-tools/cadl-providerhub            | @azure-tools/typespec-providerhub            |\n| @azure-tools/cadl-providerhub-controller | @azure-tools/typespec-providerhub-controller |\n\nThe `migrate` package can be used to migrate specs to using the new package imports and namespaces.\nFor more information about migrating to new TypeSpec packages, see the [note on Cadl to TypeScript Migration](https://azure.github.io/typespec-azure/docs/next/release-notes/cadl-typespec-migration).\n", "file_path": "../../docs\\release-notes\\release-2023-03-13.md", "link_to_file": "file://../../docs\\release-notes\\release-2023-03-13.md"}, {"file_content": "---\ntitle: April 2023\n---\n\n# Release Notes April 2023 (2023-04-11)\n\n:::danger\nThis release contains **breaking changes**\n:::\n\nSee TypeSpec Core [release notes](https://microsoft.github.io/typespec/release-notes/release-2023-04-11)\n\n## New Features\n\n### @azure-tools/typespec-autorest\n\n- Support share route scenarios with x-ms-paths.\n\n### @azure-tools/typespec-azure-core\n\n- Add versioning support to standard Azure.Core traits via the `traitAdded` decorator\n- Add a `TErrorResponse` template parameter to `RpcOperation` to make the error response type customizable\n\n### @azure-tools/typespec-client-generator-core\n\n- Add support for unions\n- Add DPG shared interfaces and initial logic to create a method response\n- Expose list and dict converter\n- Expose converter functions, fix simple sdk types\n- Update Client and Dpg prefixes to be Sdk for consistency\n\n## Bug Fixes\n\n### @azure-tools/typespec-azure-core\n\n- Fix CreateOrReplace Lro template\n- Change `@azure-tools\\typespec-azure-core\\no-unknown` diagnostic from error to warning\n- Suppress diagnostics in getLroMetadata execution\n\n### @azure-tools/typespec-client-generator-core\n\n- Fix intrinsic type checking in getSdkSimpleType\n\n### @azure-tools/typespec-providerhub-controller\n\n- Fix issues with generating patch operations for tags and custom update templates\n\n## Breaking Changes\n\n### @azure-tools/typespec-autorest: Config interpolation\n\n`output-file` now use config path interpolation. Existing value must be change to include the values to interpolate. e.g. `custom.json` -> `{azure-resource-provider-folder}/{service-name}/{version-status}/{version}/custom.json`\n\n### @azure-tools/typespec-autorest: Remove deprecated decorator\n\nRemoved deprecated `@collectionFormat` decorator. Use `@header({format: })` or `@query({format:})` instead.\n\n**Example:**\n\n```tsp\n// Before\nop list(@collectionFormat(\"multi\") @query select: string[]): Pet[];\n\n// Now\nop list(\n  @query({\n    format: \"multi\",\n  })\n  select: string[],\n): Pet[];\n```\n", "file_path": "../../docs\\release-notes\\release-2023-04-11.md", "link_to_file": "file://../../docs\\release-notes\\release-2023-04-11.md"}, {"file_content": "---\ntitle: May 2023\n---\n\n# Release Notes May 2023 (2023-05-10)\n\nSee TypeSpec Core [release notes](https://microsoft.github.io/typespec/release-notes/release-2023-05-10)\n\n## New Features\n\n### @azure-tools/typespec-autorest features\n\n- **Added** new option `arm-types-dir` used to specify the directory for arm common types\n- Respect `client` projection target to resolve `operationId` and `x-ms-client-name`\n\n### @azure-tools/typespec-azure-core features\n\n- **Added** new `operation-missing-api-version` linting rule for operations in versioned namespaces.\n- Add linter rules for operation names.\n- Add warning if operation has multiple non-error status codes with different schemas.\n- Add linter warning if property name is the same as its enclosing model in a case-insensitive manner.\n- Add warning if `OpenAPI.operationId` decorator is used in Azure specs, as it should not be required.\n- Add linter warning if orderBy is used as a parameter to list operations.\n- Add linter warning if request body is a raw array type.\n- **Added** new `byos` linting rule, warning against storage management\n- **Added** linter rule recommending to use `csv` for query and header collection format.\n- [Linter] Added new rule against using fixed enum as discriminator\n- **Added** new linting rule discouraging use of nullable properties\n- **Added** new `no-object` linting rule warning against usage of `object` type\n- **Added** linting rule discouraging use of `offsetDateTime`\n- Add trait properties to parameters and response of `RpcOperation`\n\n### @azure-tools/typespec-azure-resource-manager features\n\n- Added templates for checkNameAvailability\n- **Added** Support for the new autorest `arm-types-dir` option\n\n### @azure-tools/typespec-client-generator-core features\n\n- **Added** getSdkModelPropertyType\n- **Added** enum converter\n- **Added** duration to client format\n- **Added** lint rule for @friendlyName.\n- **Added** getSdkConstant\n- Compete transitive closure of @internal methods and models\n- generate nullable enums\n- refine types in union and enum\n- remove support for zonedDateTime\n\n### @azure-tools/typespec-providerhub-controller features\n\n- Add support for `@encode` decorator\n\n## Bug Fixes\n\n### @azure-tools/typespec-azure-core bug fixes\n\n- Fix issue with LongRunningResourceCreateWithServiceProvidedName.\n- Update SkipQueryParameter default to 0.\n- FIx: `byos` rule doesn't report twice on `op is` referencing a template instance\n\n### @azure-tools/typespec-azure-resource-manager fixes\n\n- Fix issue where a decorator renames operations in a way that is contrary to guidelines.\n- Fix issue with overriding interface lifecycle operations\n\n### Microsoft.TypeSpec.ProviderHub.Controller nuget package fixes\n\n- Fix over-premissive serialization for enums\n", "file_path": "../../docs\\release-notes\\release-2023-05-10.md", "link_to_file": "file://../../docs\\release-notes\\release-2023-05-10.md"}, {"file_content": "---\ntitle: June 2023\n---\n\n# Release Notes June 2023 (2023-06-06)\n\n:::danger\nThis release contains **breaking changes**\n:::\n\nSee TypeSpec Core [release notes](https://microsoft.github.io/typespec/release-notes/release-2023-06-06)\n\n## New Features\n\n- .Net packages now published to public Nuget\n- Decorators are now fully specified in TypeSPec across all libraries. This improves reference documentation and IDE completion when using decorators.\n\n### `@azure-tools/typespec-azure-core`\n\n- Added `LongRunningRpcOperation` template to Azure.Core\n- Added new scalars for known formats `uuid`, `ipV4Address`, `ipV6Address` and `eTag`\n- Added descriptions to library enums\n\n### `@azure-tools/typespec-azure-resource-manager`\n\n- Added descriptions to library enums\n\n### `@azure-tools/typespec-client-generator-core`\n\n- Add support for scalars that use `@encode`.\n- Add mitigation for `format` removal in `url` scalar.\n- Add `scope` to internal decorator\n\n## Bug Fixes\n\n- Missing decorator signatures added for all libraries, adding reference documentation and completion help in language IDE tooling.\n- OpenAPI `format` derived from encoding is fixed to favor the appropriate format\n- OpenAPI parameter `@doc` now overrides the `@doc` for the underlying type\n\n## New Linting Rules\n\n### `@azure-tools/azure-core`\n\n- Documentation comments now required on Enums and Enum values\n- Using encodings outside the known set causes a warning.\n- Discourage using explicit `@route` in resource operations.\n- Discourage using path parameters in RPC operations.\n- Add validation to `@pollingOperation` so it can only refer to an operation that returns a model or union of models\n\n## Deprecations\n\n### Azure.Core Deprecations\n\nOperation templates not accessed through `ResourceOperations<T>` should not be used in new specifications. Instead, services should specify the standard operation traits using `ResourceOperations<T>` and use the resulting interface to define these operations. This change will not cause any deprecation warning in existing specs, but the older operations should not be used for new APIs.\n\n#### Old (deprecated) operations pattern\n\n```typespec\nop get is Azure.Core.ResourceRead<MyResource>;\n```\n\n#### New operations pattern\n\n```typespec\nalias ServiceTraits = SupportsRepeatableRequests &\n  SupportsConditionalRequests &\n  SupportsClientRequestId;\n\nalias Operations = Azure.Core.ResourceOperations<ServiceTraits>;\n\nop get is Operations.ResourceRead<MyResource>;\n```\n\nThis deprecation impacts the following operations:\n\n- Azure.Core.ResourceCreateOrReplace\n- Azure.Core.LongRunningResourceCreateOrReplace\n- Azure.Core.ResourceCreateOrUpdate\n- Azure.Core.LongRunningResourceCreateOrUpdate\n- Azure.Core.ResourceUpdate\n- Azure.Core.ResourceCreateWithServiceProvidedName\n- Azure.Core.LongRunningResourceCreateWithServiceProvidedName\n- Azure.Core.ResourceRead\n- Azure.Core.ResourceDelete\n- Azure.Core.LongRunningResourceDelete\n- Azure.Core.ResourceList\n- Azure.Core.ResourceAction\n- Azure.Core.LongRunningResourceAction\n- Azure.Core.ResourceCollectionAction\n- Azure.Core.LongRunningResourceCollectionAction\n\n## Breaking Changes\n\n### `@azure-tools/typespec-autorest` Breaking Changes\n\n- Examples for the same operation must have unique titles. In the past, one of the examples would have been silently dropped. When examples for an operation have duplicate titles, a diagnostic is thrown, prompting users to fix the problem.\n- In operations with an implicit body parameter, the body parameter is now required.\n\n### `@azure-tools/typespec-azure-core` Breaking Changes\n\n- Standard error type schema corrected to match API Guidelines. This will cause OpenAPI emission to change to the correct error schema.\n\n### `@azure-tools/typespec-azure-resource-manager` Breaking Changes\n\n- The following templates now use `TypeSpec.Reflection.Model` as the constraint for their `TProperties` parameter. Any template that builds on or uses these templates should have the same parameter constraint:\n  - ResourceUpdateModelProperties\n  - ResourceUpdateModel\n  - ProxyresourceUpdateModel\n  - ResourceOperations\n  - TrackedResourceOperations\n  - ResourceInstanceOperations\n  - TenantResourceOperations\n  - ResourceUpdateAsync\n  - ResourceUpdateSync\n  - ExtensionResourceInstanceOperations\n  - ExtensionResourceOperations\n  - ResourceUpdate\n  - ProxyResourceUpdate\n  - ExtensionResourceUpdate\n  - TenantResourceUpdate\n  - ArmResourcePatchAsync\n  - ArmResourcePatchSync\n- CustomPatch templates were updated to that the `TPatchModel` parameter extends `TypeSpec.Reflection.Model`. Any template that builds on or uses these templates should use the same parameter constraint:\n  - ArmCustomPatchAsync\n  - ArmCustomPatchSync\n- Resource Action operation teamplates have been updated to use `TypeSPec.Reflection.Model` as the constraint for `TRequest` and `TResponse` parameters. Any template that builds on or uses these templates should have the same parameter constraint:\n  - ArmResourceActionAsync\n  - ArmResourceActionSync\n  - ArmResourceActionNoContentAsync\n  - ArmResourceActionNoContentSync\n- The `checkNameAvailability`, `checkGlobalNameAvailability` and `checkLocalNameAvailability` templates have been updated so that all of their parameters extend `TypeSpec.Model.Reflection`. Any template that builds on or uses these templates should use the same parameter constraint.\n", "file_path": "../../docs\\release-notes\\release-2023-06-06.md", "link_to_file": "file://../../docs\\release-notes\\release-2023-06-06.md"}, {"file_content": "---\ntitle: July 2023\n---\n\n# Release Notes July 2023 (2023-07-11)\n\n:::danger\nThis release contains **breaking changes**\n:::\n\nSee TypeSpec Core [release notes](https://microsoft.github.io/typespec/release-notes/release-2023-07-11)\n\n## New Features\n\n### `@azure-tools/typespec-autorest` emitter\n\n- Deterministically order properties in generated OpenAPI documents. This will cause some ordering changes in this release, but should prevent ordering changes in the future.\n- Allow use of an `enum` type as a discriminator\n- Add warning for unsupported empty `enum` types\n- Show error details when failing to load an example file\n- Add support for nullable `enum` properties\n- Omit `x-typespec-name` extension by default from autorest output. A new configuration and command line option `include-x-typespec-name: \\\"inline-only\\\" | \\\"never\\\"` has been added to get previous behavior\n- Allow `readonly` schema for long-running operation status values, like `provisioningState`. Enable the new configuration option `use-read-only-status-schema: true` to get the new behavior.\n- Support non-specific scalar types like `numeric`, `integer` and `float`. Emit a warning when these types are used and emit the best approximation for the type.\n\n### `@azure-tools/typespec-azure-resource-manager` library\n\n- Add operation templates to support new Asynchronous delete API guidelines `ArmResourceDeleteWithoutOkAsync`\n- Add operation templates to support new Asynchronous action operations with no return value `ArmResourceActionNoResponseContentAsync`\n\n### `@azure-tools/typespec-providerhub-controller` emitter\n\n- Support non-specific scalar types like `numeric`, `integer` and `float`. Emit a warning when these types are used and emit the best c-sharp approximation for the type.\n\n### `Microsoft.Providerhub.Controller.Common` library\n\n- Add types to model valid and invalid `ValidationResponse` types used in `Validate<Operation>` extension methods\n\n## Bug Fixes\n\n### `@azure-tools/typespec-azure-core` bug fixes\n\n- Correct `GetLroMetadata` response for operations not tied to a resource (e.g. RPC operations)\n\n### `@azure-tools/typespec-azure-resource-manager` bug fixes\n\n- Fix generated route for `CheckLocalNameAvailability` operation template\n- Update `LocationParameter` to reference ARM common types\n\n### `@azure-tools/typespec-client-generator-core` bug fixes\n\n- fix for decorator about `scalar extends string/numeric`\n\n### `@azure-tools/typespec-providerhub-controller` emitter bug fixes\n\n- Emit generated versioning classes with models rather than with controllers, fixing issues with solutions with separate controller and model projects\n- Fix serialization issue with core `ResourceBase` type\n- Fix issues with getting started documentation in dotnet 7.0\n\n### `Microsoft.Providerhub.Controller.Common` library bug fixes\n\n- Fix serialization of SerializationInfo property for resource models\n\n## New Linting Rules (`@azure-tools/typespec-azure-core`)\n\n- Use standard names for operations\n- Ensure `NoContent` (204) responses do not have a response body and `OK` (200) and `Created` (201) responses have a response body\n- Ensure RPC operations marked with `@get` or `@delete` don't have request bodies\n- Require `@useAuth` decorator on Azure services\n- Discourage overriding the HTTP verb on standard operations\n- Discourage custom 4xx and 5xx responses\n\n## Deprecations\n\n### `@azure-tools/typespec-azure-resource-manager` deprecations\n\n- `ArmResourceDeleteAsync` is deprecated due to new ARM RPC guidelines. Asynchronous delete operations should use `ArmResourceDeleteWithoutOkAsync`\n- `ArmResourceActionNoContentAsync` is deprecated due to new ARM RPC guidelines. Asynchronous actions with no response value should use `ArmResourceActionNoResponseContentAsync`\n\n## Breaking Changes\n\nThere are breaking changes in typespec core libraries, see [release notes](https://microsoft.github.io/typespec/release-notes/release-2023-07-11) for details.\n", "file_path": "../../docs\\release-notes\\release-2023-07-11.md", "link_to_file": "file://../../docs\\release-notes\\release-2023-07-11.md"}, {"file_content": "---\ntitle: August 2023\n---\n\n# Release Notes August 2023 (2023-08-08)\n\n:::danger\nThis release contains **breaking changes**\n:::\n\nSee TypeSpec Core [release notes](https://microsoft.github.io/typespec/release-notes/release-2023-08-08)\n\n## New Features\n\n### `@azure-tools/typespec-autorest` New Features\n\n- Annotate long-running operations with \\\"x-ms-long-running-operation\\\" extension.\n- Add interpolation support of `emitter-output-dir` for the `arm-types-dir` emitter option.\n- Add support for `@info` decorator providing the ability to specify the additional fields from openapi info object.\n\n### `@azure-tools/typespec-azure-core` New Features\n\n- Add new properties to `LroMetadata` returned from `getLroMetadata`\n- Update ResourceCreateOrReplace template to include StatusMonitor information.\n- Update `CustomPage` to generate an informative model name on instantiation\n- Add conceptual documentation on custom LRO patterns in Azure.Core\n\n### `@azure-tools/typespec-azure-resource-manager` New Features\n\n- Allow shared libraries of ARM types and operations\n- Allow override of arm provider namespace\n- Add descriptions for `ArmResourceCreateOrUpdate` responses to indicate that an `OK` response indicates and update ans a `Created` response indicates a newly created resource.\n- Add new template `ArmResourceCreateOrReplaceSync` that returns `OK` and `Accepted` responses for synchronous PUT requests.\n- Add template alias `ArmResourceCreateOrReplaceAsync` for consistent naming of recommended templates for `PUT` operations.\n\n### `@azure-tools/typespec-providerhub-controller` New Features\n\n- Support shared libraries of ARM types and operations\n- Support new ARM template response types\n- Add interpolation support of `emitter-output-dir` for the `registration-output-path` emitter option.\n\n## Bug Fixes\n\n### `@azure-tools/typespec-autorest` Bug Fixes\n\n- Fix: Apply `@minItems` and `@maxItems` decorators on model arrays.\n\n### `@azure-tools/typespec-azure-core` Bug Fixes\n\n- Fix LRO status header property detection for `Location` headers\n\n### `@azure-tools/typespec-azure-resource-manager` Bug Fixes\n\n- Fix `ArmTagsPatchAsync` with a default value for the second (unused) parameter.\n\n### `@azure-tools/typespec-client-generator-core` Bug Fixes\n\n- add transitivity support for `@include`\n- \"Fix the `getEmitterTargetName` function to use the real name of the emitter\n\n## Breaking Changes\n\n- There are breaking changes in the TypeSpec core compiler, see [the release notes](https://microsoft.github.io/typespec/release-notes/release-2023-08-08) for details.\n", "file_path": "../../docs\\release-notes\\release-2023-08-08.md", "link_to_file": "file://../../docs\\release-notes\\release-2023-08-08.md"}, {"file_content": "---\ntitle: September 2023\n---\n\n# Release Notes September 2023 (2023-09-12)\n\n:::danger\nThis release contains **breaking changes**\n:::\n\nSee TypeSpec Core [release notes](https://microsoft.github.io/typespec/release-notes/release-2023-09-12)\n\n## New Features\n\n### `@azure-tools/typespec-autorest` New Features\n\n- Handle general encodings for `utcDateTime`.\n- Support Http operations that set custom visibility.\n\n### `@azure-tools/typespec-azure-core` New Features\n\n- Migrate linter rules into a new ruleset. Linter rules will NOT be automatically enabled. Add the following to your `tspconfig.yaml` to execute all typespec-azure-core linter rules:\n\n  ```yaml\n  linter:\n    extends: [\"@azure-tools/typespec-azure-core/all\"]\n  ```\n\n- Trait properties can now specify a `@traitContext`, which overrides the value supplied in the trait envelope model. This enables finer granularity for applying specific properties through traits.\n- Add new decorators for customizing status monitor types in long-running operations.\n  - `@lroResult` decorates the property containing the final operation result when an operation completes successfully. This is only necessary if the property has a name other than `result`.\n  - `@lroErrorResult` decorates the property containing errors when an operation fails. This is only necessary if the property has a name other than `error`.\n  - `@pollingOperationParameter` decorates request parameters or response properties that correspond to request parameters in the linked operation. This allows emitters and libraries to call the polling operation using the result of the original operation.\n- Add new properties to OperationLinkMetadata returned from `getOperationLink`:\n  - `link` contains the mechanism for retrieving the status monitor\n  - `result` contains type information returned from the linked operation.\n  - `parameterMap` contains a map from parameters and response properties of the original operation to parameters of the linked operation.\n- Add new validation to `@pollingOperation` to ensure the referenced operation is a valid status monitor, and the decorated (original) operation has a valid link to the operation, or contains response headers that link to the status monitor.\n- Allow multiple terminal status values for successful, failed, and canceled long-running operations.\n- Add new properties to `LroMetadata` returned from `getLroMetadata`\n  - `envelopeResult` contains the status monitor type\n  - `logicalPath` contains a path to the field containing lro results (if any).\n- `@pollingOperation` and `@finalOperation` determine the status monitor type and final result type for long-running operations\n- Add [conceptual documentation and samples for long-running operations](https://azure.github.io/typespec-azure/docs/howtos/Azure%20Core/long-running-operations).\n\n### `@azure-tools/typespec-azure-resource-manager` New Features\n\n- Migrate linter rules into a new ruleset. Linter rules will NOT be automatically enabled. Add the following to your `tspconfig.yaml` to execute all typespec-azure-resource-manager linter rules:\n\n  ```yaml\n  linter:\n    extends: [\"@azure-tools/typespec-azure-resource-manager/all\"]\n  ```\n\n- Add common types and sample for `privateLinks` and `privateEndpoints`\n\n### `@azure-tools/typespec-client-generator-core` New Features\n\n- Add new calls to determine if a service is an ARM service.\n- Add documentation for SDK types.\n- handle both `@friendlyName` and `@projectedName` in function `getLibraryName()`.\n- Deduplicate models in the map.\n- Fix enum discriminator type for base class.\n- Add `getAllModels` function.\n- Make `__raw` optional.\n- Add tuple type support.\n- Add `@usage` and `@access` decorators.\n\n## Bug Fixes\n\n### `@azure-tools/typespec-autorest` Bug Fixes\n\n- Fix handling of `model extends Record<T>` and `model is Record<T>`.\n- Resolve the correct `nextLinkName` if property name has `.`.\n- Fix handling of header with encode `rfc7231`\n- Fix sorting the properties in known OpenAPI extensions.\n\n### `@azure-tools/typespec-azure-core` Bug Fixes\n\n- Apply conditional request headers to all appropriate operations.\n- Fixes to allow traits to work with `RpcOperation` and `LongRunningRpcOperation`\n\n### `@azure-tools/typespec-azure-resource-manager` Bug Fixes\n\n- Change `ArmResourceActionNoContentAsync` to indicate it should not be used for new operations. `ArmResourceActionNoResponseContentAsync` should be used instead.\n\n### `@azure-tools/typespec-client-generator-core` Bug Fixes\n\n- Fix enum discriminator type for base class.\n\n## Deprecations\n\n### `@azure-tools/typespec-azure-core` Deprecations\n\n- Paging metadata provides a new segments array to resolve `items` and `nextLink` path. The old `itemsPath` and `nextLinkPath` are deprecated as they cannot be used when a property name contains a `.`.\n\n## Breaking Changes\n\n- There are breaking changes in the TypeSpec core compiler, see [the release notes](https://microsoft.github.io/typespec/release-notes/release-2023-09-12) for details.\n\n### `@azure-tools/typespec-azure-core` Breaking Changes\n\n- `@pollingOperation` now overrides the value provided in `@pollingLocation` in operation responses.\n- `@finalOperation` now overrides the value provided in `@finalLocation` in operation responses.\n- `CreateOrUpdate` and `LongRunningCreateOrUpdate` now include create-only properties in the request body.\n- `getLongRunningStates` and `extractLroStates` now return an array of strings for `succeededState`, `failedState` and `canceledState` properties.\n", "file_path": "../../docs\\release-notes\\release-2023-09-12.md", "link_to_file": "file://../../docs\\release-notes\\release-2023-09-12.md"}, {"file_content": "---\ntitle: October 2023\n---\n\n# Release Notes October 2023 (2023-10-11)\n\n:::danger\nThis release contains **breaking changes**\n:::\n\nSee TypeSpec Core [release notes](https://microsoft.github.io/typespec/release-notes/release-2023-10-11)\n\n## New Features\n\n### `@azure-tools/typespec-autorest` New Features\n\n- Add support for status code ranges.\n\n### `@azure-tools/typespec-azure-core` New Features\n\n- Migrate 'friendly-name' rule from typespec-code-generator-core to typespec-azure-core.\n\n### `@azure-tools/typespec-client-generator-core` New Features\n\n- Migrate 'friendly-name' rule from typespec-code-generator-core to typespec-azure-core.\n- Add support for cross language definition id.\n- Add ARM to sdk context.\n- Return TypeSpec Union type for string literal union.\n- Refine `getAllModels` implementation including:\n  - Add deprecation info\n  - Add known values\n  - Change discriminator type in base model\n\n### `@azure-tools/typespec-providerhub-controller` New Features\n\n- Add ResourceProvider Namespace constant to generated service routes.\n\n## Bug Fixes\n\n### `@azure-tools/typespec-autorest` Bug Fixes\n\n- Fix: A diagnostic will now be emitted for any HTTP authentication scheme not supported by OpenAPI 2.\n\n### `@azure-tools/typespec-azure-core` Bug Fixes\n\n- Fix: Compiler crash when `createLroMetadata`` was called with an incomplete LRO specification.`\n\n### `@azure-tools/typespec-client-generator-core` Bug Fixes\n\n- Fix: Correct type for the values of SdkTupleType.\n- Fix: Handle models with duplicate names.\n- Fix: Correct union type handling logic in common interface.\n\n### `@azure-tools/typespec-msbuild-target` Bug Fixes\n\n- Fix: Remove dependency on `Language==C#`.\n\n### `@azure-tools/typespec-providerhub-controller` Bug Fixes\n\n- Fix: Eliminate trailing space in generated enums.\n- Fix: Use fully-qualified type reference for generated enum defaults.\n\n### `@azure-tools/typespec-providerhub-controller-common` Bug Fixes\n\n- Fix: Correct handling of hidden properties in `VersionedSerializer`.\n\n## Breaking Changes\n\n- There are breaking changes in the TypeSpec core libraries, see [the release notes](https://microsoft.github.io/typespec/release-notes/release-2023-10-11) for details.\n\n### `@azure-tools/typespec-azure-core` Breaking Changes\n\n- Fix parameter order of `Azure.Core.Foundations.GetOperationStatus`.\n- When an interface based on `ResourceOperations` is created, a unique diagnostic will now be raised for each missing required trait. This may require new suppressions to be added to existing specifications.\n", "file_path": "../../docs\\release-notes\\release-2023-10-11.md", "link_to_file": "file://../../docs\\release-notes\\release-2023-10-11.md"}, {"file_content": "---\ntitle: November 2023\n---\n\n# Release Notes November 2023 (2023-11-07)\n\n:::danger\nThis release contains **breaking changes**\n:::\n\nSee TypeSpec Core [release notes](https://microsoft.github.io/typespec/release-notes/release-2023-11-07)\n\n## New Features\n\n### `@azure-tools/typespec-autorest` New Features\n\n- Add support for ARM common definitions versioning.\n- Add better support for `@sharedRoutes` by automatically disambiguating x-ms-paths when operation signatures don't differ by query params.\n\n### `@azure-tools/typespec-azure-core` New Features\n\n- Add new linter rules discouraging misuse of inheritance and composition. Warn when extending a model without a discriminator or alternatively when composing a model with a discriminator.\n\n### `@azure-tools/typespec-azure-resource-manager` New Features\n\n- ARM `common-types` versions can now be selected for each service specification version using the `Azure.ResourceManager.CommonTypes.Versions` enum with the new `@armCommonTypesVersion` decorator.\n- Add support for Private Links `v5` common types.\n- Add support for Customer Managed Keys `v5` common-types.\n\n### `@azure-tools/typespec-client-generator-core` New Features\n\n- Add parent enum as type on `SdkEnumValueType`.\n- Add `emitterName` and `emitterContext` to `SdkContext`.\n\n### `@azure-tools/typespec-providerhub-controller` New Features\n\n- Add extensibility point to generated enum struct - marked generated struct as `readonly partial`.\n- Added common base class for `ResourceControllerBase` classes.\n\n## Bug Fixes\n\n### `@azure-tools/typespec-autorest` Bug Fixes\n\n- Fix: Stops emitting an error when using `@body _: void` in operation parameters and treat it as no body.\n\n### `@azure-tools/typespec-azure-core` Bug Fixes\n\n- Fix: `getLroMetadata` did not return the correct `logicalResult` when the `@finalLocation` was a `ResourceLocation`.\n- Fix: Correct property validation for `@lroResult` and `@lroErrorResult`.\n\n### `@azure-tools/typespec-client-generator-core` Bug Fixes\n\n- Fix: `@access` does not propagate.\n- Fix: usage override for orphan enum.\n\n### `@azure-tools/typespec-msbuild-target` Bug Fixes\n\n- Fix: Removed condition `Language==C#`.\n\n### `@azure-tools/typespec-providerhub-controller` Bug Fixes\n\n- Fix: Ensure models referenced only in derived types are generated.\n\n## Deprecations\n\n### `@azure-tools/typespec-client-generator-core` Deprecations\n\n- Deprecate `@include`, `@exclude`, `@internal`, `@clientFormat`.\n\n## Breaking Changes\n\n- There are breaking changes in the TypeSpec core libraries, see [the release notes](https://microsoft.github.io/typespec/release-notes/release-2023-11-07) for details.\n\n### Typescript types breaking change\n\nThe `package.json` files for all packages have been changed to use the standard `types` field instead of the legacy `typesVersions` field to specify types for subpath exports. This means that packages consuming TypeSpec must use the `moduleResolution` setting with `node16` or `nodenext` in their `tsconfig.json`.\nYou might see the following error:\n\n```bash\nCannot find module '@typespec/compiler/testing'. Did you mean to set the 'moduleResolution' option to 'nodenext'\n```\n\nThis can be resolved by changing the following in `tsconfig.json`:\n\n```diff\n-\"moduleResolution\": \"ESNext\",\n+\"moduleResolution\": \"node16\",\n```\n\n### Dropped Support for Node version 16\n\n- All typespec packages now specify node 18 as the minimum version. Consuming packages should no longer use node 16 and update the node specification in the `engines` section of their package.json file appropriately.\n\n### `@azure-tools/typespec-azure-core` Breaking Changes\n\n- Removed `Inprogress` from `OperationState` enum. Added `Running`, `NotStarted` states. All APIs that use this enumeration for operation status values will now include these states.\n", "file_path": "../../docs\\release-notes\\release-2023-11-07.md", "link_to_file": "file://../../docs\\release-notes\\release-2023-11-07.md"}, {"file_content": "# Duplicate Body Error When Instantiating `ProxyResourceOperations`\n\nWhen instantiating the `ProxyResourceOperations<TResource>` template with an incorrect second parameter, a \"duplicate body\" error like the following may result:\n\n```javascript\nerror @typespec/http/duplicate-body\nOperation has a @body and an unannotated parameter. There can only be one representing the body\n```\n\n## Symptoms\n\nWhen instantiating the `ProxyResourceOperations<TResource>` template, it is easy to assume that the second parameter should contain the RP-specific properties of the resource, as with the `TrackedResourceOperations<TResource, TProperties>` template.\n\n```typespec\n// INCORRECT USAGE OF THE TEMPLATE\ninterface MyResourceOperations extends ProxyResourceOperations<MyResource, MyResourceProperties> {}\n```\n\nHowever, this usage is **incorrect**, the second parameter to `ProxyResourceOperations` is optional and, if provided, is expecting an entirely different TypeSpec type. If the resource properties are supplied instead, a \"duplicate body\" error like the following will result:\n\n```javascript\nerror @typespec/http/duplicate-body\nOperation has a @body and an unannotated parameter. There can only be one representing the body\n```\n\n## Cause\n\nThis error occurs because the second parameter is an optional override for the shared request parameters for the `read`, `createOrUpdate`, and `delete` operations for the proxy resource. When the rp-specific properties are provided instead, the operation request parameters clash with the request body parameter for `createOrUpdate`.\n\n## Workaround\n\nTo fix this error, provide only one parameter to ProxyResourceOperations, the type of the resource that the operations apply to.\n\n```typespec\n// CORRECT\ninterface MyResourceOperations extends ProxyResourceOperations<MyResource> {}\n```\n", "file_path": "../../docs\\troubleshoot\\arm-proxy-operations-error.md", "link_to_file": "file://../../docs\\troubleshoot\\arm-proxy-operations-error.md"}, {"file_content": "# OneBranch SDL\n\nSDL violations for [Nuget Multifeed Config](https://docs.opensource.microsoft.com/tools/cg/how-to/nuget-multifeed-configuration/)\n\n## Symptoms\n\nIf you get S360 violations for SDL or your OneBranch builds are breaking\n\n## Cause\n\nThe Template project creates Nuget Config files with artifact feeds for azure-sdk-for-net and nuget.org. Having multiple feeds is a security vulnerability and violates the SDL.\n\n## Workaround\n\nCreate your own ADO Artifact Feed, and add `https://api.nuget.org/v3/index.json` and `azure-feed://azure-sdk/public/azure-sdk-for-net@Local` as upstream feeds. This enables you to only specify your package feed, and then have your feed pull from the upstream feeds.\n", "file_path": "../../docs\\troubleshoot\\sdl.md", "link_to_file": "file://../../docs\\troubleshoot\\sdl.md"}, {"file_content": "# How to suppress warnings\n\nThis article helps you to suppress warning messages generated by TypeSpec and libraries.\n\n## Symptoms\n\nTypeSpec core and libraries could generate and output warning messages based on linting rules.\n\n## Cause\n\nThese linting rules are introduced to ensure high-quality specs being generated. Sometimes they are used to call out areas needs developer attention to meet library or organization guidelines.\n\n## Workaround\n\nSome of the rules after review can be suppressed to get clean compile outputs using `#suppress ErrCode ReasonMsg` statement. The error code is the string reported in compiler output.\n\nFor example:\n\n```\n#suppress \"@azure-tools/typespec-providerhub/no-identifier-property-in-array-item\" \"Error items have no unique identifier.\"\n@doc(\"An array of details about specific errors that led to this reported error.\")\ndetails: Error[];\n```\n", "file_path": "../../docs\\troubleshoot\\suppresswarnings.md", "link_to_file": "file://../../docs\\troubleshoot\\suppresswarnings.md"}, {"file_content": "# Nuget warning NU1605\n\nThis article helps you to solve the nuget warning NU1065 which can occur when including the Microsoft.TypeSpec.ProviderHub.Controller package in a solution that targets .Net Core 3.0 or higher.\n\n## Symptoms\n\n```\nerror NU1605: Detected package downgrade: System.Collections from 4.3.0 to 4.0.11. Reference the package directly from the project to select a different version.\n  [typespec project] -> Microsoft.TypeSpec.ProviderHub.Controller 0.1.0 -> Microsoft.AspNetCore.Mvc.Core 2.2.5 -> Microsoft.Extensions.DependencyModel 2.1.0 -> Microsoft.DotNet.PlatformAbstractions 2.1.0 -> System.IO.FileSystem 4.0.1 -> runtime.win.System.IO.FileSystem 4.3.0 -> System.Collections (>= 4.3.0)\n  [typespec project] -> Microsoft.TypeSpec.ProviderHub.Controller 0.1.0 -> Microsoft.AspNetCore.Mvc.Core 2.2.5 -> Microsoft.Extensions.DependencyModel 2.1.0 -> Microsoft.DotNet.PlatformAbstractions 2.1.0 -> System.Collections (>= 4.0.11)\n```\n\n## Cause\n\nThe 'Microsoft.AspNetCore.Mvc.Core' version '2.2.5' required by 'Microsoft.TypeSpec.ProviderHub.Controller' nuget package contains some combinations of packages which shipped with .NET Core 1.0 and 1.1 which are not compatible with each other when they are referenced together in a .NET Core 3.0 or higher project.\n\n## Workaround\n\nPlease refer to [nu1605-issue-2](https://learn.microsoft.com/en-us/nuget/reference/errors-and-warnings/nu1605#issue-2) for workaround.\n", "file_path": "../../docs\\troubleshoot\\typespec-providerhub-controller-warning-nu1605.md", "link_to_file": "file://../../docs\\troubleshoot\\typespec-providerhub-controller-warning-nu1605.md"}]