// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated />

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.TypeSpec.ProviderHub.Controller;

namespace Microsoft.Contoso.Service
{
    /// <summary>
    /// The main entry point for serialization.
    /// </summary>
    public class VersionedSerializer : VersionedSerializerBase<VersionedContractResolver>
    {
        private VersionedSerializer()
        {
            ServiceVersions = new ContosoServiceVersions();
            ServiceVersionComparer = new VersionComparer(new ContosoServiceVersions());
        }

        /// <summary>
        /// Singleton instance of <see cref="VersionedSerializer" />.
        /// </summary>
        public static VersionedSerializer Instance { get; } = new VersionedSerializer();

        public IReadOnlyList<string> ServiceVersions { get; }

        public VersionComparer ServiceVersionComparer { get; } 

        protected override VersionedContractResolver GetResolver(string version)
        {
            if (!ServiceVersions.Contains(version, ServiceVersionComparer))
              throw new ArgumentException($"Version '{version}' is not valid. Please choose from '{string.Join(", ", ServiceVersions)}'");

            return UpdateResolver(new VersionedContractResolver(version, t => GetModelVersion(t, version)));
        }
    }
}
