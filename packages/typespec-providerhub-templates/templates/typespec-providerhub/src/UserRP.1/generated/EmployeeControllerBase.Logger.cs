// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated />

using System;
using Microsoft.Extensions.Logging;

namespace Microsoft.Contoso.Service.Controllers
{
    public abstract partial class EmployeeControllerBase
    {
        private static Action<ILogger, Exception> _logRequestNull;
        private static Action<ILogger, Exception> _logSubLifeCycleNotification;
        private static Action<ILogger, Exception> _logValidateRead;
        private static Action<ILogger, Exception> _logBeginRead;
        private static Action<ILogger, Exception> _logValidateCreate;
        private static Action<ILogger, Exception> _logBeginCreate;
        private static Action<ILogger, Exception> _logEndCreate;
        private static Action<ILogger, Exception> _logValidatePatch;
        private static Action<ILogger, Exception> _logBeginPatch;
        private static Action<ILogger, Exception> _logEndPatch;
        private static Action<ILogger, Exception> _logValidateDelete;
        private static Action<ILogger, Exception> _logBeginDelete;
        private static Action<ILogger, Exception> _logEndDelete;

        private static void InitializeLogger()
        {
            _logRequestNull = LoggerMessage.Define(
                LogLevel.Error,
                new EventId(1, "RequestIsNull"),
                "Request is null");
            _logSubLifeCycleNotification = LoggerMessage.Define(
                LogLevel.Information,
                new EventId(2, "SubscriptionLifeCycleNotification"),
                "SubscriptionLifeCycleNotification()");
            _logValidateRead = LoggerMessage.Define(
                LogLevel.Information,
                new EventId(11, "ValidateOperation"),
                "ValidateReadAsync()");
            _logBeginRead = LoggerMessage.Define(
                LogLevel.Information,
                new EventId(12, "BeginOperation"),
                "BeginReadAsync()");
            _logValidateCreate = LoggerMessage.Define(
                LogLevel.Information,
                new EventId(21, "ValidateOperation"),
                "ValidateCreateAsync()");
            _logBeginCreate = LoggerMessage.Define(
                LogLevel.Information,
                new EventId(22, "BeginOperation"),
                "BeginCreateAsync()");
            _logEndCreate = LoggerMessage.Define(
                LogLevel.Information,
                new EventId(23, "EndOperation"),
                "EndCreateAsync()");
            _logValidatePatch = LoggerMessage.Define(
                LogLevel.Information,
                new EventId(31, "ValidateOperation"),
                "ValidatePatchAsync()");
            _logBeginPatch = LoggerMessage.Define(
                LogLevel.Information,
                new EventId(32, "BeginOperation"),
                "BeginPatchAsync()");
            _logEndPatch = LoggerMessage.Define(
                LogLevel.Information,
                new EventId(33, "EndOperation"),
                "EndPatchAsync()");
            _logValidateDelete = LoggerMessage.Define(
                LogLevel.Information,
                new EventId(41, "ValidateOperation"),
                "ValidateDeleteAsync()");
            _logBeginDelete = LoggerMessage.Define(
                LogLevel.Information,
                new EventId(42, "BeginOperation"),
                "BeginDeleteAsync()");
            _logEndDelete = LoggerMessage.Define(
                LogLevel.Information,
                new EventId(43, "EndOperation"),
                "EndDeleteAsync()");
        }
    }
}
