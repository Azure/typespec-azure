{
  "swagger": "2.0",
  "info": {
    "title": "SearchIndexClient",
    "version": "2021-04-30-Preview",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "ApiKeyAuth": []
    },
    {
      "OAuth2Auth": [
        "https://cognitiveservices.azure.com/.default"
      ]
    }
  ],
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "name": "api-key",
      "in": "header"
    },
    "OAuth2Auth": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "https://login.contoso.com/common/oauth2/v2.0/authorize",
      "scopes": {
        "https://cognitiveservices.azure.com/.default": ""
      }
    }
  },
  "tags": [
    {
      "name": "Documents"
    }
  ],
  "paths": {
    "/docs": {
      "get": {
        "operationId": "Documents_GetSearch",
        "tags": [
          "Documents"
        ],
        "description": "Searches for documents in the index.",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "A full-text search query expression; Use \"*\" or omit this parameter to match all documents.",
            "required": false,
            "type": "string",
            "x-ms-client-name": "searchText"
          },
          {
            "name": "$count",
            "in": "query",
            "description": "A value that specifies whether to fetch the total count of results. Default is false. Setting this value to true may have a performance impact. Note that the count returned is an approximation.",
            "required": false,
            "type": "boolean",
            "x-ms-client-name": "includeTotalResultCount"
          },
          {
            "name": "facet",
            "in": "query",
            "description": "The list of facet expressions to apply to the search query. Each facet expression contains a field name, optionally followed by a comma-separated list of name:value pairs.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "x-ms-client-name": "facets"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "The OData $filter expression to apply to the search query.",
            "required": false,
            "type": "string"
          },
          {
            "name": "highlight",
            "in": "query",
            "description": "The list of field names to use for hit highlights. Only searchable fields can be used for hit highlighting.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "x-ms-client-name": "highlightFields"
          },
          {
            "name": "highlightPostTag",
            "in": "query",
            "description": "A string tag that is appended to hit highlights. Must be set with highlightPreTag. Default is &lt;/em&gt;.",
            "required": false,
            "type": "string"
          },
          {
            "name": "highlightPreTag",
            "in": "query",
            "description": "A string tag that is prepended to hit highlights. Must be set with highlightPostTag. Default is &lt;em&gt;.",
            "required": false,
            "type": "string"
          },
          {
            "name": "minimumCoverage",
            "in": "query",
            "description": "A number between 0 and 100 indicating the percentage of the index that must be covered by a search query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 100.",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "$orderBy",
            "in": "query",
            "description": "The list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to indicate ascending, and desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no OrderBy is specified, the default sort order is descending by document match score. There can be at most 32 $orderby clauses.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "x-ms-client-name": "orderBy"
          },
          {
            "name": "queryType",
            "in": "query",
            "description": "A value that specifies the syntax of the search query. The default is 'simple'. Use 'full' if your query uses the Lucene query syntax.",
            "required": false,
            "type": "string",
            "enum": [
              "simple",
              "full",
              "semantic"
            ],
            "x-ms-enum": {
              "name": "QueryType",
              "modelAsString": false,
              "values": [
                {
                  "name": "Simple",
                  "value": "simple",
                  "description": "Uses the simple query syntax for searches. Search text is interpreted using a simple query language that allows for symbols such as +, * and \"\". Queries are evaluated across all searchable fields by default, unless the searchFields parameter is specified."
                },
                {
                  "name": "Full",
                  "value": "full",
                  "description": "Uses the full Lucene query syntax for searches. Search text is interpreted using the Lucene query language which allows field-specific and weighted searches, as well as other advanced features."
                },
                {
                  "name": "Semantic",
                  "value": "semantic",
                  "description": "Best suited for queries expressed in natural language as opposed to keywords. Improves precision of search results by re-ranking the top search results using a ranking model trained on the Web corpus."
                }
              ]
            }
          },
          {
            "name": "scoringParameter",
            "in": "query",
            "description": "The list of parameter values to be used in scoring functions (for example, referencePointParameter) using the format name-values. For example, if the scoring profile defines a function with a parameter called 'mylocation' the parameter string would be \"mylocation--122.2,44.8\" (without the quotes).",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "x-ms-client-name": "scoringParameters"
          },
          {
            "name": "scoringProfile",
            "in": "query",
            "description": "The name of a scoring profile to evaluate match scores for matching documents in order to sort the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "semanticConfiguration",
            "in": "query",
            "description": "The name of the semantic configuration that lists which fields should be used for semantic ranking, captions, highlights, and answers",
            "required": false,
            "type": "string"
          },
          {
            "name": "searchFields",
            "in": "query",
            "description": "The list of field names to which to scope the full-text search. When using fielded search (fieldName:searchExpression) in a full Lucene query, the field names of each fielded search expression take precedence over any field names listed in this parameter.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "queryLanguage",
            "in": "query",
            "description": "The language of the query.",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "en-us",
              "en-gb",
              "en-in",
              "en-ca",
              "en-au",
              "fr-fr",
              "fr-ca",
              "de-de",
              "es-es",
              "es-mx",
              "zh-cn",
              "zh-tw",
              "pt-br",
              "pt-pt",
              "it-it",
              "ja-jp",
              "ko-kr",
              "ru-ru",
              "cs-cz",
              "nl-be",
              "nl-nl",
              "hu-hu",
              "pl-pl",
              "sv-se",
              "tr-tr",
              "hi-in",
              "ar-sa",
              "ar-eg",
              "ar-ma",
              "ar-kw",
              "ar-jo",
              "da-dk",
              "no-no",
              "bg-bg",
              "hr-hr",
              "hr-ba",
              "ms-my",
              "ms-bn",
              "sl-sl",
              "ta-in",
              "vi-vn",
              "el-gr",
              "ro-ro",
              "is-is",
              "id-id",
              "th-th",
              "lt-lt",
              "uk-ua",
              "lv-lv",
              "et-ee",
              "ca-es",
              "fi-fi",
              "sr-ba",
              "sr-me",
              "sr-rs",
              "sk-sk",
              "nb-no",
              "hy-am",
              "bn-in",
              "eu-es",
              "gl-es",
              "gu-in",
              "he-il",
              "ga-ie",
              "kn-in",
              "ml-in",
              "mr-in",
              "fa-ae",
              "pa-in",
              "te-in",
              "ur-pk"
            ],
            "x-ms-enum": {
              "name": "QueryLanguage",
              "modelAsString": true,
              "values": [
                {
                  "name": "None",
                  "value": "none",
                  "description": "Query language not specified."
                },
                {
                  "name": "EnUs",
                  "value": "en-us",
                  "description": "Query language value for English (United States)."
                },
                {
                  "name": "EnGb",
                  "value": "en-gb",
                  "description": "Query language value for English (Great Britain)."
                },
                {
                  "name": "EnIn",
                  "value": "en-in",
                  "description": "Query language value for English (India)."
                },
                {
                  "name": "EnCa",
                  "value": "en-ca",
                  "description": "Query language value for English (Canada)."
                },
                {
                  "name": "EnAu",
                  "value": "en-au",
                  "description": "Query language value for English (Australia)."
                },
                {
                  "name": "FrFr",
                  "value": "fr-fr",
                  "description": "Query language value for French (France)."
                },
                {
                  "name": "FrCa",
                  "value": "fr-ca",
                  "description": "Query language value for French (Canada)."
                },
                {
                  "name": "DeDe",
                  "value": "de-de",
                  "description": "Query language value for German (Germany)."
                },
                {
                  "name": "EsEs",
                  "value": "es-es",
                  "description": "Query language value for Spanish (Spain)."
                },
                {
                  "name": "EsMx",
                  "value": "es-mx",
                  "description": "Query language value for Spanish (Mexico)."
                },
                {
                  "name": "ZhCn",
                  "value": "zh-cn",
                  "description": "Query language value for Chinese (China)."
                },
                {
                  "name": "ZhTw",
                  "value": "zh-tw",
                  "description": "Query language value for Chinese (Taiwan)."
                },
                {
                  "name": "PtBr",
                  "value": "pt-br",
                  "description": "Query language value for Portuguese (Brazil)."
                },
                {
                  "name": "PtPt",
                  "value": "pt-pt",
                  "description": "Query language value for Portuguese (Portugal)."
                },
                {
                  "name": "ItIt",
                  "value": "it-it",
                  "description": "Query language value for Italian (Italy)."
                },
                {
                  "name": "JaJp",
                  "value": "ja-jp",
                  "description": "Query language value for Japanese (Japan)."
                },
                {
                  "name": "KoKr",
                  "value": "ko-kr",
                  "description": "Query language value for Korean (Korea)."
                },
                {
                  "name": "RuRu",
                  "value": "ru-ru",
                  "description": "Query language value for Russian (Russia)."
                },
                {
                  "name": "CsCz",
                  "value": "cs-cz",
                  "description": "Query language value for Czech (Czech Republic)."
                },
                {
                  "name": "NlBe",
                  "value": "nl-be",
                  "description": "Query language value for Dutch (Belgium)."
                },
                {
                  "name": "NlNl",
                  "value": "nl-nl",
                  "description": "Query language value for Dutch (Netherlands)."
                },
                {
                  "name": "HuHu",
                  "value": "hu-hu",
                  "description": "Query language value for Hungarian (Hungary)."
                },
                {
                  "name": "PlPl",
                  "value": "pl-pl",
                  "description": "Query language value for Polish (Poland)."
                },
                {
                  "name": "SvSe",
                  "value": "sv-se",
                  "description": "Query language value for Swedish (Sweden)."
                },
                {
                  "name": "TrTr",
                  "value": "tr-tr",
                  "description": "Query language value for Turkish (Turkey)."
                },
                {
                  "name": "HiIn",
                  "value": "hi-in",
                  "description": "Query language value for Hindi (India)."
                },
                {
                  "name": "ArSa",
                  "value": "ar-sa",
                  "description": "Query language value for Arabic (Saudi Arabia)."
                },
                {
                  "name": "ArEg",
                  "value": "ar-eg",
                  "description": "Query language value for Arabic (Egypt)."
                },
                {
                  "name": "ArMa",
                  "value": "ar-ma",
                  "description": "Query language value for Arabic (Morocco)."
                },
                {
                  "name": "ArKw",
                  "value": "ar-kw",
                  "description": "Query language value for Arabic (Kuwait)."
                },
                {
                  "name": "ArJo",
                  "value": "ar-jo",
                  "description": "Query language value for Arabic (Jordan)."
                },
                {
                  "name": "DaDk",
                  "value": "da-dk",
                  "description": "Query language value for Danish (Denmark)."
                },
                {
                  "name": "NoNo",
                  "value": "no-no",
                  "description": "Query language value for Norwegian (Norway)."
                },
                {
                  "name": "BgBg",
                  "value": "bg-bg",
                  "description": "Query language value for Bulgarian (Bulgaria)."
                },
                {
                  "name": "HrHr",
                  "value": "hr-hr",
                  "description": "Query language value for Croatian (Croatia)."
                },
                {
                  "name": "HrBa",
                  "value": "hr-ba",
                  "description": "Query language value for Croatian (Bosnia and Herzegovina)."
                },
                {
                  "name": "MsMy",
                  "value": "ms-my",
                  "description": "Query language value for Malay (Malaysia)."
                },
                {
                  "name": "MsBn",
                  "value": "ms-bn",
                  "description": "Query language value for Malay (Brunei Darussalam)."
                },
                {
                  "name": "SlSl",
                  "value": "sl-sl",
                  "description": "Query language value for Slovenian (Slovenia)."
                },
                {
                  "name": "TaIn",
                  "value": "ta-in",
                  "description": "Query language value for Tamil (India)."
                },
                {
                  "name": "ViVn",
                  "value": "vi-vn",
                  "description": "Query language value for Vietnamese (Viet Nam)."
                },
                {
                  "name": "ElGr",
                  "value": "el-gr",
                  "description": "Query language value for Greek (Greece)."
                },
                {
                  "name": "RoRo",
                  "value": "ro-ro",
                  "description": "Query language value for Romanian (Romania)."
                },
                {
                  "name": "IsIs",
                  "value": "is-is",
                  "description": "Query language value for Icelandic (Iceland)."
                },
                {
                  "name": "IdId",
                  "value": "id-id",
                  "description": "Query language value for Indonesian (Indonesia)."
                },
                {
                  "name": "ThTh",
                  "value": "th-th",
                  "description": "Query language value for Thai (Thailand)."
                },
                {
                  "name": "LtLt",
                  "value": "lt-lt",
                  "description": "Query language value for Lithuanian (Lithuania)."
                },
                {
                  "name": "UkUa",
                  "value": "uk-ua",
                  "description": "Query language value for Ukrainian (Ukraine)."
                },
                {
                  "name": "LvLv",
                  "value": "lv-lv",
                  "description": "Query language value for Latvian (Latvia)."
                },
                {
                  "name": "EtEe",
                  "value": "et-ee",
                  "description": "Query language value for Estonian (Estonia)."
                },
                {
                  "name": "CaEs",
                  "value": "ca-es",
                  "description": "Query language value for Catalan (Spain)."
                },
                {
                  "name": "FiFi",
                  "value": "fi-fi",
                  "description": "Query language value for Finnish (Finland)."
                },
                {
                  "name": "SrBa",
                  "value": "sr-ba",
                  "description": "Query language value for Serbian (Bosnia and Herzegovina)."
                },
                {
                  "name": "SrMe",
                  "value": "sr-me",
                  "description": "Query language value for Serbian (Montenegro)."
                },
                {
                  "name": "SrRs",
                  "value": "sr-rs",
                  "description": "Query language value for Serbian (Serbia)."
                },
                {
                  "name": "SkSk",
                  "value": "sk-sk",
                  "description": "Query language value for Slovak (Slovakia)."
                },
                {
                  "name": "NbNo",
                  "value": "nb-no",
                  "description": "Query language value for Norwegian (Norway)."
                },
                {
                  "name": "HyAm",
                  "value": "hy-am",
                  "description": "Query language value for Armenian (Armenia)."
                },
                {
                  "name": "BnIn",
                  "value": "bn-in",
                  "description": "Query language value for Bengali (India)."
                },
                {
                  "name": "EuEs",
                  "value": "eu-es",
                  "description": "Query language value for Basque (Spain)."
                },
                {
                  "name": "GlEs",
                  "value": "gl-es",
                  "description": "Query language value for Galician (Spain)."
                },
                {
                  "name": "GuIn",
                  "value": "gu-in",
                  "description": "Query language value for Gujarati (India)."
                },
                {
                  "name": "HeIl",
                  "value": "he-il",
                  "description": "Query language value for Hebrew (Israel)."
                },
                {
                  "name": "GaIe",
                  "value": "ga-ie",
                  "description": "Query language value for Irish (Ireland)."
                },
                {
                  "name": "KnIn",
                  "value": "kn-in",
                  "description": "Query language value for Kannada (India)."
                },
                {
                  "name": "MlIn",
                  "value": "ml-in",
                  "description": "Query language value for Malayalam (India)."
                },
                {
                  "name": "MrIn",
                  "value": "mr-in",
                  "description": "Query language value for Marathi (India)."
                },
                {
                  "name": "FaAe",
                  "value": "fa-ae",
                  "description": "Query language value for Persian (U.A.E.)."
                },
                {
                  "name": "PaIn",
                  "value": "pa-in",
                  "description": "Query language value for Punjabi (India)."
                },
                {
                  "name": "TeIn",
                  "value": "te-in",
                  "description": "Query language value for Telugu (India)."
                },
                {
                  "name": "UrPk",
                  "value": "ur-pk",
                  "description": "Query language value for Urdu (Pakistan)."
                }
              ]
            }
          },
          {
            "name": "speller",
            "in": "query",
            "description": "Improve search recall by spell-correcting individual search query terms.",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "lexicon"
            ],
            "x-ms-enum": {
              "name": "QuerySpellerType",
              "modelAsString": true,
              "values": [
                {
                  "name": "None",
                  "value": "none",
                  "description": "Speller not enabled."
                },
                {
                  "name": "Lexicon",
                  "value": "lexicon",
                  "description": "Speller corrects individual query terms using a static lexicon for the language specified by the queryLanguage parameter."
                }
              ]
            }
          },
          {
            "name": "answers",
            "in": "query",
            "description": "This parameter is only valid if the query type is 'semantic'. If set, the query returns answers extracted from key passages in the highest ranked documents. The number of answers returned can be configured by appending the pipe character '|' followed by the 'count-<number of answers>' option after the answers parameter value, such as 'extractive|count-3'. Default count is 1.",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "extractive"
            ],
            "x-ms-enum": {
              "name": "QueryAnswerType",
              "modelAsString": true,
              "values": [
                {
                  "name": "None",
                  "value": "none",
                  "description": "Do not return answers for the query."
                },
                {
                  "name": "Extractive",
                  "value": "extractive",
                  "description": "Extracts answer candidates from the contents of the documents returned in response to a query expressed as a question in natural language."
                }
              ]
            }
          },
          {
            "name": "searchMode",
            "in": "query",
            "description": "A value that specifies whether any or all of the search terms must be matched in order to count the document as a match.",
            "required": false,
            "type": "string",
            "enum": [
              "any",
              "all"
            ],
            "x-ms-enum": {
              "name": "SearchMode",
              "modelAsString": false,
              "values": [
                {
                  "name": "Any",
                  "value": "any",
                  "description": "Any of the search terms must be matched in order to count the document as a match."
                },
                {
                  "name": "All",
                  "value": "all",
                  "description": "All of the search terms must be matched in order to count the document as a match."
                }
              ]
            }
          },
          {
            "name": "scoringStatistics",
            "in": "query",
            "description": "A value that specifies whether we want to calculate scoring statistics (such as document frequency) globally for more consistent scoring, or locally, for lower latency.",
            "required": false,
            "type": "string",
            "enum": [
              "local",
              "global"
            ],
            "x-ms-enum": {
              "name": "ScoringStatistics",
              "modelAsString": false,
              "values": [
                {
                  "name": "Local",
                  "value": "local",
                  "description": "The scoring statistics will be calculated locally for lower latency."
                },
                {
                  "name": "Global",
                  "value": "global",
                  "description": "The scoring statistics will be calculated globally for more consistent scoring."
                }
              ]
            }
          },
          {
            "name": "sessionId",
            "in": "query",
            "description": "A value to be used to create a sticky session, which can help to get more consistent results. As long as the same sessionId is used, a best-effort attempt will be made to target the same replica set. Be wary that reusing the same sessionID values repeatedly can interfere with the load balancing of the requests across replicas and adversely affect the performance of the search service. The value used as sessionId cannot start with a '_' character.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "The number of search results to skip. This value cannot be greater than 100,000. If you need to scan documents in sequence, but cannot use $skip due to this limitation, consider using $orderby on a totally-ordered key and $filter with a range query instead.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of search results to retrieve. This can be used in conjunction with $skip to implement client-side paging of search results. If results are truncated due to server-side paging, the response will include a continuation token that can be used to issue another Search request for the next page of results.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "captions",
            "in": "query",
            "description": "This parameter is only valid if the query type is 'semantic'. If set, the query returns captions extracted from key passages in the highest ranked documents. When Captions is set to 'extractive', highlighting is enabled by default, and can be configured by appending the pipe character '|' followed by the 'highlight-<true/false>' option, such as 'extractive|highlight-true'. Defaults to 'None'.",
            "required": false,
            "type": "string",
            "enum": [
              "none",
              "extractive"
            ],
            "x-ms-enum": {
              "name": "QueryCaptionType",
              "modelAsString": true,
              "values": [
                {
                  "name": "None",
                  "value": "none",
                  "description": "Do not return captions for the query."
                },
                {
                  "name": "Extractive",
                  "value": "extractive",
                  "description": "Extracts captions from the matching documents that contain passages relevant to the search query."
                }
              ]
            }
          },
          {
            "name": "semanticFields",
            "in": "query",
            "description": "The list of field names used for semantic search.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/ClientRequestIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SearchDocumentsResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/SearchError"
            }
          }
        }
      }
    },
    "/docs/$count": {
      "get": {
        "operationId": "Documents_GetCount",
        "tags": [
          "Documents"
        ],
        "description": "Queries the number of documents in the index.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/ClientRequestIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/SearchError"
            }
          }
        }
      }
    },
    "/docs/search.autocomplete": {
      "get": {
        "operationId": "Documents_GetAutocomplete",
        "tags": [
          "Documents"
        ],
        "description": "Autocompletes incomplete query terms based on input text and matching terms in the index.",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "The incomplete term which should be auto-completed.",
            "required": true,
            "type": "string"
          },
          {
            "name": "suggesterName",
            "in": "query",
            "description": "The name of the suggester as specified in the suggesters collection that's part of the index definition.",
            "required": true,
            "type": "string"
          },
          {
            "name": "autocompleteMode",
            "in": "query",
            "description": "Specifies the mode for Autocomplete. The default is 'oneTerm'. Use 'twoTerms' to get shingles and 'oneTermWithContext' to use the current context while producing auto-completed terms.",
            "required": false,
            "type": "string",
            "enum": [
              "oneTerm",
              "twoTerms",
              "oneTermWithContext"
            ],
            "x-ms-enum": {
              "name": "AutocompleteMode",
              "modelAsString": false,
              "values": [
                {
                  "name": "OneTerm",
                  "value": "oneTerm",
                  "description": "Only one term is suggested. If the query has two terms, only the last term is completed. For example, if the input is 'washington medic', the suggested terms could include 'medicaid', 'medicare', and 'medicine'."
                },
                {
                  "name": "TwoTerms",
                  "value": "twoTerms",
                  "description": "Matching two-term phrases in the index will be suggested. For example, if the inpu.t is 'medic', the suggested terms could include 'medicare coverage' and 'medical assistant'."
                },
                {
                  "name": "OneTermWithContext",
                  "value": "oneTermWithContext",
                  "description": "Completes the last term in a query with two or more terms, where the last two terms are a phrase that exists in the index. For example, if the input is 'washington medic', the suggested terms could include 'washington medicaid' and 'washington medical'."
                }
              ]
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "An OData expression that filters the documents used to produce completed terms for the Autocomplete result.",
            "required": false,
            "type": "string"
          },
          {
            "name": "fuzzy",
            "in": "query",
            "description": "A value indicating whether to use fuzzy matching for the autocomplete query. Default is false. When set to true, the query will find terms even if there's a substituted or missing character in the search text. While this provides a better experience in some scenarios, it comes at a performance cost as fuzzy autocomplete queries are slower and consume more resources.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "highlightPostTag",
            "in": "query",
            "description": "A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting is disabled.",
            "required": false,
            "type": "string"
          },
          {
            "name": "highlightPreTag",
            "in": "query",
            "description": "A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting is disabled.",
            "required": false,
            "type": "string"
          },
          {
            "name": "minimumCoverage",
            "in": "query",
            "description": "A number between 0 and 100 indicating the percentage of the index that must be covered by an autocomplete query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 80.",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "searchFields",
            "in": "query",
            "description": "The list of field names to consider when querying for auto-completed terms. Target fields must be included in the specified suggester.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of auto-completed terms to retrieve. This must be a value between 1 and 100. The default is 5.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/ClientRequestIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/AutocompleteResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/SearchError"
            }
          }
        }
      }
    },
    "/docs/search.index": {
      "post": {
        "operationId": "Documents_Index",
        "tags": [
          "Documents"
        ],
        "description": "Sends a batch of document write actions to the index.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/ClientRequestIdParameter"
          },
          {
            "name": "batch",
            "in": "body",
            "description": "The batch of index actions.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IndexBatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/IndexDocumentsResult"
            }
          },
          "207": {
            "description": "Successful",
            "schema": {
              "$ref": "#/definitions/IndexDocumentsResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/SearchError"
            }
          }
        }
      }
    },
    "/docs/search.post.autocomplete": {
      "post": {
        "operationId": "Documents_AutocompletePost",
        "tags": [
          "Documents"
        ],
        "description": "Autocompletes incomplete query terms based on input text and matching terms in the index.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/ClientRequestIdParameter"
          },
          {
            "name": "autocompleteRequest",
            "in": "body",
            "description": "The definition of the Autocomplete request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AutocompleteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/AutocompleteResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/SearchError"
            }
          }
        }
      }
    },
    "/docs/search.post.search": {
      "post": {
        "operationId": "Documents_SearchPost",
        "tags": [
          "Documents"
        ],
        "description": "Autocompletes incomplete query terms based on input text and matching terms in the index.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/ClientRequestIdParameter"
          },
          {
            "name": "searchRequest",
            "in": "body",
            "description": "The definition of the Search request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SearchDocumentsResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/SearchError"
            }
          }
        }
      }
    },
    "/docs/search.post.suggest": {
      "post": {
        "operationId": "Documents_SuggestPost",
        "tags": [
          "Documents"
        ],
        "description": "Search post suggest.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/ClientRequestIdParameter"
          },
          {
            "name": "suggestRequest",
            "in": "body",
            "description": "The Suggest request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SuggestRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SuggestDocumentsResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/SearchError"
            }
          }
        }
      }
    },
    "/docs/search.suggest": {
      "get": {
        "operationId": "Documents_GetSuggestion",
        "tags": [
          "Documents"
        ],
        "description": "Suggests documents in the index that match the given partial query text.",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "The search text to use to suggest documents. Must be at least 1 character, and no more than 100 characters.",
            "required": true,
            "type": "string",
            "x-ms-client-name": "searchText"
          },
          {
            "name": "suggesterName",
            "in": "query",
            "description": "The name of the suggester as specified in the suggesters collection that's part of the index definition.",
            "required": true,
            "type": "string"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "An OData expression that filters the documents considered for suggestions.",
            "required": false,
            "type": "string"
          },
          {
            "name": "fuzzy",
            "in": "query",
            "description": "A value indicating whether to use fuzzy matching for the suggestions query. Default is false. When set to true, the query will find terms even if there's a substituted or missing character in the search text. While this provides a better experience in some scenarios, it comes at a performance cost as fuzzy suggestions queries are slower and consume more resources.",
            "required": false,
            "type": "boolean",
            "x-ms-client-name": "useFuzzyMatching"
          },
          {
            "name": "highlightPostTag",
            "in": "query",
            "description": "A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting of suggestions is disabled.",
            "required": false,
            "type": "string"
          },
          {
            "name": "highlightPreTag",
            "in": "query",
            "description": "A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting of suggestions is disabled.",
            "required": false,
            "type": "string"
          },
          {
            "name": "minimumCoverage",
            "in": "query",
            "description": "A number between 0 and 100 indicating the percentage of the index that must be covered by a suggestions query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 80.",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "The list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to indicate ascending, or desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no $orderby is specified, the default sort order is descending by document match score. There can be at most 32 $orderby clauses.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "x-ms-client-name": "orderBy"
          },
          {
            "name": "searchFields",
            "in": "query",
            "description": "The list of field names to search for the specified search text. Target fields must be included in the specified suggester.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "The list of fields to retrieve. If unspecified, only the key field will be included in the results.",
            "required": false,
            "type": "string"
          },
          {
            "name": "$top",
            "in": "query",
            "description": "The number of suggestions to retrieve. The value must be a number between 1 and 100. The default is 5.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/ClientRequestIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SuggestDocumentsResult"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/SearchError"
            }
          }
        }
      }
    },
    "/docs('{key}')": {
      "get": {
        "operationId": "DocumentsByKey_Get",
        "tags": [
          "Documents"
        ],
        "description": "Retrieves a document from the index.",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The key",
            "required": true,
            "type": "string"
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selected fields",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "x-ms-client-name": "selectedFields"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/ClientRequestIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "object"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/SearchError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AnswerResult": {
      "type": "object",
      "description": "An answer is a text passage extracted from the contents of the most relevant documents that matched the query. Answers are extracted from the top search results. Answer candidates are scored and the top answers are selected.",
      "properties": {
        "score": {
          "type": "number",
          "format": "double",
          "description": "The score value represents how relevant the answer is to the the query relative to other answers returned for the query.",
          "readOnly": true
        },
        "key": {
          "type": "string",
          "description": "The key of the document the answer was extracted from.",
          "readOnly": true
        },
        "text": {
          "type": "string",
          "description": "The text passage extracted from the document contents as the answer.",
          "readOnly": true
        },
        "highlights": {
          "type": "string",
          "description": "Same text passage as in the Text property with highlighted text phrases most relevant to the query.",
          "x-nullable": true,
          "readOnly": true
        }
      }
    },
    "AutocompleteItem": {
      "type": "object",
      "description": "The result of Autocomplete requests.",
      "properties": {
        "text": {
          "type": "string",
          "description": "The completed term.",
          "readOnly": true
        },
        "queryPlusText": {
          "type": "string",
          "description": "The query along with the completed term.",
          "readOnly": true
        }
      },
      "required": [
        "text",
        "queryPlusText"
      ]
    },
    "AutocompleteMode": {
      "type": "string",
      "description": "Specifies the mode for Autocomplete. The default is 'oneTerm'. Use 'twoTerms' to get shingles and 'oneTermWithContext' to use the current context in producing autocomplete terms.",
      "enum": [
        "oneTerm",
        "twoTerms",
        "oneTermWithContext"
      ],
      "x-ms-enum": {
        "name": "AutocompleteMode",
        "modelAsString": false,
        "values": [
          {
            "name": "OneTerm",
            "value": "oneTerm",
            "description": "Only one term is suggested. If the query has two terms, only the last term is completed. For example, if the input is 'washington medic', the suggested terms could include 'medicaid', 'medicare', and 'medicine'."
          },
          {
            "name": "TwoTerms",
            "value": "twoTerms",
            "description": "Matching two-term phrases in the index will be suggested. For example, if the inpu.t is 'medic', the suggested terms could include 'medicare coverage' and 'medical assistant'."
          },
          {
            "name": "OneTermWithContext",
            "value": "oneTermWithContext",
            "description": "Completes the last term in a query with two or more terms, where the last two terms are a phrase that exists in the index. For example, if the input is 'washington medic', the suggested terms could include 'washington medicaid' and 'washington medical'."
          }
        ]
      }
    },
    "AutocompleteRequest": {
      "type": "object",
      "description": "Parameters for fuzzy matching, and other autocomplete query behaviors.",
      "properties": {
        "search": {
          "type": "string",
          "description": "The search text on which to base autocomplete results.",
          "x-ms-client-name": "searchText"
        },
        "autocompleteMode": {
          "$ref": "#/definitions/AutocompleteMode",
          "description": "Specifies the mode for Autocomplete. The default is 'oneTerm'. Use 'twoTerms' to get shingles and 'oneTermWithContext' to use the current context while producing auto-completed terms."
        },
        "filter": {
          "type": "string",
          "description": "An OData expression that filters the documents used to produce completed terms for the Autocomplete result."
        },
        "fuzzy": {
          "type": "boolean",
          "description": "A value indicating whether to use fuzzy matching for the autocomplete query. Default is false. When set to true, the query will autocomplete terms even if there's a substituted or missing character in the search text. While this provides a better experience in some scenarios, it comes at a performance cost as fuzzy autocomplete queries are slower and consume more resources.",
          "x-ms-client-name": "useFuzzyMatching"
        },
        "highlightPostTag": {
          "type": "string",
          "description": "A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting is disabled."
        },
        "highlightPreTag": {
          "type": "string",
          "description": "A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting is disabled."
        },
        "minimumCoverage": {
          "type": "number",
          "format": "double",
          "description": "A number between 0 and 100 indicating the percentage of the index that must be covered by an autocomplete query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 80."
        },
        "searchFields": {
          "type": "string",
          "description": "The comma-separated list of field names to consider when querying for auto-completed terms. Target fields must be included in the specified suggester."
        },
        "suggesterName": {
          "type": "string",
          "description": "The name of the suggester as specified in the suggesters collection that's part of the index definition."
        },
        "top": {
          "type": "integer",
          "format": "int32",
          "description": "The number of auto-completed terms to retrieve. This must be a value between 1 and 100. The default is 5."
        }
      },
      "required": [
        "search",
        "suggesterName"
      ]
    },
    "AutocompleteResult": {
      "type": "object",
      "description": "The result of Autocomplete query.",
      "properties": {
        "@search.coverage": {
          "type": "number",
          "format": "double",
          "description": "A value indicating the percentage of the index that was considered by the autocomplete request, or null if minimumCoverage was not specified in the request.",
          "readOnly": true,
          "x-ms-client-name": "coverage"
        },
        "value": {
          "type": "array",
          "description": "The list of returned Autocompleted items.",
          "items": {
            "$ref": "#/definitions/AutocompleteItem"
          },
          "readOnly": true,
          "x-ms-client-name": "results",
          "x-ms-identifiers": []
        }
      },
      "required": [
        "value"
      ]
    },
    "CaptionResult": {
      "type": "object",
      "description": "Captions are the most representative passages from the document relatively to the search query. They are often used as document summary. Captions are only returned for queries of type 'semantic'..",
      "properties": {
        "highlights": {
          "type": "string",
          "description": "Same text passage as in the Text property with highlighted phrases most relevant to the query.",
          "x-nullable": true,
          "readOnly": true
        },
        "text": {
          "type": "string",
          "description": "A representative text passage extracted from the document most relevant to the search query.",
          "readOnly": true
        }
      }
    },
    "FacetResult": {
      "type": "object",
      "description": "A single bucket of a facet query result. Reports the number of documents with a field value falling within a particular range or having a particular value or interval.",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "The approximate count of documents falling within the bucket described by this facet.",
          "readOnly": true
        }
      }
    },
    "IndexAction": {
      "type": "object",
      "description": "Represents an index action that operates on a document.",
      "properties": {
        "@search.action": {
          "$ref": "#/definitions/IndexActionType",
          "description": "The operation to perform on a document in an indexing batch.",
          "x-ms-client-name": "actiontype"
        }
      }
    },
    "IndexActionType": {
      "type": "string",
      "description": "Index action type",
      "enum": [
        "upload",
        "merge",
        "mergeOrUpload",
        "delete"
      ],
      "x-ms-enum": {
        "name": "IndexActionType",
        "modelAsString": false,
        "values": [
          {
            "name": "Upload",
            "value": "upload",
            "description": "Inserts the document into the index if it is new and updates it if it exists. All fields are replaced in the update case."
          },
          {
            "name": "Merge",
            "value": "merge",
            "description": "Merges the specified field values with an existing document. If the document does not exist, the merge will fail. Any field you specify in a merge will replace the existing field in the document. This also applies to collections of primitive and complex types."
          },
          {
            "name": "MergeOrUpload",
            "value": "mergeOrUpload",
            "description": "Behaves like merge if a document with the given key already exists in the index. If the document does not exist, it behaves like upload with a new document."
          },
          {
            "name": "Delete",
            "value": "delete",
            "description": "Removes the specified document from the index. Any field you specify in a delete operation other than the key field will be ignored. If you want to remove an individual field from a document, use merge instead and set the field explicitly to null."
          }
        ]
      }
    },
    "IndexBatch": {
      "type": "object",
      "description": "Contains a batch of document write actions to send to the index.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The actions in the batch.",
          "items": {
            "$ref": "#/definitions/IndexAction"
          },
          "x-ms-client-name": "actions",
          "x-ms-identifiers": []
        }
      },
      "required": [
        "value"
      ]
    },
    "IndexDocumentsResult": {
      "type": "object",
      "description": "Response containing the status of operations for all documents in the indexing request.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The list of status information for each document in the indexing request.",
          "items": {
            "$ref": "#/definitions/IndexingResult"
          },
          "readOnly": true,
          "x-ms-client-name": "results",
          "x-ms-identifiers": []
        }
      },
      "required": [
        "value"
      ]
    },
    "IndexingResult": {
      "type": "object",
      "description": "Status of an indexing operation for a single document.",
      "properties": {
        "key": {
          "type": "string",
          "description": "The key of a document that was in the indexing request.",
          "readOnly": true
        },
        "errorMessage": {
          "type": "string",
          "description": "The error message explaining why the indexing operation failed for the document identified by the key; null if indexing succeeded.",
          "readOnly": true
        },
        "status": {
          "type": "boolean",
          "description": "A value indicating whether the indexing operation succeeded for the document identified by the key.",
          "readOnly": true,
          "x-ms-client-name": "succeeded"
        },
        "statusCode": {
          "type": "integer",
          "format": "int32",
          "description": "The status code of the indexing operation. Possible values include: 200 for a successful update or delete, 201 for successful document creation, 400 for a malformed input document, 404 for document not found, 409 for a version conflict, 422 when the index is temporarily unavailable, or 503 for when the service is too busy.",
          "readOnly": true
        }
      },
      "required": [
        "key",
        "status",
        "statusCode"
      ]
    },
    "QueryAnswerType": {
      "type": "string",
      "description": "This parameter is only valid if the query type is 'semantic'. If set, the query returns answers extracted from key passages in the highest ranked documents. The number of answers returned can be configured by appending the pipe character '|' followed by the 'count-<number of answers>' option after the answers parameter value, such as 'extractive|count-3'. Default count is 1.",
      "enum": [
        "none",
        "extractive"
      ],
      "x-ms-enum": {
        "name": "QueryAnswerType",
        "modelAsString": true,
        "values": [
          {
            "name": "None",
            "value": "none",
            "description": "Do not return answers for the query."
          },
          {
            "name": "Extractive",
            "value": "extractive",
            "description": "Extracts answer candidates from the contents of the documents returned in response to a query expressed as a question in natural language."
          }
        ]
      }
    },
    "QueryCaptionType": {
      "type": "string",
      "description": "This parameter is only valid if the query type is 'semantic'. If set, the query returns captions extracted from key passages in the highest ranked documents. When s is set to 'extractive', highlighting is enabled by default, and can be configured by appending the pipe character '|' followed by the 'highlight-<true/false>' option, such as 'extractive|highlight-true'. Defaults to 'None'.",
      "enum": [
        "none",
        "extractive"
      ],
      "x-ms-enum": {
        "name": "QueryCaptionType",
        "modelAsString": true,
        "values": [
          {
            "name": "None",
            "value": "none",
            "description": "Do not return captions for the query."
          },
          {
            "name": "Extractive",
            "value": "extractive",
            "description": "Extracts captions from the matching documents that contain passages relevant to the search query."
          }
        ]
      }
    },
    "QueryLanguage": {
      "type": "string",
      "description": "The language of the query.",
      "enum": [
        "none",
        "en-us",
        "en-gb",
        "en-in",
        "en-ca",
        "en-au",
        "fr-fr",
        "fr-ca",
        "de-de",
        "es-es",
        "es-mx",
        "zh-cn",
        "zh-tw",
        "pt-br",
        "pt-pt",
        "it-it",
        "ja-jp",
        "ko-kr",
        "ru-ru",
        "cs-cz",
        "nl-be",
        "nl-nl",
        "hu-hu",
        "pl-pl",
        "sv-se",
        "tr-tr",
        "hi-in",
        "ar-sa",
        "ar-eg",
        "ar-ma",
        "ar-kw",
        "ar-jo",
        "da-dk",
        "no-no",
        "bg-bg",
        "hr-hr",
        "hr-ba",
        "ms-my",
        "ms-bn",
        "sl-sl",
        "ta-in",
        "vi-vn",
        "el-gr",
        "ro-ro",
        "is-is",
        "id-id",
        "th-th",
        "lt-lt",
        "uk-ua",
        "lv-lv",
        "et-ee",
        "ca-es",
        "fi-fi",
        "sr-ba",
        "sr-me",
        "sr-rs",
        "sk-sk",
        "nb-no",
        "hy-am",
        "bn-in",
        "eu-es",
        "gl-es",
        "gu-in",
        "he-il",
        "ga-ie",
        "kn-in",
        "ml-in",
        "mr-in",
        "fa-ae",
        "pa-in",
        "te-in",
        "ur-pk"
      ],
      "x-ms-enum": {
        "name": "QueryLanguage",
        "modelAsString": true,
        "values": [
          {
            "name": "None",
            "value": "none",
            "description": "Query language not specified."
          },
          {
            "name": "EnUs",
            "value": "en-us",
            "description": "Query language value for English (United States)."
          },
          {
            "name": "EnGb",
            "value": "en-gb",
            "description": "Query language value for English (Great Britain)."
          },
          {
            "name": "EnIn",
            "value": "en-in",
            "description": "Query language value for English (India)."
          },
          {
            "name": "EnCa",
            "value": "en-ca",
            "description": "Query language value for English (Canada)."
          },
          {
            "name": "EnAu",
            "value": "en-au",
            "description": "Query language value for English (Australia)."
          },
          {
            "name": "FrFr",
            "value": "fr-fr",
            "description": "Query language value for French (France)."
          },
          {
            "name": "FrCa",
            "value": "fr-ca",
            "description": "Query language value for French (Canada)."
          },
          {
            "name": "DeDe",
            "value": "de-de",
            "description": "Query language value for German (Germany)."
          },
          {
            "name": "EsEs",
            "value": "es-es",
            "description": "Query language value for Spanish (Spain)."
          },
          {
            "name": "EsMx",
            "value": "es-mx",
            "description": "Query language value for Spanish (Mexico)."
          },
          {
            "name": "ZhCn",
            "value": "zh-cn",
            "description": "Query language value for Chinese (China)."
          },
          {
            "name": "ZhTw",
            "value": "zh-tw",
            "description": "Query language value for Chinese (Taiwan)."
          },
          {
            "name": "PtBr",
            "value": "pt-br",
            "description": "Query language value for Portuguese (Brazil)."
          },
          {
            "name": "PtPt",
            "value": "pt-pt",
            "description": "Query language value for Portuguese (Portugal)."
          },
          {
            "name": "ItIt",
            "value": "it-it",
            "description": "Query language value for Italian (Italy)."
          },
          {
            "name": "JaJp",
            "value": "ja-jp",
            "description": "Query language value for Japanese (Japan)."
          },
          {
            "name": "KoKr",
            "value": "ko-kr",
            "description": "Query language value for Korean (Korea)."
          },
          {
            "name": "RuRu",
            "value": "ru-ru",
            "description": "Query language value for Russian (Russia)."
          },
          {
            "name": "CsCz",
            "value": "cs-cz",
            "description": "Query language value for Czech (Czech Republic)."
          },
          {
            "name": "NlBe",
            "value": "nl-be",
            "description": "Query language value for Dutch (Belgium)."
          },
          {
            "name": "NlNl",
            "value": "nl-nl",
            "description": "Query language value for Dutch (Netherlands)."
          },
          {
            "name": "HuHu",
            "value": "hu-hu",
            "description": "Query language value for Hungarian (Hungary)."
          },
          {
            "name": "PlPl",
            "value": "pl-pl",
            "description": "Query language value for Polish (Poland)."
          },
          {
            "name": "SvSe",
            "value": "sv-se",
            "description": "Query language value for Swedish (Sweden)."
          },
          {
            "name": "TrTr",
            "value": "tr-tr",
            "description": "Query language value for Turkish (Turkey)."
          },
          {
            "name": "HiIn",
            "value": "hi-in",
            "description": "Query language value for Hindi (India)."
          },
          {
            "name": "ArSa",
            "value": "ar-sa",
            "description": "Query language value for Arabic (Saudi Arabia)."
          },
          {
            "name": "ArEg",
            "value": "ar-eg",
            "description": "Query language value for Arabic (Egypt)."
          },
          {
            "name": "ArMa",
            "value": "ar-ma",
            "description": "Query language value for Arabic (Morocco)."
          },
          {
            "name": "ArKw",
            "value": "ar-kw",
            "description": "Query language value for Arabic (Kuwait)."
          },
          {
            "name": "ArJo",
            "value": "ar-jo",
            "description": "Query language value for Arabic (Jordan)."
          },
          {
            "name": "DaDk",
            "value": "da-dk",
            "description": "Query language value for Danish (Denmark)."
          },
          {
            "name": "NoNo",
            "value": "no-no",
            "description": "Query language value for Norwegian (Norway)."
          },
          {
            "name": "BgBg",
            "value": "bg-bg",
            "description": "Query language value for Bulgarian (Bulgaria)."
          },
          {
            "name": "HrHr",
            "value": "hr-hr",
            "description": "Query language value for Croatian (Croatia)."
          },
          {
            "name": "HrBa",
            "value": "hr-ba",
            "description": "Query language value for Croatian (Bosnia and Herzegovina)."
          },
          {
            "name": "MsMy",
            "value": "ms-my",
            "description": "Query language value for Malay (Malaysia)."
          },
          {
            "name": "MsBn",
            "value": "ms-bn",
            "description": "Query language value for Malay (Brunei Darussalam)."
          },
          {
            "name": "SlSl",
            "value": "sl-sl",
            "description": "Query language value for Slovenian (Slovenia)."
          },
          {
            "name": "TaIn",
            "value": "ta-in",
            "description": "Query language value for Tamil (India)."
          },
          {
            "name": "ViVn",
            "value": "vi-vn",
            "description": "Query language value for Vietnamese (Viet Nam)."
          },
          {
            "name": "ElGr",
            "value": "el-gr",
            "description": "Query language value for Greek (Greece)."
          },
          {
            "name": "RoRo",
            "value": "ro-ro",
            "description": "Query language value for Romanian (Romania)."
          },
          {
            "name": "IsIs",
            "value": "is-is",
            "description": "Query language value for Icelandic (Iceland)."
          },
          {
            "name": "IdId",
            "value": "id-id",
            "description": "Query language value for Indonesian (Indonesia)."
          },
          {
            "name": "ThTh",
            "value": "th-th",
            "description": "Query language value for Thai (Thailand)."
          },
          {
            "name": "LtLt",
            "value": "lt-lt",
            "description": "Query language value for Lithuanian (Lithuania)."
          },
          {
            "name": "UkUa",
            "value": "uk-ua",
            "description": "Query language value for Ukrainian (Ukraine)."
          },
          {
            "name": "LvLv",
            "value": "lv-lv",
            "description": "Query language value for Latvian (Latvia)."
          },
          {
            "name": "EtEe",
            "value": "et-ee",
            "description": "Query language value for Estonian (Estonia)."
          },
          {
            "name": "CaEs",
            "value": "ca-es",
            "description": "Query language value for Catalan (Spain)."
          },
          {
            "name": "FiFi",
            "value": "fi-fi",
            "description": "Query language value for Finnish (Finland)."
          },
          {
            "name": "SrBa",
            "value": "sr-ba",
            "description": "Query language value for Serbian (Bosnia and Herzegovina)."
          },
          {
            "name": "SrMe",
            "value": "sr-me",
            "description": "Query language value for Serbian (Montenegro)."
          },
          {
            "name": "SrRs",
            "value": "sr-rs",
            "description": "Query language value for Serbian (Serbia)."
          },
          {
            "name": "SkSk",
            "value": "sk-sk",
            "description": "Query language value for Slovak (Slovakia)."
          },
          {
            "name": "NbNo",
            "value": "nb-no",
            "description": "Query language value for Norwegian (Norway)."
          },
          {
            "name": "HyAm",
            "value": "hy-am",
            "description": "Query language value for Armenian (Armenia)."
          },
          {
            "name": "BnIn",
            "value": "bn-in",
            "description": "Query language value for Bengali (India)."
          },
          {
            "name": "EuEs",
            "value": "eu-es",
            "description": "Query language value for Basque (Spain)."
          },
          {
            "name": "GlEs",
            "value": "gl-es",
            "description": "Query language value for Galician (Spain)."
          },
          {
            "name": "GuIn",
            "value": "gu-in",
            "description": "Query language value for Gujarati (India)."
          },
          {
            "name": "HeIl",
            "value": "he-il",
            "description": "Query language value for Hebrew (Israel)."
          },
          {
            "name": "GaIe",
            "value": "ga-ie",
            "description": "Query language value for Irish (Ireland)."
          },
          {
            "name": "KnIn",
            "value": "kn-in",
            "description": "Query language value for Kannada (India)."
          },
          {
            "name": "MlIn",
            "value": "ml-in",
            "description": "Query language value for Malayalam (India)."
          },
          {
            "name": "MrIn",
            "value": "mr-in",
            "description": "Query language value for Marathi (India)."
          },
          {
            "name": "FaAe",
            "value": "fa-ae",
            "description": "Query language value for Persian (U.A.E.)."
          },
          {
            "name": "PaIn",
            "value": "pa-in",
            "description": "Query language value for Punjabi (India)."
          },
          {
            "name": "TeIn",
            "value": "te-in",
            "description": "Query language value for Telugu (India)."
          },
          {
            "name": "UrPk",
            "value": "ur-pk",
            "description": "Query language value for Urdu (Pakistan)."
          }
        ]
      }
    },
    "QuerySpellerType": {
      "type": "string",
      "description": "Improve search recall by spell-correcting individual search query terms.",
      "enum": [
        "none",
        "lexicon"
      ],
      "x-ms-enum": {
        "name": "QuerySpellerType",
        "modelAsString": true,
        "values": [
          {
            "name": "None",
            "value": "none",
            "description": "Speller not enabled."
          },
          {
            "name": "Lexicon",
            "value": "lexicon",
            "description": "Speller corrects individual query terms using a static lexicon for the language specified by the queryLanguage parameter."
          }
        ]
      }
    },
    "QueryType": {
      "type": "string",
      "description": "Specifies the syntax of the search query. The default is 'simple'. Use 'full' if your query uses the Lucene query syntax and 'semantic' if query syntax is not needed.",
      "enum": [
        "simple",
        "full",
        "semantic"
      ],
      "x-ms-enum": {
        "name": "QueryType",
        "modelAsString": false,
        "values": [
          {
            "name": "Simple",
            "value": "simple",
            "description": "Uses the simple query syntax for searches. Search text is interpreted using a simple query language that allows for symbols such as +, * and \"\". Queries are evaluated across all searchable fields by default, unless the searchFields parameter is specified."
          },
          {
            "name": "Full",
            "value": "full",
            "description": "Uses the full Lucene query syntax for searches. Search text is interpreted using the Lucene query language which allows field-specific and weighted searches, as well as other advanced features."
          },
          {
            "name": "Semantic",
            "value": "semantic",
            "description": "Best suited for queries expressed in natural language as opposed to keywords. Improves precision of search results by re-ranking the top search results using a ranking model trained on the Web corpus."
          }
        ]
      }
    },
    "ScoringStatistics": {
      "type": "string",
      "description": "A value that specifies whether we want to calculate scoring statistics (such as document frequency) globally for more consistent scoring, or locally, for lower latency. The default is 'local'. Use 'global' to aggregate scoring statistics globally before scoring. Using global scoring statistics can increase latency of search queries.",
      "enum": [
        "local",
        "global"
      ],
      "x-ms-enum": {
        "name": "ScoringStatistics",
        "modelAsString": false,
        "values": [
          {
            "name": "Local",
            "value": "local",
            "description": "The scoring statistics will be calculated locally for lower latency."
          },
          {
            "name": "Global",
            "value": "global",
            "description": "The scoring statistics will be calculated globally for more consistent scoring."
          }
        ]
      }
    },
    "SearchDocumentsResult": {
      "type": "object",
      "description": "Response containing search results from an index.",
      "properties": {
        "@odata.count": {
          "type": "integer",
          "format": "int64",
          "description": "The total count of results found by the search operation, or null if the count was not requested. If present, the count may be greater than the number of results in this response. This can happen if you use the $top or $skip parameters, or if Azure Cognitive Search can't return all the requested documents in a single Search response.",
          "readOnly": true,
          "x-ms-client-name": "count"
        },
        "@odata.nextLink": {
          "type": "string",
          "description": "Continuation URL returned when Azure Cognitive Search can't return all the requested results in a single Search response. You can use this URL to formulate another GET or POST Search request to get the next part of the search response. Make sure to use the same verb (GET or POST) as the request that produced this response.",
          "readOnly": true,
          "x-ms-client-name": "nextLink"
        },
        "@search.coverage": {
          "type": "number",
          "format": "double",
          "description": "A value indicating the percentage of the index that was included in the query, or null if minimumCoverage was not specified in the request.",
          "readOnly": true
        },
        "@search.facets": {
          "type": "object",
          "description": "The facet query results for the search operation, organized as a collection of buckets for each faceted field; null if the query did not include any facet expressions.",
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/FacetResult"
            },
            "type": "array",
            "x-ms-identifiers": []
          },
          "readOnly": true,
          "x-ms-client-name": "facets"
        },
        "@search.answers": {
          "type": "array",
          "description": "The answers query results for the search operation; null if the answers query parameter was not specified or set to 'none'.",
          "items": {
            "$ref": "#/definitions/AnswerResult"
          },
          "readOnly": true,
          "x-ms-client-name": "answers",
          "x-ms-identifiers": []
        },
        "@search.nextPageParameters": {
          "$ref": "#/definitions/SearchRequest",
          "description": "Continuation JSON payload returned when Azure Cognitive Search can't return all the requested results in a single Search response. You can use this JSON along with @odata.nextLink to formulate another POST Search request to get the next part of the search response.",
          "readOnly": true,
          "x-ms-client-name": "nextPageParameters"
        },
        "value": {
          "type": "array",
          "description": "The sequence of results returned by the query.",
          "items": {
            "$ref": "#/definitions/SearchResult"
          },
          "readOnly": true,
          "x-ms-client-name": "results",
          "x-ms-identifiers": []
        }
      },
      "required": [
        "value"
      ]
    },
    "SearchError": {
      "type": "object",
      "description": "Describes an error condition for the Azure Cognitive Search API.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes.",
          "readOnly": true
        },
        "message": {
          "type": "string",
          "description": "A human-readable representation of the error.",
          "readOnly": true
        },
        "details": {
          "type": "array",
          "description": "An array of details about specific errors that led to this reported error.",
          "items": {
            "$ref": "#/definitions/SearchError"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        }
      },
      "required": [
        "message"
      ]
    },
    "SearchMode": {
      "type": "string",
      "description": "Specifies whether any or all of the search terms must be matched in order to count the document as a match.",
      "enum": [
        "any",
        "all"
      ],
      "x-ms-enum": {
        "name": "SearchMode",
        "modelAsString": false,
        "values": [
          {
            "name": "Any",
            "value": "any",
            "description": "Any of the search terms must be matched in order to count the document as a match."
          },
          {
            "name": "All",
            "value": "all",
            "description": "All of the search terms must be matched in order to count the document as a match."
          }
        ]
      }
    },
    "SearchRequest": {
      "type": "object",
      "description": "Parameters for filtering, sorting, faceting, paging, and other search query behaviors.",
      "properties": {
        "count": {
          "type": "boolean",
          "description": "A value that specifies whether to fetch the total count of results. Default is false. Setting this value to true may have a performance impact. Note that the count returned is an approximation.",
          "x-ms-client-name": "includeTotalResultCount"
        },
        "facets": {
          "type": "array",
          "description": "The list of facet expressions to apply to the search query. Each facet expression contains a field name, optionally followed by a comma-separated list of name:value pairs.",
          "items": {
            "type": "string"
          }
        },
        "filter": {
          "type": "string",
          "description": "The OData $filter expression to apply to the search query."
        },
        "highlight": {
          "type": "string",
          "description": "The comma-separated list of field names to use for hit highlights. Only searchable fields can be used for hit highlighting.",
          "x-ms-client-name": "highlightFields"
        },
        "highlightPostTag": {
          "type": "string",
          "description": "A string tag that is appended to hit highlights. Must be set with highlightPreTag. Default is &lt;/em&gt;."
        },
        "highlightPreTag": {
          "type": "string",
          "description": "A string tag that is prepended to hit highlights. Must be set with highlightPostTag. Default is &lt;em&gt;."
        },
        "minimumCoverage": {
          "type": "number",
          "format": "double",
          "description": "A number between 0 and 100 indicating the percentage of the index that must be covered by a search query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 100."
        },
        "orderby": {
          "type": "string",
          "description": "The comma-separated list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to indicate ascending, or desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no $orderby is specified, the default sort order is descending by document match score. There can be at most 32 $orderby clauses.",
          "x-ms-client-name": "orderBy"
        },
        "queryType": {
          "$ref": "#/definitions/QueryType",
          "description": "A value that specifies the syntax of the search query. The default is 'simple'. Use 'full' if your query uses the Lucene query syntax."
        },
        "scoringStatistics": {
          "$ref": "#/definitions/ScoringStatistics",
          "description": "A value that specifies whether we want to calculate scoring statistics (such as document frequency) globally for more consistent scoring, or locally, for lower latency. The default is 'local'. Use 'global' to aggregate scoring statistics globally before scoring. Using global scoring statistics can increase latency of search queries."
        },
        "sessionId": {
          "type": "string",
          "description": "A value to be used to create a sticky session, which can help getting more consistent results. As long as the same sessionId is used, a best-effort attempt will be made to target the same replica set. Be wary that reusing the same sessionID values repeatedly can interfere with the load balancing of the requests across replicas and adversely affect the performance of the search service. The value used as sessionId cannot start with a '_' character."
        },
        "scoringParameters": {
          "type": "array",
          "description": "The list of parameter values to be used in scoring functions (for example, referencePointParameter) using the format name-values. For example, if the scoring profile defines a function with a parameter called 'mylocation' the parameter string would be \"mylocation--122.2,44.8\" (without the quotes).",
          "items": {
            "type": "string"
          }
        },
        "scoringProfile": {
          "type": "string",
          "description": "The name of a scoring profile to evaluate match scores for matching documents in order to sort the results."
        },
        "semanticConfiguration": {
          "type": "string",
          "description": "The name of a semantic configuration that will be used when processing documents for queries of type semantic."
        },
        "search": {
          "type": "string",
          "description": "A full-text search query expression; Use \"*\" or omit this parameter to match all documents.",
          "x-ms-client-name": "searchText"
        },
        "searchFields": {
          "type": "string",
          "description": "The comma-separated list of field names to which to scope the full-text search. When using fielded search (fieldName:searchExpression) in a full Lucene query, the field names of each fielded search expression take precedence over any field names listed in this parameter."
        },
        "searchMode": {
          "$ref": "#/definitions/SearchMode",
          "description": "A value that specifies whether any or all of the search terms must be matched in order to count the document as a match."
        },
        "queryLanguage": {
          "$ref": "#/definitions/QueryLanguage",
          "description": "A value that specifies the language of the search query."
        },
        "speller": {
          "$ref": "#/definitions/QuerySpellerType",
          "description": "A value that specified the type of the speller to use to spell-correct individual search query terms."
        },
        "answers": {
          "$ref": "#/definitions/QueryAnswerType",
          "description": "A value that specifies whether answers should be returned as part of the search response."
        },
        "select": {
          "type": "string",
          "description": "The comma-separated list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included."
        },
        "skip": {
          "type": "integer",
          "format": "int32",
          "description": "The number of search results to skip. This value cannot be greater than 100,000. If you need to scan documents in sequence, but cannot use skip due to this limitation, consider using orderby on a totally-ordered key and filter with a range query instead."
        },
        "top": {
          "type": "integer",
          "format": "int32",
          "description": "The number of search results to retrieve. This can be used in conjunction with $skip to implement client-side paging of search results. If results are truncated due to server-side paging, the response will include a continuation token that can be used to issue another Search request for the next page of results."
        },
        "captions": {
          "$ref": "#/definitions/QueryCaptionType",
          "description": "A value that specifies whether captions should be returned as part of the search response."
        },
        "semanticFields": {
          "type": "string",
          "description": "The comma-separated list of field names used for semantic search."
        }
      }
    },
    "SearchResult": {
      "type": "object",
      "description": "Contains a document found by a search query, plus associated metadata.",
      "properties": {
        "@search.captions": {
          "type": "array",
          "description": "Captions are the most representative passages from the document relatively to the search query. They are often used as document summary. Captions are only returned for queries of type 'semantic'.",
          "x-nullable": true,
          "items": {
            "$ref": "#/definitions/CaptionResult"
          },
          "readOnly": true,
          "x-ms-client-name": "captions",
          "x-ms-identifiers": []
        },
        "@search.highlights": {
          "type": "object",
          "description": "Text fragments from the document that indicate the matching search terms, organized by each applicable field; null if hit highlighting was not enabled for the query.",
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "readOnly": true,
          "x-ms-client-name": "highlights"
        },
        "@search.rerankerScore": {
          "type": "number",
          "format": "double",
          "description": "The relevance score computed by the semantic ranker for the top search results. Search results are sorted by the RerankerScore first and then by the Score. RerankerScore is only returned for queries of type 'semantic'.",
          "x-nullable": true,
          "readOnly": true,
          "x-ms-client-name": "rerankerScore"
        },
        "@search.score": {
          "type": "number",
          "format": "double",
          "description": "The relevance score of the document compared to other documents returned by the query.",
          "readOnly": true,
          "x-ms-client-name": "score"
        }
      },
      "required": [
        "@search.score"
      ]
    },
    "SuggestDocumentsResult": {
      "type": "object",
      "description": "Response containing suggestion query results from an index.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The sequence of results returned by the query.",
          "items": {
            "$ref": "#/definitions/SuggestResult"
          },
          "readOnly": true,
          "x-ms-client-name": "results",
          "x-ms-identifiers": []
        },
        "@search.coverage": {
          "type": "number",
          "format": "double",
          "description": "A value indicating the percentage of the index that was included in the query, or null if minimumCoverage was not set in the request.",
          "readOnly": true,
          "x-ms-client-name": "coverage"
        }
      },
      "required": [
        "value"
      ]
    },
    "SuggestRequest": {
      "type": "object",
      "description": "Parameters for filtering, sorting, fuzzy matching, and other suggestions query behaviors.",
      "properties": {
        "filter": {
          "type": "string",
          "description": "An OData expression that filters the documents considered for suggestions."
        },
        "fuzzy": {
          "type": "boolean",
          "description": "A value indicating whether to use fuzzy matching for the suggestion query. Default is false. When set to true, the query will find suggestions even if there's a substituted or missing character in the search text. While this provides a better experience in some scenarios, it comes at a performance cost as fuzzy suggestion searches are slower and consume more resources.",
          "x-ms-client-name": "useFuzzyMatching"
        },
        "highlightPostTag": {
          "type": "string",
          "description": "A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting of suggestions is disabled."
        },
        "highlightPreTag": {
          "type": "string",
          "description": "A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting of suggestions is disabled."
        },
        "minimumCoverage": {
          "type": "number",
          "format": "double",
          "description": "A number between 0 and 100 indicating the percentage of the index that must be covered by a suggestion query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 80."
        },
        "orderby": {
          "type": "string",
          "description": "The comma-separated list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to indicate ascending, or desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no $orderby is specified, the default sort order is descending by document match score. There can be at most 32 $orderby clauses.",
          "x-ms-client-name": "orderBy"
        },
        "search": {
          "type": "string",
          "description": "The search text to use to suggest documents. Must be at least 1 character, and no more than 100 characters.",
          "x-ms-client-name": "searchText"
        },
        "searchFields": {
          "type": "string",
          "description": "The comma-separated list of field names to search for the specified search text. Target fields must be included in the specified suggester."
        },
        "select": {
          "type": "string",
          "description": "The comma-separated list of fields to retrieve. If unspecified, only the key field will be included in the results."
        },
        "suggesterName": {
          "type": "string",
          "description": "The name of the suggester as specified in the suggesters collection that's part of the index definition."
        },
        "top": {
          "type": "integer",
          "format": "int32",
          "description": "The number of suggestions to retrieve. This must be a value between 1 and 100. The default is 5."
        }
      },
      "required": [
        "search",
        "suggesterName"
      ]
    },
    "SuggestResult": {
      "type": "object",
      "description": "A result containing a document found by a suggestion query, plus associated metadata.",
      "properties": {
        "@search.text": {
          "type": "string",
          "description": "The text of the suggestion result.",
          "readOnly": true,
          "x-ms-client-name": "text"
        }
      },
      "required": [
        "@search.text"
      ]
    }
  },
  "parameters": {
    "ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "description": "Client Api Version.",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "ClientRequestIdParameter": {
      "name": "x-ms-client-request-id",
      "in": "header",
      "description": "The tracking ID sent with the request to help with debugging.",
      "required": false,
      "type": "string",
      "x-ms-parameter-location": "method",
      "x-ms-client-id": true
    }
  }
}
