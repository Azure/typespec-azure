openapi: 3.0.0
info:
  title: SearchIndexClient
  version: 0.0.0
tags:
  - name: Documents
paths:
  /docs:
    get:
      tags:
        - Documents
      operationId: Documents_getSearch
      description: Searches for documents in the index.
      parameters:
        - name: search
          in: query
          required: false
          description: A full-text search query expression; Use "*" or omit this parameter to match all documents.
          schema:
            type: string
        - name: $count
          in: query
          required: false
          description: A value that specifies whether to fetch the total count of results. Default is false. Setting this value to true may have a performance impact. Note that the count returned is an approximation.
          schema:
            type: boolean
        - name: facet
          in: query
          required: false
          description: The list of facet expressions to apply to the search query. Each facet expression contains a field name, optionally followed by a comma-separated list of name:value pairs.
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
        - name: $filter
          in: query
          required: false
          description: The OData $filter expression to apply to the search query.
          schema:
            type: string
        - name: highlight
          in: query
          required: false
          description: The list of field names to use for hit highlights. Only searchable fields can be used for hit highlighting.
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
        - name: highlightPostTag
          in: query
          required: false
          description: A string tag that is appended to hit highlights. Must be set with highlightPreTag. Default is &lt;/em&gt;.
          schema:
            type: string
        - name: highlightPreTag
          in: query
          required: false
          description: A string tag that is prepended to hit highlights. Must be set with highlightPostTag. Default is &lt;em&gt;.
          schema:
            type: string
        - name: minimumCoverage
          in: query
          required: false
          description: A number between 0 and 100 indicating the percentage of the index that must be covered by a search query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 100.
          schema:
            type: number
            format: double
        - name: $orderBy
          in: query
          required: false
          description: The list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to indicate ascending, and desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no OrderBy is specified, the default sort order is descending by document match score. There can be at most 32 $orderby clauses.
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
        - name: queryType
          in: query
          required: false
          description: A value that specifies the syntax of the search query. The default is 'simple'. Use 'full' if your query uses the Lucene query syntax.
          schema:
            $ref: '#/components/schemas/QueryType'
        - name: scoringParameter
          in: query
          required: false
          description: The list of parameter values to be used in scoring functions (for example, referencePointParameter) using the format name-values. For example, if the scoring profile defines a function with a parameter called 'mylocation' the parameter string would be "mylocation--122.2,44.8" (without the quotes).
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
        - name: scoringProfile
          in: query
          required: false
          description: The name of a scoring profile to evaluate match scores for matching documents in order to sort the results.
          schema:
            type: string
        - name: semanticConfiguration
          in: query
          required: false
          description: The name of the semantic configuration that lists which fields should be used for semantic ranking, captions, highlights, and answers
          schema:
            type: string
        - name: searchFields
          in: query
          required: false
          description: The list of field names to which to scope the full-text search. When using fielded search (fieldName:searchExpression) in a full Lucene query, the field names of each fielded search expression take precedence over any field names listed in this parameter.
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
        - name: queryLanguage
          in: query
          required: false
          description: The language of the query.
          schema:
            $ref: '#/components/schemas/QueryLanguage'
        - name: speller
          in: query
          required: false
          description: Improve search recall by spell-correcting individual search query terms.
          schema:
            $ref: '#/components/schemas/QuerySpellerType'
        - name: answers
          in: query
          required: false
          description: This parameter is only valid if the query type is 'semantic'. If set, the query returns answers extracted from key passages in the highest ranked documents. The number of answers returned can be configured by appending the pipe character '|' followed by the 'count-<number of answers>' option after the answers parameter value, such as 'extractive|count-3'. Default count is 1.
          schema:
            $ref: '#/components/schemas/QueryAnswerType'
        - name: searchMode
          in: query
          required: false
          description: A value that specifies whether any or all of the search terms must be matched in order to count the document as a match.
          schema:
            $ref: '#/components/schemas/SearchMode'
        - name: scoringStatistics
          in: query
          required: false
          description: A value that specifies whether we want to calculate scoring statistics (such as document frequency) globally for more consistent scoring, or locally, for lower latency.
          schema:
            $ref: '#/components/schemas/ScoringStatistics'
        - name: sessionId
          in: query
          required: false
          description: A value to be used to create a sticky session, which can help to get more consistent results. As long as the same sessionId is used, a best-effort attempt will be made to target the same replica set. Be wary that reusing the same sessionID values repeatedly can interfere with the load balancing of the requests across replicas and adversely affect the performance of the search service. The value used as sessionId cannot start with a '_' character.
          schema:
            type: string
        - name: $select
          in: query
          required: false
          description: The list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included.
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
        - name: $skip
          in: query
          required: false
          description: The number of search results to skip. This value cannot be greater than 100,000. If you need to scan documents in sequence, but cannot use $skip due to this limitation, consider using $orderby on a totally-ordered key and $filter with a range query instead.
          schema:
            type: integer
            format: int32
        - name: $top
          in: query
          required: false
          description: The number of search results to retrieve. This can be used in conjunction with $skip to implement client-side paging of search results. If results are truncated due to server-side paging, the response will include a continuation token that can be used to issue another Search request for the next page of results.
          schema:
            type: integer
            format: int32
        - name: captions
          in: query
          required: false
          description: This parameter is only valid if the query type is 'semantic'. If set, the query returns captions extracted from key passages in the highest ranked documents. When Captions is set to 'extractive', highlighting is enabled by default, and can be configured by appending the pipe character '|' followed by the 'highlight-<true/false>' option, such as 'extractive|highlight-true'. Defaults to 'None'.
          schema:
            $ref: '#/components/schemas/QueryCaptionType'
        - name: semanticFields
          in: query
          required: false
          description: The list of field names used for semantic search.
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
        - $ref: '#/components/parameters/ApiVersionParameter'
        - $ref: '#/components/parameters/ClientRequestIdParameter'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchDocumentsResult'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchError'
  /docs('{key}'):
    get:
      tags:
        - Documents
      operationId: DocumentsByKey_get
      description: Retrieves a document from the index.
      parameters:
        - name: key
          in: path
          required: true
          description: The key
          schema:
            type: string
        - name: $select
          in: query
          required: true
          description: Selected fields
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
        - $ref: '#/components/parameters/ApiVersionParameter'
        - $ref: '#/components/parameters/ClientRequestIdParameter'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchError'
  /docs/$count:
    get:
      tags:
        - Documents
      operationId: Documents_getCount
      description: Queries the number of documents in the index.
      parameters:
        - $ref: '#/components/parameters/ApiVersionParameter'
        - $ref: '#/components/parameters/ClientRequestIdParameter'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: integer
                format: int64
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchError'
  /docs/search.autocomplete:
    get:
      tags:
        - Documents
      operationId: Documents_getAutocomplete
      description: Autocompletes incomplete query terms based on input text and matching terms in the index.
      parameters:
        - name: search
          in: query
          required: true
          description: The incomplete term which should be auto-completed.
          schema:
            type: string
        - name: suggesterName
          in: query
          required: true
          description: The name of the suggester as specified in the suggesters collection that's part of the index definition.
          schema:
            type: string
        - name: autocompleteMode
          in: query
          required: false
          description: Specifies the mode for Autocomplete. The default is 'oneTerm'. Use 'twoTerms' to get shingles and 'oneTermWithContext' to use the current context while producing auto-completed terms.
          schema:
            $ref: '#/components/schemas/AutocompleteMode'
        - name: $filter
          in: query
          required: false
          description: An OData expression that filters the documents used to produce completed terms for the Autocomplete result.
          schema:
            type: string
        - name: fuzzy
          in: query
          required: false
          description: A value indicating whether to use fuzzy matching for the autocomplete query. Default is false. When set to true, the query will find terms even if there's a substituted or missing character in the search text. While this provides a better experience in some scenarios, it comes at a performance cost as fuzzy autocomplete queries are slower and consume more resources.
          schema:
            type: boolean
        - name: highlightPostTag
          in: query
          required: false
          description: A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting is disabled.
          schema:
            type: string
        - name: highlightPreTag
          in: query
          required: false
          description: A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting is disabled.
          schema:
            type: string
        - name: minimumCoverage
          in: query
          required: false
          description: A number between 0 and 100 indicating the percentage of the index that must be covered by an autocomplete query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 80.
          schema:
            type: number
            format: double
        - name: searchFields
          in: query
          required: false
          description: The list of field names to consider when querying for auto-completed terms. Target fields must be included in the specified suggester.
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
        - name: $top
          in: query
          required: false
          description: The number of auto-completed terms to retrieve. This must be a value between 1 and 100. The default is 5.
          schema:
            type: integer
            format: int32
        - $ref: '#/components/parameters/ApiVersionParameter'
        - $ref: '#/components/parameters/ClientRequestIdParameter'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutocompleteResult'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchError'
  /docs/search.index:
    post:
      tags:
        - Documents
      operationId: Documents_index
      description: Sends a batch of document write actions to the index.
      parameters:
        - $ref: '#/components/parameters/ApiVersionParameter'
        - $ref: '#/components/parameters/ClientRequestIdParameter'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexDocumentsResult'
        '207':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexDocumentsResult'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchError'
      requestBody:
        description: The batch of index actions.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IndexBatch'
  /docs/search.post.autocomplete:
    post:
      tags:
        - Documents
      operationId: Documents_autocompletePost
      description: Autocompletes incomplete query terms based on input text and matching terms in the index.
      parameters:
        - $ref: '#/components/parameters/ApiVersionParameter'
        - $ref: '#/components/parameters/ClientRequestIdParameter'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutocompleteResult'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchError'
      requestBody:
        description: The definition of the Autocomplete request.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AutocompleteRequest'
  /docs/search.post.search:
    post:
      tags:
        - Documents
      operationId: Documents_searchPost
      description: Autocompletes incomplete query terms based on input text and matching terms in the index.
      parameters:
        - $ref: '#/components/parameters/ApiVersionParameter'
        - $ref: '#/components/parameters/ClientRequestIdParameter'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchDocumentsResult'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchError'
      requestBody:
        description: The definition of the Search request.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
  /docs/search.post.suggest:
    post:
      tags:
        - Documents
      operationId: Documents_suggestPost
      description: Search post suggest.
      parameters:
        - $ref: '#/components/parameters/ApiVersionParameter'
        - $ref: '#/components/parameters/ClientRequestIdParameter'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuggestDocumentsResult'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchError'
      requestBody:
        description: The Suggest request.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuggestRequest'
  /docs/search.suggest:
    get:
      tags:
        - Documents
      operationId: Documents_getSuggestion
      description: Suggests documents in the index that match the given partial query text.
      parameters:
        - name: search
          in: query
          required: true
          description: The search text to use to suggest documents. Must be at least 1 character, and no more than 100 characters.
          schema:
            type: string
        - name: suggesterName
          in: query
          required: true
          description: The name of the suggester as specified in the suggesters collection that's part of the index definition.
          schema:
            type: string
        - name: $filter
          in: query
          required: false
          description: An OData expression that filters the documents considered for suggestions.
          schema:
            type: string
        - name: fuzzy
          in: query
          required: false
          description: A value indicating whether to use fuzzy matching for the suggestions query. Default is false. When set to true, the query will find terms even if there's a substituted or missing character in the search text. While this provides a better experience in some scenarios, it comes at a performance cost as fuzzy suggestions queries are slower and consume more resources.
          schema:
            type: boolean
        - name: highlightPostTag
          in: query
          required: false
          description: A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting of suggestions is disabled.
          schema:
            type: string
        - name: highlightPreTag
          in: query
          required: false
          description: A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting of suggestions is disabled.
          schema:
            type: string
        - name: minimumCoverage
          in: query
          required: false
          description: A number between 0 and 100 indicating the percentage of the index that must be covered by a suggestions query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 80.
          schema:
            type: number
            format: double
        - name: $orderby
          in: query
          required: false
          description: The list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to indicate ascending, or desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no $orderby is specified, the default sort order is descending by document match score. There can be at most 32 $orderby clauses.
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
        - name: searchFields
          in: query
          required: false
          description: The list of field names to search for the specified search text. Target fields must be included in the specified suggester.
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
        - name: $select
          in: query
          required: false
          description: The list of fields to retrieve. If unspecified, only the key field will be included in the results.
          schema:
            type: string
        - name: $top
          in: query
          required: false
          description: The number of suggestions to retrieve. The value must be a number between 1 and 100. The default is 5.
          schema:
            type: integer
            format: int32
        - $ref: '#/components/parameters/ApiVersionParameter'
        - $ref: '#/components/parameters/ClientRequestIdParameter'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuggestDocumentsResult'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchError'
security:
  - ApiKeyAuth: []
  - OAuth2Auth:
      - https://cognitiveservices.azure.com/.default
components:
  parameters:
    ApiVersionParameter:
      name: api-version
      in: query
      required: true
      description: Client Api Version.
      schema:
        type: string
    ClientRequestIdParameter:
      name: x-ms-client-request-id
      in: header
      required: false
      description: The tracking ID sent with the request to help with debugging.
      schema:
        type: string
        x-ms-client-id: true
      x-ms-client-id: true
  schemas:
    AnswerResult:
      type: object
      properties:
        score:
          type: number
          format: double
          description: The score value represents how relevant the answer is to the the query relative to other answers returned for the query.
          readOnly: true
        key:
          type: string
          description: The key of the document the answer was extracted from.
          readOnly: true
        text:
          type: string
          description: The text passage extracted from the document contents as the answer.
          readOnly: true
        highlights:
          type: string
          nullable: true
          description: Same text passage as in the Text property with highlighted text phrases most relevant to the query.
          readOnly: true
      description: An answer is a text passage extracted from the contents of the most relevant documents that matched the query. Answers are extracted from the top search results. Answer candidates are scored and the top answers are selected.
    AutocompleteItem:
      type: object
      required:
        - text
        - queryPlusText
      properties:
        text:
          type: string
          description: The completed term.
          readOnly: true
        queryPlusText:
          type: string
          description: The query along with the completed term.
          readOnly: true
      description: The result of Autocomplete requests.
    AutocompleteMode:
      type: string
      enum:
        - oneTerm
        - twoTerms
        - oneTermWithContext
      description: Specifies the mode for Autocomplete. The default is 'oneTerm'. Use 'twoTerms' to get shingles and 'oneTermWithContext' to use the current context in producing autocomplete terms.
    AutocompleteRequest:
      type: object
      required:
        - search
        - suggesterName
      properties:
        search:
          type: string
          description: The search text on which to base autocomplete results.
        autocompleteMode:
          allOf:
            - $ref: '#/components/schemas/AutocompleteMode'
          description: Specifies the mode for Autocomplete. The default is 'oneTerm'. Use 'twoTerms' to get shingles and 'oneTermWithContext' to use the current context while producing auto-completed terms.
        filter:
          type: string
          description: An OData expression that filters the documents used to produce completed terms for the Autocomplete result.
        fuzzy:
          type: boolean
          description: A value indicating whether to use fuzzy matching for the autocomplete query. Default is false. When set to true, the query will autocomplete terms even if there's a substituted or missing character in the search text. While this provides a better experience in some scenarios, it comes at a performance cost as fuzzy autocomplete queries are slower and consume more resources.
        highlightPostTag:
          type: string
          description: A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting is disabled.
        highlightPreTag:
          type: string
          description: A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting is disabled.
        minimumCoverage:
          type: number
          format: double
          description: A number between 0 and 100 indicating the percentage of the index that must be covered by an autocomplete query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 80.
        searchFields:
          type: string
          description: The comma-separated list of field names to consider when querying for auto-completed terms. Target fields must be included in the specified suggester.
        suggesterName:
          type: string
          description: The name of the suggester as specified in the suggesters collection that's part of the index definition.
        top:
          type: integer
          format: int32
          description: The number of auto-completed terms to retrieve. This must be a value between 1 and 100. The default is 5.
      description: Parameters for fuzzy matching, and other autocomplete query behaviors.
    AutocompleteResult:
      type: object
      required:
        - value
      properties:
        '@search.coverage':
          type: number
          format: double
          description: A value indicating the percentage of the index that was considered by the autocomplete request, or null if minimumCoverage was not specified in the request.
          readOnly: true
        value:
          type: array
          items:
            $ref: '#/components/schemas/AutocompleteItem'
          description: The list of returned Autocompleted items.
          readOnly: true
      description: The result of Autocomplete query.
    CaptionResult:
      type: object
      properties:
        highlights:
          type: string
          nullable: true
          description: Same text passage as in the Text property with highlighted phrases most relevant to the query.
          readOnly: true
        text:
          type: string
          description: A representative text passage extracted from the document most relevant to the search query.
          readOnly: true
      description: Captions are the most representative passages from the document relatively to the search query. They are often used as document summary. Captions are only returned for queries of type 'semantic'..
    FacetResult:
      type: object
      properties:
        count:
          type: integer
          format: int64
          description: The approximate count of documents falling within the bucket described by this facet.
          readOnly: true
      description: A single bucket of a facet query result. Reports the number of documents with a field value falling within a particular range or having a particular value or interval.
    IndexAction:
      type: object
      properties:
        '@search.action':
          allOf:
            - $ref: '#/components/schemas/IndexActionType'
          description: The operation to perform on a document in an indexing batch.
      description: Represents an index action that operates on a document.
    IndexActionType:
      type: string
      enum:
        - upload
        - merge
        - mergeOrUpload
        - delete
      description: Index action type
    IndexBatch:
      type: object
      required:
        - value
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/IndexAction'
          description: The actions in the batch.
      description: Contains a batch of document write actions to send to the index.
    IndexDocumentsResult:
      type: object
      required:
        - value
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/IndexingResult'
          description: The list of status information for each document in the indexing request.
          readOnly: true
      description: Response containing the status of operations for all documents in the indexing request.
    IndexingResult:
      type: object
      required:
        - key
        - status
        - statusCode
      properties:
        key:
          type: string
          description: The key of a document that was in the indexing request.
          readOnly: true
        errorMessage:
          type: string
          description: The error message explaining why the indexing operation failed for the document identified by the key; null if indexing succeeded.
          readOnly: true
        status:
          type: boolean
          description: A value indicating whether the indexing operation succeeded for the document identified by the key.
          readOnly: true
        statusCode:
          type: integer
          format: int32
          description: 'The status code of the indexing operation. Possible values include: 200 for a successful update or delete, 201 for successful document creation, 400 for a malformed input document, 404 for document not found, 409 for a version conflict, 422 when the index is temporarily unavailable, or 503 for when the service is too busy.'
          readOnly: true
      description: Status of an indexing operation for a single document.
    QueryAnswerType:
      anyOf:
        - type: string
        - type: string
          enum:
            - none
            - en-us
            - en-gb
            - en-in
            - en-ca
            - en-au
            - fr-fr
            - fr-ca
            - de-de
            - es-es
            - es-mx
            - zh-cn
            - zh-tw
            - pt-br
            - pt-pt
            - it-it
            - ja-jp
            - ko-kr
            - ru-ru
            - cs-cz
            - nl-be
            - nl-nl
            - hu-hu
            - pl-pl
            - sv-se
            - tr-tr
            - hi-in
            - ar-sa
            - ar-eg
            - ar-ma
            - ar-kw
            - ar-jo
            - da-dk
            - no-no
            - bg-bg
            - hr-hr
            - hr-ba
            - ms-my
            - ms-bn
            - sl-sl
            - ta-in
            - vi-vn
            - el-gr
            - ro-ro
            - is-is
            - id-id
            - th-th
            - lt-lt
            - uk-ua
            - lv-lv
            - et-ee
            - ca-es
            - fi-fi
            - sr-ba
            - sr-me
            - sr-rs
            - sk-sk
            - nb-no
            - hy-am
            - bn-in
            - eu-es
            - gl-es
            - gu-in
            - he-il
            - ga-ie
            - kn-in
            - ml-in
            - mr-in
            - fa-ae
            - pa-in
            - te-in
            - ur-pk
            - lexicon
            - extractive
            - extractive
      description: This parameter is only valid if the query type is 'semantic'. If set, the query returns answers extracted from key passages in the highest ranked documents. The number of answers returned can be configured by appending the pipe character '|' followed by the 'count-<number of answers>' option after the answers parameter value, such as 'extractive|count-3'. Default count is 1.
    QueryCaptionType:
      anyOf:
        - type: string
        - type: string
          enum:
            - none
            - en-us
            - en-gb
            - en-in
            - en-ca
            - en-au
            - fr-fr
            - fr-ca
            - de-de
            - es-es
            - es-mx
            - zh-cn
            - zh-tw
            - pt-br
            - pt-pt
            - it-it
            - ja-jp
            - ko-kr
            - ru-ru
            - cs-cz
            - nl-be
            - nl-nl
            - hu-hu
            - pl-pl
            - sv-se
            - tr-tr
            - hi-in
            - ar-sa
            - ar-eg
            - ar-ma
            - ar-kw
            - ar-jo
            - da-dk
            - no-no
            - bg-bg
            - hr-hr
            - hr-ba
            - ms-my
            - ms-bn
            - sl-sl
            - ta-in
            - vi-vn
            - el-gr
            - ro-ro
            - is-is
            - id-id
            - th-th
            - lt-lt
            - uk-ua
            - lv-lv
            - et-ee
            - ca-es
            - fi-fi
            - sr-ba
            - sr-me
            - sr-rs
            - sk-sk
            - nb-no
            - hy-am
            - bn-in
            - eu-es
            - gl-es
            - gu-in
            - he-il
            - ga-ie
            - kn-in
            - ml-in
            - mr-in
            - fa-ae
            - pa-in
            - te-in
            - ur-pk
            - lexicon
            - extractive
            - extractive
      description: This parameter is only valid if the query type is 'semantic'. If set, the query returns captions extracted from key passages in the highest ranked documents. When s is set to 'extractive', highlighting is enabled by default, and can be configured by appending the pipe character '|' followed by the 'highlight-<true/false>' option, such as 'extractive|highlight-true'. Defaults to 'None'.
    QueryLanguage:
      anyOf:
        - type: string
        - type: string
          enum:
            - none
            - en-us
            - en-gb
            - en-in
            - en-ca
            - en-au
            - fr-fr
            - fr-ca
            - de-de
            - es-es
            - es-mx
            - zh-cn
            - zh-tw
            - pt-br
            - pt-pt
            - it-it
            - ja-jp
            - ko-kr
            - ru-ru
            - cs-cz
            - nl-be
            - nl-nl
            - hu-hu
            - pl-pl
            - sv-se
            - tr-tr
            - hi-in
            - ar-sa
            - ar-eg
            - ar-ma
            - ar-kw
            - ar-jo
            - da-dk
            - no-no
            - bg-bg
            - hr-hr
            - hr-ba
            - ms-my
            - ms-bn
            - sl-sl
            - ta-in
            - vi-vn
            - el-gr
            - ro-ro
            - is-is
            - id-id
            - th-th
            - lt-lt
            - uk-ua
            - lv-lv
            - et-ee
            - ca-es
            - fi-fi
            - sr-ba
            - sr-me
            - sr-rs
            - sk-sk
            - nb-no
            - hy-am
            - bn-in
            - eu-es
            - gl-es
            - gu-in
            - he-il
            - ga-ie
            - kn-in
            - ml-in
            - mr-in
            - fa-ae
            - pa-in
            - te-in
            - ur-pk
            - lexicon
            - extractive
            - extractive
      description: The language of the query.
    QuerySpellerType:
      anyOf:
        - type: string
        - type: string
          enum:
            - none
            - en-us
            - en-gb
            - en-in
            - en-ca
            - en-au
            - fr-fr
            - fr-ca
            - de-de
            - es-es
            - es-mx
            - zh-cn
            - zh-tw
            - pt-br
            - pt-pt
            - it-it
            - ja-jp
            - ko-kr
            - ru-ru
            - cs-cz
            - nl-be
            - nl-nl
            - hu-hu
            - pl-pl
            - sv-se
            - tr-tr
            - hi-in
            - ar-sa
            - ar-eg
            - ar-ma
            - ar-kw
            - ar-jo
            - da-dk
            - no-no
            - bg-bg
            - hr-hr
            - hr-ba
            - ms-my
            - ms-bn
            - sl-sl
            - ta-in
            - vi-vn
            - el-gr
            - ro-ro
            - is-is
            - id-id
            - th-th
            - lt-lt
            - uk-ua
            - lv-lv
            - et-ee
            - ca-es
            - fi-fi
            - sr-ba
            - sr-me
            - sr-rs
            - sk-sk
            - nb-no
            - hy-am
            - bn-in
            - eu-es
            - gl-es
            - gu-in
            - he-il
            - ga-ie
            - kn-in
            - ml-in
            - mr-in
            - fa-ae
            - pa-in
            - te-in
            - ur-pk
            - lexicon
            - extractive
            - extractive
      description: Improve search recall by spell-correcting individual search query terms.
    QueryType:
      type: string
      enum:
        - simple
        - full
        - semantic
      description: Specifies the syntax of the search query. The default is 'simple'. Use 'full' if your query uses the Lucene query syntax and 'semantic' if query syntax is not needed.
    ScoringStatistics:
      type: string
      enum:
        - local
        - global
      description: A value that specifies whether we want to calculate scoring statistics (such as document frequency) globally for more consistent scoring, or locally, for lower latency. The default is 'local'. Use 'global' to aggregate scoring statistics globally before scoring. Using global scoring statistics can increase latency of search queries.
    SearchDocumentsResult:
      type: object
      required:
        - value
      properties:
        '@odata.count':
          type: integer
          format: int64
          description: The total count of results found by the search operation, or null if the count was not requested. If present, the count may be greater than the number of results in this response. This can happen if you use the $top or $skip parameters, or if Azure Cognitive Search can't return all the requested documents in a single Search response.
          readOnly: true
        '@odata.nextLink':
          type: string
          description: Continuation URL returned when Azure Cognitive Search can't return all the requested results in a single Search response. You can use this URL to formulate another GET or POST Search request to get the next part of the search response. Make sure to use the same verb (GET or POST) as the request that produced this response.
          readOnly: true
        '@search.coverage':
          type: number
          format: double
          description: A value indicating the percentage of the index that was included in the query, or null if minimumCoverage was not specified in the request.
          readOnly: true
        '@search.facets':
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/FacetResult'
          description: The facet query results for the search operation, organized as a collection of buckets for each faceted field; null if the query did not include any facet expressions.
          readOnly: true
        '@search.answers':
          type: array
          items:
            $ref: '#/components/schemas/AnswerResult'
          description: The answers query results for the search operation; null if the answers query parameter was not specified or set to 'none'.
          readOnly: true
        '@search.nextPageParameters':
          allOf:
            - $ref: '#/components/schemas/SearchRequest'
          description: Continuation JSON payload returned when Azure Cognitive Search can't return all the requested results in a single Search response. You can use this JSON along with @odata.nextLink to formulate another POST Search request to get the next part of the search response.
          readOnly: true
        value:
          type: array
          items:
            $ref: '#/components/schemas/SearchResult'
          description: The sequence of results returned by the query.
          readOnly: true
      description: Response containing search results from an index.
    SearchError:
      type: object
      required:
        - message
      properties:
        code:
          type: string
          description: One of a server-defined set of error codes.
          readOnly: true
        message:
          type: string
          description: A human-readable representation of the error.
          readOnly: true
        details:
          type: array
          items:
            $ref: '#/components/schemas/SearchError'
          description: An array of details about specific errors that led to this reported error.
          readOnly: true
      description: Describes an error condition for the Azure Cognitive Search API.
    SearchMode:
      type: string
      enum:
        - any
        - all
      description: Specifies whether any or all of the search terms must be matched in order to count the document as a match.
    SearchRequest:
      type: object
      properties:
        count:
          type: boolean
          description: A value that specifies whether to fetch the total count of results. Default is false. Setting this value to true may have a performance impact. Note that the count returned is an approximation.
        facets:
          type: array
          items:
            type: string
          description: The list of facet expressions to apply to the search query. Each facet expression contains a field name, optionally followed by a comma-separated list of name:value pairs.
        filter:
          type: string
          description: The OData $filter expression to apply to the search query.
        highlight:
          type: string
          description: The comma-separated list of field names to use for hit highlights. Only searchable fields can be used for hit highlighting.
        highlightPostTag:
          type: string
          description: A string tag that is appended to hit highlights. Must be set with highlightPreTag. Default is &lt;/em&gt;.
        highlightPreTag:
          type: string
          description: A string tag that is prepended to hit highlights. Must be set with highlightPostTag. Default is &lt;em&gt;.
        minimumCoverage:
          type: number
          format: double
          description: A number between 0 and 100 indicating the percentage of the index that must be covered by a search query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 100.
        orderby:
          type: string
          description: The comma-separated list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to indicate ascending, or desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no $orderby is specified, the default sort order is descending by document match score. There can be at most 32 $orderby clauses.
        queryType:
          allOf:
            - $ref: '#/components/schemas/QueryType'
          description: A value that specifies the syntax of the search query. The default is 'simple'. Use 'full' if your query uses the Lucene query syntax.
        scoringStatistics:
          allOf:
            - $ref: '#/components/schemas/ScoringStatistics'
          description: A value that specifies whether we want to calculate scoring statistics (such as document frequency) globally for more consistent scoring, or locally, for lower latency. The default is 'local'. Use 'global' to aggregate scoring statistics globally before scoring. Using global scoring statistics can increase latency of search queries.
        sessionId:
          type: string
          description: A value to be used to create a sticky session, which can help getting more consistent results. As long as the same sessionId is used, a best-effort attempt will be made to target the same replica set. Be wary that reusing the same sessionID values repeatedly can interfere with the load balancing of the requests across replicas and adversely affect the performance of the search service. The value used as sessionId cannot start with a '_' character.
        scoringParameters:
          type: array
          items:
            type: string
          description: The list of parameter values to be used in scoring functions (for example, referencePointParameter) using the format name-values. For example, if the scoring profile defines a function with a parameter called 'mylocation' the parameter string would be "mylocation--122.2,44.8" (without the quotes).
        scoringProfile:
          type: string
          description: The name of a scoring profile to evaluate match scores for matching documents in order to sort the results.
        semanticConfiguration:
          type: string
          description: The name of a semantic configuration that will be used when processing documents for queries of type semantic.
        search:
          type: string
          description: A full-text search query expression; Use "*" or omit this parameter to match all documents.
        searchFields:
          type: string
          description: The comma-separated list of field names to which to scope the full-text search. When using fielded search (fieldName:searchExpression) in a full Lucene query, the field names of each fielded search expression take precedence over any field names listed in this parameter.
        searchMode:
          allOf:
            - $ref: '#/components/schemas/SearchMode'
          description: A value that specifies whether any or all of the search terms must be matched in order to count the document as a match.
        queryLanguage:
          allOf:
            - $ref: '#/components/schemas/QueryLanguage'
          description: A value that specifies the language of the search query.
        speller:
          allOf:
            - $ref: '#/components/schemas/QuerySpellerType'
          description: A value that specified the type of the speller to use to spell-correct individual search query terms.
        answers:
          allOf:
            - $ref: '#/components/schemas/QueryAnswerType'
          description: A value that specifies whether answers should be returned as part of the search response.
        select:
          type: string
          description: The comma-separated list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included.
        skip:
          type: integer
          format: int32
          description: The number of search results to skip. This value cannot be greater than 100,000. If you need to scan documents in sequence, but cannot use skip due to this limitation, consider using orderby on a totally-ordered key and filter with a range query instead.
        top:
          type: integer
          format: int32
          description: The number of search results to retrieve. This can be used in conjunction with $skip to implement client-side paging of search results. If results are truncated due to server-side paging, the response will include a continuation token that can be used to issue another Search request for the next page of results.
        captions:
          allOf:
            - $ref: '#/components/schemas/QueryCaptionType'
          description: A value that specifies whether captions should be returned as part of the search response.
        semanticFields:
          type: string
          description: The comma-separated list of field names used for semantic search.
      description: Parameters for filtering, sorting, faceting, paging, and other search query behaviors.
    SearchResult:
      type: object
      required:
        - '@search.score'
      properties:
        '@search.captions':
          type: array
          items:
            $ref: '#/components/schemas/CaptionResult'
          nullable: true
          description: Captions are the most representative passages from the document relatively to the search query. They are often used as document summary. Captions are only returned for queries of type 'semantic'.
          readOnly: true
        '@search.highlights':
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          description: Text fragments from the document that indicate the matching search terms, organized by each applicable field; null if hit highlighting was not enabled for the query.
          readOnly: true
        '@search.rerankerScore':
          type: number
          format: double
          nullable: true
          description: The relevance score computed by the semantic ranker for the top search results. Search results are sorted by the RerankerScore first and then by the Score. RerankerScore is only returned for queries of type 'semantic'.
          readOnly: true
        '@search.score':
          type: number
          format: double
          description: The relevance score of the document compared to other documents returned by the query.
          readOnly: true
      description: Contains a document found by a search query, plus associated metadata.
    SuggestDocumentsResult:
      type: object
      required:
        - value
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/SuggestResult'
          description: The sequence of results returned by the query.
          readOnly: true
        '@search.coverage':
          type: number
          format: double
          description: A value indicating the percentage of the index that was included in the query, or null if minimumCoverage was not set in the request.
          readOnly: true
      description: Response containing suggestion query results from an index.
    SuggestRequest:
      type: object
      required:
        - search
        - suggesterName
      properties:
        filter:
          type: string
          description: An OData expression that filters the documents considered for suggestions.
        fuzzy:
          type: boolean
          description: A value indicating whether to use fuzzy matching for the suggestion query. Default is false. When set to true, the query will find suggestions even if there's a substituted or missing character in the search text. While this provides a better experience in some scenarios, it comes at a performance cost as fuzzy suggestion searches are slower and consume more resources.
        highlightPostTag:
          type: string
          description: A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting of suggestions is disabled.
        highlightPreTag:
          type: string
          description: A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting of suggestions is disabled.
        minimumCoverage:
          type: number
          format: double
          description: A number between 0 and 100 indicating the percentage of the index that must be covered by a suggestion query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 80.
        orderby:
          type: string
          description: The comma-separated list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to indicate ascending, or desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no $orderby is specified, the default sort order is descending by document match score. There can be at most 32 $orderby clauses.
        search:
          type: string
          description: The search text to use to suggest documents. Must be at least 1 character, and no more than 100 characters.
        searchFields:
          type: string
          description: The comma-separated list of field names to search for the specified search text. Target fields must be included in the specified suggester.
        select:
          type: string
          description: The comma-separated list of fields to retrieve. If unspecified, only the key field will be included in the results.
        suggesterName:
          type: string
          description: The name of the suggester as specified in the suggesters collection that's part of the index definition.
        top:
          type: integer
          format: int32
          description: The number of suggestions to retrieve. This must be a value between 1 and 100. The default is 5.
      description: Parameters for filtering, sorting, fuzzy matching, and other suggestions query behaviors.
    SuggestResult:
      type: object
      required:
        - '@search.text'
      properties:
        '@search.text':
          type: string
          description: The text of the suggestion result.
          readOnly: true
      description: A result containing a document found by a suggestion query, plus associated metadata.
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: api-key
    OAuth2Auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://login.contoso.com/common/oauth2/v2.0/authorize
          scopes:
            https://cognitiveservices.azure.com/.default: ''
