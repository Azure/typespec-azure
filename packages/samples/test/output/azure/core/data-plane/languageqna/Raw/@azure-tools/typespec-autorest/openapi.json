{
  "swagger": "2.0",
  "info": {
    "title": "Microsoft Cognitive Language Service - Question Answering - Authoring",
    "version": "21-10-01",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "security": [
    {
      "ApiKeyAuth": []
    },
    {
      "OAuth2Auth": [
        "https://cognitiveservices.azure.com/.default"
      ]
    }
  ],
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "name": "api-key",
      "in": "header"
    },
    "OAuth2Auth": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "https://login.contoso.com/common/oauth2/v2.0/authorize",
      "scopes": {
        "https://cognitiveservices.azure.com/.default": ""
      }
    }
  },
  "tags": [],
  "paths": {
    "/query-knowledgebases/projects": {
      "get": {
        "operationId": "QuestionAnsweringProjects_ListProjects",
        "description": "Gets all projects for a user",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.TopQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.MaxPageSizeQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedProjectMetadata"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/query-knowledgebases/projects/{projectName}": {
      "get": {
        "operationId": "QuestionAnsweringProjects_GetProjectDetails",
        "description": "Get the requested project metadata",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "projectName",
            "in": "path",
            "description": "Name of the project",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ProjectMetadata"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "QuestionAnsweringProjects_CreateProject",
        "description": "Create or update a project",
        "consumes": [
          "application/merge-patch+json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "projectName",
            "in": "path",
            "description": "Name of the project",
            "required": true,
            "type": "string"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "The resource instance.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectMetadataCreateOrUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ProjectMetadata"
            }
          },
          "201": {
            "description": "The request has succeeded and a new resource has been created as a result.",
            "schema": {
              "$ref": "#/definitions/ProjectMetadata"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "QuestionAnsweringProjects_DeleteProject",
        "description": "Delete the project",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "projectName",
            "in": "path",
            "description": "Name of the project",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "schema": {
              "type": "object",
              "description": "Provides status details for long running operations.",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique ID of the operation."
                },
                "status": {
                  "$ref": "#/definitions/Azure.Core.Foundations.OperationState",
                  "description": "The status of the operation"
                },
                "error": {
                  "$ref": "#/definitions/Azure.Core.Foundations.Error",
                  "description": "Error object that describes the error when status is \"Failed\"."
                }
              },
              "required": [
                "id",
                "status"
              ]
            },
            "headers": {
              "Operation-Location": {
                "type": "string",
                "format": "uri",
                "description": "The location for monitoring the operation state."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/query-knowledgebases/projects/{projectName}/:export": {
      "post": {
        "operationId": "QuestionAnsweringProjects_Export",
        "description": "Export project metadata and assets",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "projectName",
            "in": "path",
            "description": "Name of the project",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ImportExportFormatParameter"
          },
          {
            "$ref": "#/parameters/AssetKindParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "type": "string",
                "format": "uri",
                "description": "The location for monitoring the operation state."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/query-knowledgebases/projects/{projectName}/:import": {
      "post": {
        "operationId": "QuestionAnsweringProjects_Import",
        "description": "Import project assets",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "projectName",
            "in": "path",
            "description": "Name of the project",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ImportExportFormatParameter"
          },
          {
            "$ref": "#/parameters/AssetKindParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "type": "string",
                "format": "uri",
                "description": "The location for monitoring the operation state."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/query-knowledgebases/projects/{projectName}/deployments": {
      "get": {
        "operationId": "QuestionAnsweringProjects_ListDeployments",
        "description": "List all deployments of a project.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "projectName",
            "in": "path",
            "description": "Name of the project",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedProjectDeployment"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/query-knowledgebases/projects/{projectName}/deployments/{deploymentName}": {
      "put": {
        "operationId": "QuestionAnsweringProjects_CreateDeployment",
        "description": "Deploy project to production.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "projectName",
            "in": "path",
            "description": "Name of the project",
            "required": true,
            "type": "string"
          },
          {
            "name": "deploymentName",
            "in": "path",
            "description": "Name of the deployment.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "type": "string",
                "format": "uri",
                "description": "The location for monitoring the operation state."
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/query-knowledgebases/projects/{projectName}/deployments/{deploymentName}/jobs/{jobId}": {
      "get": {
        "operationId": "QuestionAnsweringProjects_GetDeploymentsJobStatus",
        "description": "Gets the status of a Deploy job.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "projectName",
            "in": "path",
            "description": "Name of the project",
            "required": true,
            "type": "string"
          },
          {
            "name": "deploymentName",
            "in": "path",
            "description": "Name of the deployment.",
            "required": true,
            "type": "string"
          },
          {
            "name": "jobId",
            "in": "path",
            "description": "The job ID.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DeploymentJobState"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/query-knowledgebases/projects/{projectName}/deployments/synonyms": {
      "get": {
        "operationId": "QuestionAnsweringProjects_ListSynonyms",
        "description": "List all the synonyms of a project.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/ProjectNamePathParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.TopQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.MaxPageSizeQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedSynonymAsset"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      },
      "put": {
        "operationId": "QuestionAnsweringProjects_ReplaceSynonyms",
        "description": "Create or update all the synonyms of a project.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/ProjectNamePathParameter"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The request body.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SynonymAsset"
              },
              "x-ms-identifiers": []
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedSynonymAsset"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/query-knowledgebases/projects/{projectName}/export/jobs/{jobId}": {
      "get": {
        "operationId": "QuestionAnsweringProjects_GetExportStatus",
        "description": "Gets the status of an Export job, once job completes, returns the project metadata, and assets",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "projectName",
            "in": "path",
            "description": "Name of the project",
            "required": true,
            "type": "string"
          },
          {
            "name": "jobId",
            "in": "path",
            "description": "The job ID.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ExportJobState"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/query-knowledgebases/projects/{projectName}/feedback": {
      "post": {
        "operationId": "QuestionAnsweringProjects_CreateFeedback",
        "description": "Update Active Learning feedback.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "projectName",
            "in": "path",
            "description": "Name of the project",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/query-knowledgebases/projects/{projectName}/import/jobs/{jobId}": {
      "get": {
        "operationId": "QuestionAnsweringProjects_GetImportStatus",
        "description": "Gets the status of an Import job",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "projectName",
            "in": "path",
            "description": "Name of the project",
            "required": true,
            "type": "string"
          },
          {
            "name": "jobId",
            "in": "path",
            "description": "The job ID.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/JobState"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/query-knowledgebases/projects/{projectName}/qnas": {
      "get": {
        "operationId": "QuestionAnsweringProjects_ListQuestionAndAnswers",
        "description": "List all the sources of a project.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/ProjectNamePathParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.TopQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.MaxPageSizeQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedQnaSourceRecord"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      },
      "patch": {
        "operationId": "QuestionAnsweringProjects_UpdateQuestionAndAnswers",
        "description": "Updates the sources of a project.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/ProjectNamePathParameter"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The request body.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QnaRecordUpdateRecord"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedQnaSourceRecord"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/query-knowledgebases/projects/{projectName}/qnas/jobs/{jobId}": {
      "get": {
        "operationId": "QuestionAnsweringProjects_GetQuestionAndAnswersJobStatus",
        "description": "Gets the status of update sources job.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/ProjectNamePathParameter"
          },
          {
            "$ref": "#/parameters/JobIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/JobMetadata"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/query-knowledgebases/projects/{projectName}/sources": {
      "get": {
        "operationId": "QuestionAnsweringProjects_ListSources",
        "description": "List all the sources of a project.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/ProjectNamePathParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.TopQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/Azure.Core.MaxPageSizeQueryParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedQnaSourceRecord"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      },
      "patch": {
        "operationId": "QuestionAnsweringProjects_UpdateSources",
        "description": "Updates the sources of a project.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/ProjectNamePathParameter"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The request body.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QnaSourceRecordUpdateRecord"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PagedQnaSourceRecord"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/query-knowledgebases/projects/{projectName}/sources/jobs/{jobId}": {
      "get": {
        "operationId": "QuestionAnsweringProjects_GetSourcesJobStatus",
        "description": "Gets the status of update sources job.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/ProjectNamePathParameter"
          },
          {
            "$ref": "#/parameters/JobIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/JobMetadata"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    },
    "/query-knowledgebases/projects/deletion-jobs/{jobId}": {
      "get": {
        "operationId": "QuestionAnsweringProjects_GetDeleteStatus",
        "description": "Gets the status of a Project delete job",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "jobId",
            "in": "path",
            "description": "The job ID.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DeletionJobState"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            },
            "headers": {
              "x-ms-error-code": {
                "type": "string",
                "description": "String error code indicating what went wrong."
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ActiveLearningFeedback": {
      "type": "object",
      "description": "The active learning feedback.",
      "properties": {
        "records": {
          "type": "array",
          "description": "A list of Feedback Records for Active Learning.",
          "items": {
            "$ref": "#/definitions/FeedbackRecord"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "ApiKey": {
      "type": "object",
      "description": "The API key header definition."
    },
    "Azure.Core.Foundations.Error": {
      "type": "object",
      "description": "The error object.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "message": {
          "type": "string",
          "description": "A human-readable representation of the error."
        },
        "target": {
          "type": "string",
          "description": "The target of the error."
        },
        "details": {
          "type": "array",
          "description": "An array of details about specific errors that led to this reported error.",
          "items": {
            "$ref": "#/definitions/Azure.Core.Foundations.Error"
          },
          "x-ms-identifiers": []
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "An object containing more specific information than the current object about the error."
        }
      },
      "required": [
        "code",
        "message"
      ]
    },
    "Azure.Core.Foundations.ErrorResponse": {
      "type": "object",
      "description": "A response containing error details.",
      "properties": {
        "error": {
          "$ref": "#/definitions/Azure.Core.Foundations.Error",
          "description": "The error object."
        }
      },
      "required": [
        "error"
      ]
    },
    "Azure.Core.Foundations.InnerError": {
      "type": "object",
      "description": "An object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "Inner error."
        }
      }
    },
    "Azure.Core.Foundations.OperationState": {
      "type": "string",
      "description": "Enum describing allowed operation states.",
      "enum": [
        "NotStarted",
        "Running",
        "Succeeded",
        "Failed",
        "Canceled"
      ],
      "x-ms-enum": {
        "name": "OperationState",
        "modelAsString": true,
        "values": [
          {
            "name": "NotStarted",
            "value": "NotStarted",
            "description": "The operation has not started."
          },
          {
            "name": "Running",
            "value": "Running",
            "description": "The operation is in progress."
          },
          {
            "name": "Succeeded",
            "value": "Succeeded",
            "description": "The operation has completed successfully."
          },
          {
            "name": "Failed",
            "value": "Failed",
            "description": "The operation has failed."
          },
          {
            "name": "Canceled",
            "value": "Canceled",
            "description": "The operation has been canceled by the user."
          }
        ]
      }
    },
    "CreateProjectOptions": {
      "type": "object",
      "description": "Parameters needed to create the project",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the project"
        },
        "language": {
          "type": "string",
          "description": "Language of the text records. This is BCP-47 representation of a language. For example, use \"en\" for English; \"es\" for Spanish etc. If not set, use \"en\" for English as default."
        },
        "multilingualResource": {
          "type": "boolean",
          "description": "Resource enabled for multiple languages across projects or not"
        },
        "settings": {
          "$ref": "#/definitions/ProjectSettings",
          "description": "Configurable settings of the Project"
        }
      }
    },
    "DeletionJobState": {
      "type": "object",
      "description": "The state of a deletion job.",
      "properties": {
        "jobId": {
          "type": "string",
          "description": "The job ID.",
          "readOnly": true
        },
        "createdDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "When the job was created."
        },
        "expirationDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "When the job expires."
        },
        "lastUpdatedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "When the job was last updated."
        },
        "status": {
          "$ref": "#/definitions/JobStatus",
          "description": "The job status."
        },
        "errors": {
          "type": "array",
          "description": "The error list.",
          "items": {
            "$ref": "#/definitions/Azure.Core.Foundations.Error"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "jobId",
        "createdDateTime",
        "lastUpdatedDateTime",
        "status",
        "errors"
      ]
    },
    "DeploymentJobState": {
      "type": "object",
      "description": "Job state represents the job metadata and any errors",
      "properties": {
        "jobId": {
          "type": "string",
          "description": "The job ID.",
          "readOnly": true
        },
        "createdDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "When the job was created."
        },
        "expirationDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "When the job expires."
        },
        "lastUpdatedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "When the job was last updated."
        },
        "status": {
          "$ref": "#/definitions/JobStatus",
          "description": "The job status."
        },
        "errors": {
          "type": "array",
          "description": "The error list.",
          "items": {
            "$ref": "#/definitions/Azure.Core.Foundations.Error"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "jobId",
        "createdDateTime",
        "lastUpdatedDateTime",
        "status",
        "errors"
      ]
    },
    "Errors": {
      "type": "object",
      "description": "Collection of error types",
      "properties": {
        "errors": {
          "type": "array",
          "description": "The error list.",
          "items": {
            "$ref": "#/definitions/Azure.Core.Foundations.Error"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "errors"
      ]
    },
    "ExportJobResultUrl": {
      "type": "object",
      "description": "URL to download the result of the Export Job",
      "properties": {
        "resultUrl": {
          "type": "string",
          "description": "URL to download the result of the Export Job"
        }
      },
      "required": [
        "resultUrl"
      ]
    },
    "ExportJobState": {
      "type": "object",
      "description": "Export job status, project metadata, and assets.",
      "properties": {
        "jobId": {
          "type": "string",
          "description": "The job ID.",
          "readOnly": true
        },
        "createdDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "When the job was created."
        },
        "expirationDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "When the job expires."
        },
        "lastUpdatedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "When the job was last updated."
        },
        "status": {
          "$ref": "#/definitions/JobStatus",
          "description": "The job status."
        },
        "errors": {
          "type": "array",
          "description": "The error list.",
          "items": {
            "$ref": "#/definitions/Azure.Core.Foundations.Error"
          },
          "x-ms-identifiers": []
        },
        "resultUrl": {
          "type": "string",
          "description": "URL to download the result of the Export Job"
        }
      },
      "required": [
        "jobId",
        "createdDateTime",
        "lastUpdatedDateTime",
        "status",
        "errors",
        "resultUrl"
      ]
    },
    "FeedbackRecord": {
      "type": "object",
      "description": "A feedback record.",
      "properties": {
        "userId": {
          "type": "string",
          "description": "Unique identifier of the user."
        },
        "userQuestion": {
          "type": "string",
          "description": "User suggested question for the QnA."
        },
        "qnaId": {
          "type": "integer",
          "format": "int32",
          "description": "Unique ID of the QnA."
        }
      }
    },
    "JobMetadata": {
      "type": "object",
      "description": "Represents the job metadata",
      "properties": {
        "jobId": {
          "type": "string",
          "description": "The job ID.",
          "readOnly": true
        },
        "createdDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "When the job was created."
        },
        "expirationDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "When the job expires."
        },
        "lastUpdatedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "When the job was last updated."
        },
        "status": {
          "$ref": "#/definitions/JobStatus",
          "description": "The job status."
        }
      },
      "required": [
        "jobId",
        "createdDateTime",
        "lastUpdatedDateTime",
        "status"
      ]
    },
    "JobState": {
      "type": "object",
      "description": "Job state represents the job metadata and any errors",
      "properties": {
        "jobId": {
          "type": "string",
          "description": "The job ID.",
          "readOnly": true
        },
        "createdDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "When the job was created."
        },
        "expirationDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "When the job expires."
        },
        "lastUpdatedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "When the job was last updated."
        },
        "status": {
          "$ref": "#/definitions/JobStatus",
          "description": "The job status."
        },
        "errors": {
          "type": "array",
          "description": "The error list.",
          "items": {
            "$ref": "#/definitions/Azure.Core.Foundations.Error"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "jobId",
        "createdDateTime",
        "lastUpdatedDateTime",
        "status",
        "errors"
      ]
    },
    "JobStatus": {
      "type": "string",
      "description": "The job status.",
      "enum": [
        "notStarted",
        "running",
        "succeeded",
        "failed",
        "cancelled",
        "cancelling",
        "partiallyCompleted"
      ],
      "x-ms-enum": {
        "name": "JobStatus",
        "modelAsString": true,
        "values": [
          {
            "name": "notStarted",
            "value": "notStarted",
            "description": "The job has not started yet."
          },
          {
            "name": "running",
            "value": "running",
            "description": "The job is running."
          },
          {
            "name": "succeeded",
            "value": "succeeded",
            "description": "The job has completed successfully."
          },
          {
            "name": "failed",
            "value": "failed",
            "description": "The job has failed."
          },
          {
            "name": "cancelled",
            "value": "cancelled",
            "description": "The job has been cancelled."
          },
          {
            "name": "cancelling",
            "value": "cancelling",
            "description": "The job is cancelling."
          },
          {
            "name": "partiallyCompleted",
            "value": "partiallyCompleted",
            "description": "The job is partially completed."
          }
        ]
      }
    },
    "PagedProjectDeployment": {
      "type": "object",
      "description": "Paged collection of ProjectDeployment items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The ProjectDeployment items on this page",
          "items": {
            "$ref": "#/definitions/ProjectDeployment"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedProjectMetadata": {
      "type": "object",
      "description": "Paged collection of ProjectMetadata items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The ProjectMetadata items on this page",
          "items": {
            "$ref": "#/definitions/ProjectMetadata"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedQnaSourceRecord": {
      "type": "object",
      "description": "Paged collection of QnaSourceRecord items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The QnaSourceRecord items on this page",
          "items": {
            "$ref": "#/definitions/QnaSourceRecord"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "PagedSynonymAsset": {
      "type": "object",
      "description": "Paged collection of SynonymAsset items",
      "properties": {
        "value": {
          "type": "array",
          "description": "The SynonymAsset items on this page",
          "items": {
            "$ref": "#/definitions/SynonymAsset"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "ProjectDeployment": {
      "type": "object",
      "description": "Project deployment details.",
      "properties": {
        "deploymentName": {
          "type": "string",
          "description": "Name of the deployment.",
          "readOnly": true
        },
        "lastDeployedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Represents the project last deployment date-time."
        }
      },
      "required": [
        "deploymentName"
      ]
    },
    "ProjectMetadata": {
      "type": "object",
      "description": "Represents the project",
      "properties": {
        "projectName": {
          "type": "string",
          "description": "Name of the project",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "Description of the project."
        }
      },
      "required": [
        "projectName",
        "description"
      ]
    },
    "ProjectMetadataCreateOrUpdate": {
      "type": "object",
      "description": "Represents the project",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the project."
        }
      }
    },
    "ProjectSettings": {
      "type": "object",
      "description": "Configurable settings of the Project",
      "properties": {
        "defaultAnswer": {
          "type": "string",
          "description": "Default Answer response when no good match is found in the knowledge base"
        }
      }
    },
    "QnaDialog": {
      "type": "object",
      "description": "A dialog to be displayed to the user.",
      "properties": {
        "isContextOnly": {
          "type": "boolean",
          "description": "If true, is context only."
        },
        "prompts": {
          "type": "array",
          "description": "The prompts to display.",
          "items": {
            "$ref": "#/definitions/QnaPrompt"
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "isContextOnly",
        "prompts"
      ]
    },
    "QnaDialogUpdate": {
      "type": "object",
      "description": "A dialog to be displayed to the user.",
      "properties": {
        "isContextOnly": {
          "type": "boolean",
          "description": "If true, is context only."
        },
        "prompts": {
          "type": "array",
          "description": "The prompts to display.",
          "items": {
            "$ref": "#/definitions/QnaPrompt"
          },
          "x-ms-identifiers": []
        }
      }
    },
    "QnaPrompt": {
      "type": "object",
      "description": "Details of a QnA prompt.",
      "properties": {
        "displayOrder": {
          "type": "integer",
          "format": "int16",
          "description": "The display order."
        },
        "qnaId": {
          "type": "integer",
          "format": "int32",
          "description": "The QnA ID."
        },
        "qna": {
          "$ref": "#/definitions/QnaRecord",
          "description": "The QnA record."
        },
        "displayText": {
          "type": "string",
          "description": "The display text."
        }
      },
      "required": [
        "displayOrder",
        "qnaId",
        "qna",
        "displayText"
      ]
    },
    "QnaRecord": {
      "type": "object",
      "description": "Question and answer record",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The record ID."
        },
        "answer": {
          "type": "string",
          "description": "The answer."
        },
        "source": {
          "type": "string",
          "description": "The source."
        },
        "questions": {
          "type": "array",
          "description": "The questions.",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "type": "string",
          "description": "The metadata."
        },
        "dialog": {
          "$ref": "#/definitions/QnaDialog",
          "description": "The dialog."
        },
        "activeLearningSuggestions": {
          "$ref": "#/definitions/SuggestedQuestionsCluster",
          "description": "The active learning suggestions."
        }
      },
      "required": [
        "id",
        "answer",
        "source",
        "questions",
        "metadata",
        "dialog",
        "activeLearningSuggestions"
      ]
    },
    "QnaRecordUpdate": {
      "type": "object",
      "description": "Question and answer record",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The record ID."
        },
        "answer": {
          "type": "string",
          "description": "The answer."
        },
        "source": {
          "type": "string",
          "description": "The source."
        },
        "questions": {
          "type": "array",
          "description": "The questions.",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "type": "string",
          "description": "The metadata."
        },
        "dialog": {
          "$ref": "#/definitions/QnaDialogUpdate",
          "description": "The dialog."
        },
        "activeLearningSuggestions": {
          "$ref": "#/definitions/SuggestedQuestionsClusterUpdate",
          "description": "The active learning suggestions."
        }
      }
    },
    "QnaRecordUpdateRecord": {
      "type": "object",
      "properties": {
        "updateOperation": {
          "$ref": "#/definitions/UpdateOperationKind"
        },
        "value": {
          "$ref": "#/definitions/QnaRecordUpdate"
        }
      }
    },
    "QnaSourceKind": {
      "type": "string",
      "description": "Supported source types.",
      "enum": [
        "file",
        "url"
      ],
      "x-ms-enum": {
        "name": "QnaSourceKind",
        "modelAsString": true,
        "values": [
          {
            "name": "file",
            "value": "file",
            "description": "File source"
          },
          {
            "name": "url",
            "value": "url",
            "description": "Url source"
          }
        ]
      }
    },
    "QnaSourceMetadata": {
      "type": "object",
      "description": "Input source file or url details.",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Friendly name of the Source."
        },
        "source": {
          "type": "string",
          "description": "Unique source identifier. Name of the file if it's a 'file' source; otherwise, the complete URL if it's a 'url' source."
        },
        "sourceUri": {
          "type": "string",
          "description": "URI location for the file or url."
        },
        "sourceKind": {
          "$ref": "#/definitions/QnaSourceKind",
          "description": "The source kind."
        },
        "contentStructureKind": {
          "$ref": "#/definitions/SourceContentStructureKind",
          "description": "The content structure kind."
        }
      },
      "required": [
        "sourceUri",
        "sourceKind",
        "contentStructureKind"
      ]
    },
    "QnaSourceRecord": {
      "type": "object",
      "description": "Custom source record with last updated date-time.",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Friendly name of the Source."
        },
        "source": {
          "type": "string",
          "description": "Unique source identifier. Name of the file if it's a 'file' source; otherwise, the complete URL if it's a 'url' source."
        },
        "sourceUri": {
          "type": "string",
          "description": "URI location for the file or url."
        },
        "sourceKind": {
          "$ref": "#/definitions/QnaSourceKind",
          "description": "The source kind."
        },
        "contentStructureKind": {
          "$ref": "#/definitions/SourceContentStructureKind",
          "description": "The content structure kind."
        },
        "lastDeployedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time of the last deployment."
        }
      },
      "required": [
        "sourceUri",
        "sourceKind",
        "contentStructureKind"
      ]
    },
    "QnaSourceRecordUpdate": {
      "type": "object",
      "description": "Custom source record with last updated date-time.",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Friendly name of the Source."
        },
        "source": {
          "type": "string",
          "description": "Unique source identifier. Name of the file if it's a 'file' source; otherwise, the complete URL if it's a 'url' source."
        },
        "sourceUri": {
          "type": "string",
          "description": "URI location for the file or url."
        },
        "sourceKind": {
          "$ref": "#/definitions/QnaSourceKind",
          "description": "The source kind."
        },
        "contentStructureKind": {
          "$ref": "#/definitions/SourceContentStructureKind",
          "description": "The content structure kind."
        },
        "lastDeployedDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time of the last deployment."
        }
      }
    },
    "QnaSourceRecordUpdateRecord": {
      "type": "object",
      "properties": {
        "updateOperation": {
          "$ref": "#/definitions/UpdateOperationKind"
        },
        "value": {
          "$ref": "#/definitions/QnaSourceRecordUpdate"
        }
      }
    },
    "SourceContentStructureKind": {
      "type": "string",
      "description": "Content structure type for sources.",
      "enum": [
        "unstructured"
      ],
      "x-ms-enum": {
        "name": "SourceContentStructureKind",
        "modelAsString": true,
        "values": [
          {
            "name": "unstructured",
            "value": "unstructured",
            "description": "The source content is unstructured"
          }
        ]
      }
    },
    "SuggestedQuestion": {
      "type": "object",
      "description": "Question suggested by the Active Learning feature.",
      "properties": {
        "question": {
          "type": "string",
          "description": "Question suggested by the Active Learning feature."
        },
        "userSuggestedCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of times the question was suggested explicitly by the user."
        },
        "autoSuggestedCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of times the question was suggested automatically by the Active Learning algorithm."
        }
      },
      "required": [
        "question",
        "userSuggestedCount",
        "autoSuggestedCount"
      ]
    },
    "SuggestedQuestionUpdate": {
      "type": "object",
      "description": "Question suggested by the Active Learning feature.",
      "properties": {
        "question": {
          "type": "string",
          "description": "Question suggested by the Active Learning feature."
        },
        "userSuggestedCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of times the question was suggested explicitly by the user."
        },
        "autoSuggestedCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of times the question was suggested automatically by the Active Learning algorithm."
        }
      }
    },
    "SuggestedQuestionsCluster": {
      "type": "object",
      "description": "The details of a suggested questions cluster.",
      "properties": {
        "clusterHead": {
          "type": "string",
          "description": "Active Learning suggested questions cluster details."
        },
        "suggestedQuestions": {
          "$ref": "#/definitions/SuggestedQuestion",
          "description": "List of all suggested questions for the QnA."
        }
      },
      "required": [
        "clusterHead",
        "suggestedQuestions"
      ]
    },
    "SuggestedQuestionsClusterUpdate": {
      "type": "object",
      "description": "The details of a suggested questions cluster.",
      "properties": {
        "clusterHead": {
          "type": "string",
          "description": "Active Learning suggested questions cluster details."
        },
        "suggestedQuestions": {
          "$ref": "#/definitions/SuggestedQuestionUpdate",
          "description": "List of all suggested questions for the QnA."
        }
      }
    },
    "SynonymAsset": {
      "type": "object",
      "description": "Collection of synonyms.",
      "properties": {
        "alterations": {
          "type": "array",
          "description": "Collection of word alterations.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "alterations"
      ]
    },
    "UpdateOperationKind": {
      "type": "string",
      "description": "The kind of an update operation.",
      "enum": [
        "add",
        "delete",
        "replace"
      ],
      "x-ms-enum": {
        "name": "UpdateOperationKind",
        "modelAsString": true,
        "values": [
          {
            "name": "add",
            "value": "add",
            "description": "Addition operation"
          },
          {
            "name": "delete",
            "value": "delete",
            "description": "Deletion operation"
          },
          {
            "name": "replace",
            "value": "replace",
            "description": "Replace operation"
          }
        ]
      }
    },
    "UpdateQnaSourceRecord": {
      "type": "object",
      "description": "Update source record.",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Friendly name of the Source."
        },
        "source": {
          "type": "string",
          "description": "Unique source identifier. Name of the file if it's a 'file' source; otherwise, the complete URL if it's a 'url' source."
        },
        "sourceUri": {
          "type": "string",
          "description": "URI location for the file or url."
        },
        "sourceKind": {
          "$ref": "#/definitions/QnaSourceKind",
          "description": "The source kind."
        },
        "contentStructureKind": {
          "$ref": "#/definitions/SourceContentStructureKind",
          "description": "The content structure kind."
        },
        "refreshSourceOptions": {
          "type": "boolean",
          "description": "Boolean flag used to refresh data from the Source."
        }
      },
      "required": [
        "sourceUri",
        "sourceKind",
        "contentStructureKind",
        "refreshSourceOptions"
      ]
    },
    "WordAlterations": {
      "type": "object",
      "description": "Collection of word alterations.",
      "properties": {
        "alterations": {
          "type": "array",
          "description": "Collection of word alterations.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "alterations"
      ]
    }
  },
  "parameters": {
    "AssetKindParameter": {
      "name": "assetKind",
      "in": "query",
      "description": "Kind of the asset of the project",
      "required": false,
      "type": "string",
      "enum": [
        "qnas",
        "synonyms"
      ],
      "x-ms-enum": {
        "modelAsString": false
      },
      "x-ms-parameter-location": "method"
    },
    "Azure.Core.Foundations.ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "description": "The API version to use for this operation.",
      "required": true,
      "type": "string",
      "minLength": 1,
      "x-ms-parameter-location": "method",
      "x-ms-client-name": "apiVersion"
    },
    "Azure.Core.MaxPageSizeQueryParameter": {
      "name": "maxpagesize",
      "in": "query",
      "description": "The maximum number of result items per page.",
      "required": false,
      "type": "integer",
      "format": "int32",
      "x-ms-parameter-location": "method"
    },
    "Azure.Core.SkipQueryParameter": {
      "name": "skip",
      "in": "query",
      "description": "The number of result items to skip.",
      "required": false,
      "type": "integer",
      "format": "int32",
      "default": 0,
      "x-ms-parameter-location": "method"
    },
    "Azure.Core.TopQueryParameter": {
      "name": "top",
      "in": "query",
      "description": "The number of result items to return.",
      "required": false,
      "type": "integer",
      "format": "int32",
      "x-ms-parameter-location": "method"
    },
    "ImportExportFormatParameter": {
      "name": "format",
      "in": "query",
      "description": "Knowledge base Import or Export format",
      "required": false,
      "type": "string",
      "enum": [
        "json",
        "tsv",
        "excel"
      ],
      "x-ms-enum": {
        "name": "ImportExportFormat",
        "modelAsString": true,
        "values": [
          {
            "name": "json",
            "value": "json",
            "description": "Export or Import QnA assets in JSON format"
          },
          {
            "name": "tsv",
            "value": "tsv",
            "description": "Export or Import knowledge base replica including all assets and metadata in Excel format."
          },
          {
            "name": "excel",
            "value": "excel",
            "description": "Export or Import knowledge base replica including all assets and metadata in Tsv format."
          }
        ]
      },
      "x-ms-parameter-location": "method"
    },
    "JobIdParameter": {
      "name": "jobId",
      "in": "path",
      "description": "Job ID",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    },
    "ProjectNamePathParameter": {
      "name": "projectName",
      "in": "path",
      "description": "The name of the project",
      "required": true,
      "type": "string",
      "maxLength": 100,
      "x-ms-parameter-location": "method"
    }
  }
}
