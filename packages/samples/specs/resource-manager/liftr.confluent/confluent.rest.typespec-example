
@rest("/subscriptions/{subscription}/resourceGroups/{resourceGroup}/providers/Microsoft.Confluent/organizations/{name}")
namespace Organization
{
  @get op get(@path subscription: string, @path resourceGroup: string, @path name: string) : ArmResponse<Organization>;

  @lro("/operations", OperationStatus)
  @put op createOrUpdate(@path subscription: string, @path resourceGroup: string, @path name: string, Organization) : ArmResponse<Organization>;
  @patch op update(@path subscription: string, @path resourceGroup: string, @path name: string, OrganizationUpdate) : ArmResponse<Organization>;
  
  @lro("/operations", OperationStatus)
  @delete op delete(@path subscription: string, @path resourceGroup: string, @path name: string) : ArmResponse;

  @post op getKeys(@path subscription: string, @path resourceGroup: string, @path name: string) : ArmResponse<OrganizationKeys>;
}

@rest("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}")
namespace OrganizationListAll
{
  @get op listAll(@path subscription: string) : Page<OrganizationKeys>;
}

@rest("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}")
namespace OrganizationList
{
  @get op listByResourceGroup(@path subscription: string, @path resourceGroup: string) : Page<OrganizationKeys>;
}

""" Paged response """
model Page<T>
{
  ... ArmResponse;
  values: T[];
  nextLink: Uri;
}

""" Response envelope for ARM operations. """
model ArmResponse
{
  @status code: 200;
  @header x-ms-client-request-id: string;
  @header x-ms-correlation-request-id: string;
}

""" Typed response envelope for ARM operations. """
model ArmResponse<T>
{
  ... ArmResponse;
  ... T;
}

""" Response Body for status polling of long-running  operations. """
model OperationStatus
{
  @header AzureAsyncOperation: Uri;
  status: "InProgress" | "Completed" | "Cancelled" | "Failed";
}

""" Common properties for all ARM resources. """
model ArmResource
{
  @visibility("read")
  id: string;

  @visibility("read")
  name: string; 

  @visibility("read")
  type: string;   
}

""" Common properties for all resources tracked by ARM. """
model ArmTrackedResource
{
  ... ArmResource;
  location: string;
  tags?: Map<string, string>;
}

model Organization 
{
  ... ArmTrackedResource;
  properties: OrganizationProperties;
}

""" Details of the Confluent organization. """
model OrganizationProperties 
{
  
  """ UTC Time when Organization resource was created. """
  @visibility("read") 
  createdTime: DateTime;

  """ Id of the Confluent organization."""
  @visibility("read") 
  organizationId: string;

  """ Single sign-on url for the Confluent organization."""
  @visibility("read") 
  ssoUrl: Uri;

  """ Details of the product offering."""
  offerDetail: OfferDetail;

  """ Subscriber details."""
  userDetail: UserDetail;
}

""" Details of the product offering."""
model OfferDetail
{
  """ Id of the product publisher. """
  publisherId: string50;

  """ Id of the product offering. """
  id: string50;

  """ Id of the product offer plan. """
  planId: string50;

  """ Name of the product offer plan. """
  planName: string50;

  """ Offer plan term unit. """
  termUnit: string25;
  
  """ SaaS offer status. """
  status: "Started" | "PendingFulfillmentStart" | "InProgress" |
          "Subscribed" | "Suspended" | "Reinstated" | "Succeeded" |
          "Failed" | "Unsubscribed" | "Updating";
}

""" Details of the subscriber """
model UserDetail
{
  """ Subscriber first name."""
  firstName: string50;

  """ Subscriber last name."""
  lastName: string50;

  """ Subscriber email address."""
  emailAddress: email
}

model OrganizationKeys
{
  """ The primary key. """
  primary: SecureString;

  """ The secondary Key. """
  secondary: SecureString;
}

@doc("Reusable representation of an email address")
@pattern("\\w+@\\w+\\.\\w+")
model email: string;

@doc("Shorthand for setting length limit.")
@length(50)
model string50: string;

""" Shorthand for setting length limit. """
@length(25)
model string25: string;
